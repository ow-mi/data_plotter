[{"name":"app.R","content":"\nfiles <- list.files()\n\n# Loop through each file\nfor (file in files) {\n  # Check if the file is an R script\n  if (grepl(\"\\\\.R$\", file)) { # Use regex for more robust matching\n    # Source the file\n    if (file != \"app.R\") {\n      source(file)\n    }\n  }\n}\n\nlibrary(\"shiny\")\nlibrary(\"shinyTime\")\nlibrary(\"bslib\")\nlibrary(\"shinyAce\")\nlibrary(\"stringr\")\nlibrary(\"data.table\")\nlibrary(\"DT\")\nlibrary(\"munsell\")\nlibrary(\"ggplot2\")\nlibrary(\"plotly\")\nlibrary(\"lubridate\")\nlibrary(\"jsonlite\")\nlibrary(\"fasttime\")\nlibrary(\"readxl\")\nlibrary(\"fst\")\nlibrary(\"nanoparquet\")\nlibrary(\"tools\")\nlibrary(\"scattermore\")\nlibrary(\"purrr\")\nlibrary(\"future\")\nlibrary(\"skimr\")\nlibrary(\"htmlwidgets\")\nlibrary(\"spsComps\")\nlibrary(\"base64enc\")\nlibrary(\"thematic\")\noptions(shiny.useragg = TRUE)\nthematic_shiny(font = \"auto\")\n\napp <- shiny::shinyApp(\n  ui = ui_global(),\n  server = server_global\n)\napp","type":"text"},{"name":"functions.R","content":"# functions.R\n# Note: Required libraries are loaded in app.R\n\n# --- Custom UI Helper Functions ---\np <- function(...) { # Concatenate all arguments with paste0\n  paste0(...)\n}\n\ntext_input_tip <- function(inputId, label, value = \"\", tip = \"Tooltip text\", placeholder = \"\") {\n  shiny::textInput(inputId, label, value, placeholder = placeholder) |>\n    bslib::tooltip(tip, placement = \"right\")\n}\n\nnumeric_input_tip <- function(inputId, label, value, min = 0, max = 1, step = 0.1, tip = \"Tooltip text\") {\n  shiny::numericInput(inputId, label, value = value, min = min, max = max, step = step) |>\n    bslib::tooltip(tip, placement = \"right\")\n}\n\naction_input_tip <- function(inputId, label, tip = \"Tooltip text\", ...) {\n  shiny::actionButton(inputId, label, ...) |>\n    bslib::tooltip(tip, placement = \"right\")\n}\n\n# --- Data Manipulation Functions ---\nfilter_in <- function(df, col_to_effect, input_text) {\n  if (!is.data.table(df)) setDT(df)\n  if (is.null(input_text) || input_text == \"\") return(df)\n  \n  # Split by comma, allowing for optional spaces\n  patterns <- str_trim(str_split(input_text, \",\\\\s*\")[[1]])\n  patterns <- patterns[patterns != \"\"] # Remove empty strings\n  if (length(patterns) == 0) return(df)\n  \n  # Create a single regex pattern: (pattern1|pattern2|...)\n  regex_pattern <- paste(patterns, collapse = \"|\")\n  \n  # Use str_detect with the regex pattern\n  # Ensure the column exists and get its values\n  if (!col_to_effect %in% names(df)) {\n    warning(paste(\"Column\", col_to_effect, \"not found in filter_in.\"))\n    return(df)\n  }\n  \n  # data.table filtering\n  df[str_detect(get(col_to_effect), regex_pattern)]\n}\n\nfilter_out <- function(df, col_to_effect, input_text) {\n  if (!is.data.table(df)) setDT(df)\n  if (is.null(input_text) || input_text == \"\") return(df)\n  \n  patterns <- str_trim(str_split(input_text, \",\\\\s*\")[[1]])\n  patterns <- patterns[patterns != \"\"]\n  if (length(patterns) == 0) return(df)\n  \n  regex_pattern <- paste(patterns, collapse = \"|\")\n  \n  if (!col_to_effect %in% names(df)) {\n    warning(paste(\"Column\", col_to_effect, \"not found in filter_out.\"))\n    return(df)\n  }\n  \n  df[!str_detect(get(col_to_effect), regex_pattern)]\n}\n\nrname <- function(df, col_to_effect, input_text) {\n  if (!is.data.table(df)) setDT(df)\n  if (is.null(input_text) || input_text == \"\" || !grepl(\",\", input_text)) {\n    # Expecting pairs like \"old1,new1,old2,new2\"\n    if (input_text != \"\") warning(\"Rename input format seems incorrect. Expected 'old1,new1,old2,new2'.\")\n    return(df)\n  }\n  \n  rename_parts <- str_trim(str_split(input_text, \",\\\\s*\")[[1]])\n  \n  # Ensure we have an even number of parts for old/new pairs\n  if (length(rename_parts) %% 2 != 0) {\n    warning(\"Rename pairs are uneven. Last part ignored.\")\n    rename_parts <- rename_parts[-length(rename_parts)] # Remove last if uneven\n  }\n  if (length(rename_parts) == 0) return(df)\n\n  # Create named vector for str_replace_all: c(old1 = new1, old2 = new2)\n  old_names <- rename_parts[seq(1, length(rename_parts), by = 2)]\n  new_names <- rename_parts[seq(2, length(rename_parts), by = 2)]\n  \n  # Ensure no empty old_names which can cause issues with str_replace_all\n  valid_indices <- old_names != \"\"\n  old_names <- old_names[valid_indices]\n  new_names <- new_names[valid_indices]\n\n  if (length(old_names) == 0) return(df)\n  \n  rename_vector <- setNames(new_names, old_names)\n\n  if (!col_to_effect %in% names(df)) {\n    warning(paste(\"Column\", col_to_effect, \"not found in rname.\"))\n    return(df)\n  }\n  \n  # data.table in-place modification\n  df[, (col_to_effect) := str_replace_all(get(col_to_effect), rename_vector)]\n  df\n}\n\n\n# --- Ace Editor Setup ---\n\n# Generate function lists for Ace Editor autocompletion (run this once to create the JSON)\ngenerate_function_lists <- function() {\n  tryCatch({\n    tidyverse_packages <- c(\"ggplot2\", \"dplyr\", \"tidyr\", \"readr\", \"purrr\", \"tibble\", \"stringr\", \"forcats\", \"data.table\", \"lubridate\")\n    get_functions_from_package <- function(pkg) {\n      if (requireNamespace(pkg, quietly = TRUE)) {\n        ns <- getNamespace(pkg)\n        # Filter out non-function objects and internal-looking functions\n        funcs <- Filter(function(x) is.function(ns[[x]]) && !startsWith(x, \".\"), ls(ns, all.names = FALSE))\n        if (length(funcs) > 0) {\n          data.frame(\n            name = funcs,\n            meta = pkg, # Use 'meta' as per shinyAce documentation for category\n            value = funcs, # 'value' is what's inserted\n            score = 100, # Arbitrary score\n            stringsAsFactors = FALSE\n          )\n        } else {\n          NULL\n        }\n      } else {\n        NULL\n      }\n    }\n    \n    all_pkg_functions_list <- lapply(tidyverse_packages, get_functions_from_package)\n    all_pkg_functions_df <- do.call(rbind, all_pkg_functions_list)\n    \n    # Add base R functions (a selection, not exhaustive)\n    base_r_funcs <- c(\"c\", \"list\", \"data.frame\", \"matrix\", \"vector\", \"seq\", \"rep\", \"lapply\", \"sapply\", \"tapply\", \"mean\", \"sum\", \"min\", \"max\", \"sd\", \"median\", \"quantile\", \"summary\", \"head\", \"tail\", \"subset\", \"transform\", \"with\", \"within\", \"if\", \"else\", \"for\", \"while\", \"function\", \"return\", \"print\", \"cat\", \"paste\", \"paste0\", \"sprintf\", \"plot\", \"hist\", \"lines\", \"points\", \"text\", \"legend\", \"par\", \"options\", \"Sys.Date\", \"Sys.time\", \"as.Date\", \"as.POSIXct\")\n    base_df <- data.frame(\n        name = base_r_funcs,\n        meta = \"base R\",\n        value = base_r_funcs,\n        score = 100,\n        stringsAsFactors = FALSE\n    )\n    \n    combined_functions <- rbind(all_pkg_functions_df, base_df)\n    combined_functions <- combined_functions[!duplicated(combined_functions$name), ] # Remove duplicates\n\n    # if (!dir.exists(\"www\")) dir.create(\"www\") # shinyAce looks in www by default for JSON\n    # jsonlite::write_json(combined_functions, \"www/r_functions_autocomplete.json\", pretty = TRUE)\n    # message(\"Generated www/r_functions_autocomplete.json for Ace autocompletion.\")\n  # }, error = function(e) {\n    # message(paste(\"Error generating autocomplete list:\", e$message))\n  })\n}\n\n# Call it once if the file doesn't exist or needs updating\nif (!file.exists(\"www/r_functions_autocomplete.json\")) {\n  generate_function_lists()\n}\n\n\naceEditor_pre_ <- function(inputId, value, mode = \"r\", theme = \"gruvbox\", minLines = 6, maxLines = 50, fontSize = 13, height = \"auto\") {\n  aceEditor(\n    inputId,\n    value = value,\n    mode = mode,\n    theme = theme,\n    minLines = minLines,\n    maxLines = maxLines,\n    fontSize = fontSize,\n    height = if(height == \"auto\") \"calc(100vh - 300px)\" else height,  # Dynamic height for sidebars\n    autoScrollEditorIntoView = FALSE,  # Disable auto-scroll for performance\n    wordWrap = TRUE,\n    showPrintMargin = FALSE,\n    highlightActiveLine = FALSE,  # Disable for performance\n    debounce = 750  # Increase debounce to reduce processing\n  )\n}\n\n# Enhanced Ace editor with fullscreen capability\naceEditor_pre <- function(inputId, value, mode = \"r\", theme = \"gruvbox\", minLines = 6, maxLines = 50, fontSize = 13, height = \"auto\", showFullscreenButton = TRUE) {\n\n  # A unique ID for the main wrapper div that contains the button and editor\n  wrapperId <- paste0(inputId, \"_wrapper\")\n\n  # Create the fullscreen button. It will be part of the editor_container.\n  fullscreen_button <- if (showFullscreenButton) {\n    actionButton(\n      paste0(inputId, \"_fullscreen_btn\"),\n      icon = icon(\"expand\"),\n      label = \"Fullscreen\",\n      class = \"btn-sm btn-outline-secondary\",\n      # Style to position it at the top-right of the wrapper\n      style = \"position: absolute; top: 5px; right: 5px; z-index: 10;\"\n    )\n  } else {\n    NULL\n  }\n\n  # Create the editor container with a unique ID and relative positioning.\n  # This is the element our JavaScript will make fullscreen.\n  editor_container <- div(\n    id = wrapperId,\n    style = \"position: relative;\",\n    fullscreen_button,\n    aceEditor(\n      inputId,\n      value = value,\n      mode = mode,\n      theme = theme,\n      minLines = minLines,\n      maxLines = maxLines,\n      fontSize = fontSize,\n      # Use a calculated height for auto, which works better in Shiny layouts\n      height = if(height == \"auto\") \"calc(100vh - 300px)\" else height,\n      autoScrollEditorIntoView = FALSE,\n      wordWrap = TRUE,\n      showPrintMargin = FALSE,\n      highlightActiveLine = TRUE, # It's a nice feature to have\n      debounce = 750\n    )\n  )\n\n  # CSS for the fullscreen state and the new close button\n  fullscreen_css <- tags$style(HTML(sprintf(\"\n    /* This class is applied to the wrapper div (%s) */\n    .ace-editor-fullscreen {\n      position: fixed !important;\n      top: 0 !important;\n      left: 0 !important;\n      width: 100vw !important;\n      height: 100vh !important;\n      z-index: 9999 !important;\n      /* Use a background that matches the default theme */\n      background: #272822 !important;\n      padding: 10px;\n      box-sizing: border-box;\n    }\n\n    /* Ensure the ace editor instance fills the new fullscreen wrapper */\n    .ace-editor-fullscreen .shiny-ace-container,\n    .ace-editor-fullscreen .shiny-ace-container .ace_editor {\n      height: 100%% !important;\n      width: 100%% !important;\n    }\n\n    /* Hide the original fullscreen button when in fullscreen mode */\n    .ace-editor-fullscreen > #%s_fullscreen_btn {\n      display: none;\n    }\n\n    /* Style for the new 'Exit' button we add with JavaScript */\n    .fullscreen-close-btn {\n      position: absolute;\n      top: 15px;\n      right: 15px;\n      z-index: 10000;\n      background: #f92672; /* A color that fits the gruvbox theme */\n      color: white;\n      border: 1px solid #fff;\n      border-radius: 4px;\n      padding: 8px 12px;\n      cursor: pointer;\n      font-family: sans-serif;\n      font-size: 14px;\n    }\n    .fullscreen-close-btn:hover {\n      background: #c7205b;\n    }\n  \", paste0(\"#\", wrapperId), inputId)))\n\n  # JavaScript to handle the fullscreen logic\n  fullscreen_js <- tags$script(HTML(sprintf(\"\n    $(document).ready(function() {\n      // Use a short delay to ensure all elements are rendered\n      setTimeout(function() {\n        var editorId = '%s';\n        var wrapperId = '%s_wrapper';\n        var wrapper = $('#' + wrapperId);\n\n        // Check if the wrapper element exists\n        if (wrapper.length === 0) {\n          console.error('Ace Editor wrapper not found:', wrapperId);\n          return;\n        }\n\n        var fullscreenBtn = $('#' + editorId + '_fullscreen_btn');\n        var isFullscreen = false;\n        var originalParent = null; // To store where the editor came from\n\n        function enterFullscreen() {\n          if (isFullscreen) return;\n          console.log('Entering fullscreen for:', editorId);\n\n          originalParent = wrapper.parent(); // Save original location\n          $('body').append(wrapper); // Move wrapper to body for fullscreen\n          wrapper.addClass('ace-editor-fullscreen');\n\n          // Add a dedicated close button inside the wrapper\n          var closeBtn = $('<button type=\\\"button\\\" class=\\\"fullscreen-close-btn\\\"><i class=\\\"fas fa-times\\\"><\/i> Exit<\/button>');\n          wrapper.append(closeBtn);\n          closeBtn.on('click', exitFullscreen); // Attach event handler\n\n          // Add a namespaced resize event listener to the window\n          // This ensures the editor resizes when the browser window does.\n          $(window).on('resize.aceFullscreen-' + editorId, function() {\n            ace.edit(editorId).resize();\n          });\n\n          ace.edit(editorId).resize(); // Tell Ace to resize to its new container\n          isFullscreen = true;\n        }\n\n        function exitFullscreen() {\n          if (!isFullscreen) return;\n          console.log('Exiting fullscreen for:', editorId);\n\n          // Remove the specific namespaced event listener to avoid memory leaks\n          $(window).off('resize.aceFullscreen-' + editorId);\n\n          // Move the editor back to its original parent container\n          if (originalParent && originalParent.length) {\n            originalParent.append(wrapper);\n          } else {\n            // Fallback if original parent is lost\n            wrapper.remove();\n          }\n          \n          wrapper.removeClass('ace-editor-fullscreen');\n          wrapper.find('.fullscreen-close-btn').remove(); // Clean up close button\n\n          ace.edit(editorId).resize(); // Resize back to normal\n          isFullscreen = false;\n        }\n\n        // Attach the main click handler to the original 'Fullscreen' button\n        fullscreenBtn.on('click', function(e) {\n          e.preventDefault(); // Prevent any default button behavior\n          if (!isFullscreen) {\n            enterFullscreen();\n          } else {\n            exitFullscreen();\n          }\n        });\n\n        // Add Escape key functionality to exit fullscreen mode\n        $(document).on('keydown', function(e) {\n          if (e.key === 'Escape' && isFullscreen) {\n            exitFullscreen();\n          }\n        });\n\n      }, 200); // End of setTimeout\n    });\n  \", inputId, inputId)))\n\n  # Return the complete UI widget as a tagList\n  tagList(\n    fullscreen_css,\n    fullscreen_js,\n    editor_container\n  )\n}\n\n\n# Alternative: Simple fullscreen button without overlay\naceEditor_simple_fullscreen <- function(inputId, value, mode = \"r\", theme = \"gruvbox\", minLines = 6, maxLines = 50, fontSize = 13, height = \"auto\") {\n  \n  # Create the fullscreen button\n  fullscreen_button <- actionButton(\n    paste0(inputId, \"_fullscreen_btn\"),\n    icon = icon(\"expand\"),\n    label = \"Fullscreen\",\n    class = \"btn-sm btn-outline-secondary mb-2\",\n    style = \"float: right;\"\n  )\n  \n  # Create the editor\n  editor <- aceEditor(\n    inputId,\n    value = value,\n    mode = mode,\n    theme = theme,\n    minLines = minLines,\n    maxLines = maxLines,\n    fontSize = fontSize,\n    height = if(height == \"auto\") \"calc(100vh - 300px)\" else height,\n    autoScrollEditorIntoView = FALSE,\n    wordWrap = TRUE,\n    showPrintMargin = FALSE,\n    highlightActiveLine = FALSE,\n    debounce = 750\n  )\n  \n  # Add JavaScript for simple fullscreen toggle\n  fullscreen_js <- tags$script(HTML(sprintf(\"\n    $(document).ready(function() {\n      var editorId = '%s';\n      var fullscreenBtn = $('#' + editorId + '_fullscreen_btn');\n      var editorContainer = $('#' + editorId).closest('.shiny-ace-container');\n      var isFullscreen = false;\n      \n      // Wait for Ace editor to be ready\n      var checkEditor = setInterval(function() {\n        if (typeof ace !== 'undefined' && ace.edit(editorId)) {\n          clearInterval(checkEditor);\n          setupFullscreen();\n        }\n      }, 100);\n      \n      function setupFullscreen() {\n        fullscreenBtn.on('click', function() {\n          console.log('Simple fullscreen button clicked for:', editorId);\n          if (!isFullscreen) {\n            // Enter fullscreen\n            editorContainer.css({\n              'position': 'fixed',\n              'top': '0',\n              'left': '0',\n              'width': '100vw',\n              'height': '100vh',\n              'z-index': '9999',\n              'background': 'white',\n              'border': 'none'\n            });\n            \n            $('#' + editorId).css('height', 'calc(100vh - 60px)');\n            \n            // Update button\n            fullscreenBtn.find('i').removeClass('fa-expand').addClass('fa-compress');\n            fullscreenBtn.find('span').text('Exit Fullscreen');\n            \n            isFullscreen = true;\n            console.log('Entered simple fullscreen mode');\n            \n          } else {\n            // Exit fullscreen\n            editorContainer.css({\n              'position': '',\n              'top': '',\n              'left': '',\n              'width': '',\n              'height': '',\n              'z-index': '',\n              'background': '',\n              'border': ''\n            });\n            \n            $('#' + editorId).css('height', '');\n            \n            // Update button\n            fullscreenBtn.find('i').removeClass('fa-compress').addClass('fa-expand');\n            fullscreenBtn.find('span').text('Fullscreen');\n            \n            isFullscreen = false;\n            console.log('Exited simple fullscreen mode');\n          }\n          \n          // Resize editor\n          var editor = ace.edit(editorId);\n          if (editor) {\n            editor.resize();\n          }\n        });\n        \n        // Handle escape key\n        $(document).on('keydown', function(e) {\n          if (e.key === 'Escape' && isFullscreen) {\n            fullscreenBtn.click();\n          }\n        });\n      }\n    });\n  \", inputId)))\n  \n  # Return the complete widget\n  tagList(\n    fullscreen_js,\n    div(\n      fullscreen_button,\n      editor\n    )\n  )\n}\n\nace_server_functions <- function(ace_input_name) {\n  # These functions are generally for more advanced Ace features or if issues with default setup.\n  aceAutocomplete(ace_input_name) # Often handled by enableLiveAutocompletion\n  aceTooltip(ace_input_name)\n  aceAnnotate(ace_input_name) # For adding error/warning markers\n}\n\n# --- Server Module for Data Table Display ---\n\n\n# --- Server Module for Data Combiner (combines outputs of multiple importers) ---\n\n\n\n# --- Helper Functions ---\n\n# Code sharing helper function for plotters and importers\nget_plotter_code <- function(plotter_id, code_type = \"static\", main_session_input = NULL) {\n  # Helper function to access code from other plotters\n  # plotter_id: e.g., \"plotter_1\", \"plotter_2\", etc.\n  # code_type: \"text\", \"static\", \"interactive\", \"table\", \"final\", \"process\"\n  # main_session_input: The main session's input object\n  \n  if (is.null(main_session_input)) {\n    return(\"# Error: get_plotter_code() requires main_session_input\\n# Usage: get_plotter_code('plotter_1', 'static', main_session_input)\")\n  }\n  \n  # Build the namespaced input ID for the ace editor\n  if (code_type == \"process\") {\n    input_id <- paste0(plotter_id, \"-r_code_plot_process\")\n  } else {\n    input_id <- paste0(plotter_id, \"-r_code_plot_\", code_type)\n  }\n  \n  # Get the code from the other plotter's ace editor\n  code <- main_session_input[[input_id]]\n  \n  if (is.null(code) || trimws(code) == \"\") {\n    return(paste0(\"# No code found in \", plotter_id, \" for '\", code_type, \"' plot type\\n# Available types: 'text', 'static', 'interactive', 'table', 'final', 'process'\"))\n  }\n  \n  return(code)\n}\n\nget_importer_code <- function(importer_id, code_type = \"pre\", main_session_input = NULL) {\n  # Helper function to access code from other importers\n  # importer_id: e.g., \"data_import_module_1\", \"data_import_module_2\", etc.\n  # code_type: \"pre\" or \"post\"\n  # main_session_input: The main session's input object\n  \n  if (is.null(main_session_input)) {\n    return(\"# Error: get_importer_code() requires main_session_input\\n# Usage: get_importer_code('data_import_module_1', 'pre', main_session_input)\")\n  }\n  \n  # Build the namespaced input ID for the ace editor\n  if (code_type == \"pre\") {\n    input_id <- paste0(importer_id, \"-r_code_pre_process\")\n  } else if (code_type == \"post\") {\n    input_id <- paste0(importer_id, \"-r_code_post_process\")\n  } else {\n    return(paste0(\"# Invalid code_type: \", code_type, \"\\n# Available types: 'pre', 'post'\"))\n  }\n  \n  # Get the code from the other importer's ace editor\n  code <- main_session_input[[input_id]]\n  \n  if (is.null(code) || trimws(code) == \"\") {\n    return(paste0(\"# No code found in \", importer_id, \" for '\", code_type, \"' processing\\n# Available types: 'pre', 'post'\"))\n  }\n  \n  return(code)\n}\n\n\n# Custom downloadButton to prevent default browser download behavior\ndownloadButton <- function(...) {\n  tag <- shiny::downloadButton(...)\n  tag$attribs$download <- NULL\n  tag\n}\n\n# Load template files from inst folder\nload_templates <- function() {\n  # Get the path to the inst/code_template directory\n  template_dir <- system.file(\"code_template\", package = \"dataPlotter\")\n  \n  if (template_dir == \"\") {\n    stop(\"Template directory not found. Make sure the package is properly installed.\")\n  }\n  \n  # Load all template files\n  template_files <- list.files(template_dir, pattern = \"\\\\.R$\", full.names = TRUE, recursive = TRUE)\n  \n  # Load each template file\n  for (file in template_files) {\n    source(file, local = FALSE)\n  }\n  \n  cat(\"Loaded\", length(template_files), \"template files from\", template_dir, \"\\n\")\n}\n\n# Load templates in the correct order (mimicking load_templates.R)\nload_templates_ordered <- function() {\n  template_dir <- system.file(\"code_template\", package = \"dataPlotter\")\n  \n  if (template_dir == \"\") {\n    stop(\"Template directory not found. Make sure the package is properly installed.\")\n  }\n  \n  # Define the order in which templates should be loaded\n  template_order <- c(\n    \"data_import_preprocessing\",\n    \"data_import_postprocessing\", \n    \"plot_data_processing\",\n    \"text_output\",\n    \"table_output\",\n    \"interactive_plot\",\n    \"static_plot_modules/data_processing\",\n    \"static_plot_modules/base_setup\",\n    \"static_plot_modules/themes_styling\",\n    \"static_plot_modules/statistical_overlays\",\n    \"static_plot_modules/grid_axes\",\n    \"static_plot_modules/faceting_final\",\n    \"static_plot\",\n    \"final_conditional\",\n    \"combined_template\",\n    \"data_table_display\",\n    \"combined_data_summary\",\n    \"combined_data_sample\",\n    \"helper_code\",\n    \"downloader_code\"\n  )\n  \n  # Load templates in the specified order\n  for (template in template_order) {\n    file_path <- file.path(template_dir, paste0(template, \".R\"))\n    if (file.exists(file_path)) {\n      source(file_path, local = FALSE)\n      cat(\"Loaded:\", template, \"\\n\")\n    } else {\n      warning(\"Template file not found:\", file_path)\n    }\n  }\n  \n  cat(\"All templates loaded successfully from\", template_dir, \"\\n\")\n}\n\n# Alternative: Load specific template files\nload_specific_templates <- function(template_names = NULL) {\n  template_dir <- system.file(\"code_template\", package = \"dataPlotter\")\n  \n  if (template_dir == \"\") {\n    stop(\"Template directory not found.\")\n  }\n  \n  if (is.null(template_names)) {\n    # Load all templates\n    load_templates()\n    return()\n  }\n  \n  # Load specific templates\n  for (name in template_names) {\n    file_path <- file.path(template_dir, paste0(name, \".R\"))\n    if (file.exists(file_path)) {\n      source(file_path, local = FALSE)\n      cat(\"Loaded template:\", name, \"\\n\")\n    } else {\n      warning(\"Template file not found:\", file_path)\n    }\n  }\n}\n\n# Function to get template content as character\nget_template_content <- function(template_name) {\n  template_dir <- system.file(\"code_template\", package = \"dataPlotter\")\n  file_path <- file.path(template_dir, paste0(template_name, \".R\"))\n  \n  if (!file.exists(file_path)) {\n    stop(\"Template file not found:\", file_path)\n  }\n  \n  readLines(file_path, warn = FALSE)\n}\n\n# Function to list available templates\nlist_templates <- function() {\n  template_dir <- system.file(\"code_template\", package = \"dataPlotter\")\n  \n  if (template_dir == \"\") {\n    return(character(0))\n  }\n  \n  files <- list.files(template_dir, pattern = \"\\\\.R$\", recursive = TRUE)\n  gsub(\"\\\\.R$\", \"\", files)\n}\n\n# Utility functions for working with package files\nget_package_file_path <- function(file_path) {\n  # Get the full path to a file in the package\n  system.file(file_path, package = \"dataPlotter\")\n}\n\nread_package_file <- function(file_path) {\n  # Read a file from the package\n  full_path <- get_package_file_path(file_path)\n  if (full_path == \"\") {\n    stop(\"File not found in package:\", file_path)\n  }\n  readLines(full_path, warn = FALSE)\n}\n\nlist_package_files <- function(directory = \"\") {\n  # List all files in a package directory\n  package_dir <- system.file(directory, package = \"dataPlotter\")\n  if (package_dir == \"\") {\n    return(character(0))\n  }\n  list.files(package_dir, recursive = TRUE)\n}\n\n# Function to check if a file exists in the package\npackage_file_exists <- function(file_path) {\n  full_path <- get_package_file_path(file_path)\n  full_path != \"\" && file.exists(full_path)\n}\n\n# Function to get package data directory\nget_package_data_dir <- function() {\n  system.file(\"data\", package = \"dataPlotter\")\n}\n\n# Function to get package extdata directory\nget_package_extdata_dir <- function() {\n  system.file(\"extdata\", package = \"dataPlotter\")\n}\n\n# Simple test function for debugging fullscreen\naceEditor_test_fullscreen <- function(inputId, value = \"# Test editor\\n# Click the fullscreen button to test\", height = \"300px\") {\n  \n  # Create a simple fullscreen button\n  fullscreen_button <- actionButton(\n    paste0(inputId, \"_test_fullscreen_btn\"),\n    icon = icon(\"expand\"),\n    label = \"Test Fullscreen\",\n    class = \"btn-sm btn-primary mb-2\"\n  )\n  \n  # Create the editor\n  editor <- aceEditor(\n    inputId,\n    value = value,\n    mode = \"r\",\n    theme = \"gruvbox\",\n    height = height,\n    fontSize = 13\n  )\n  \n  # Simple JavaScript for testing\n  test_js <- tags$script(HTML(sprintf(\"\n    $(document).ready(function() {\n      console.log('Test fullscreen setup for:', '%s');\n      \n      var testBtn = $('#' + '%s' + '_test_fullscreen_btn');\n      var editorContainer = $('#' + '%s').closest('.shiny-ace-container');\n      \n      testBtn.on('click', function() {\n        console.log('Test button clicked!');\n        alert('Button clicked! Editor ID: ' + '%s');\n        \n        // Simple test - just change background color\n        editorContainer.css('background-color', 'yellow');\n        setTimeout(function() {\n          editorContainer.css('background-color', '');\n        }, 2000);\n      });\n    });\n  \", inputId, inputId, inputId, inputId)))\n  \n  # Return the test widget\n  tagList(\n    test_js,\n    div(\n      fullscreen_button,\n      editor\n    )\n  )\n}","type":"text"},{"name":"inst/www/r_functions_autocomplete.json","content":"[\n  {\n    \"name\": \"[.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"[.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.uneval\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"[.uneval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[[.ggproto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"[[.ggproto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[[<-.uneval\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"[[<-.uneval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[<-.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"[<-.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[<-.uneval\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"[<-.uneval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%+%\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"%+%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%+replace%\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"%+replace%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%||%\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"%||%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%|W|%\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"%|W|%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"+.gg\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"+.gg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"$.ggproto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"$.ggproto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"$.ggproto_parent\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"$.ggproto_parent\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"$.theme\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"$.theme\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"$<-.uneval\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"$<-.uneval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"absoluteGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"absoluteGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"absorb_grdevice_args\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"absorb_grdevice_args\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"add_ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_group\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"add_group\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_theme\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"add_theme\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"adjust_breaks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"adjust_breaks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"aes_\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"aes_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"aes_all\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"aes_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"aes_auto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"aes_auto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"aes_q\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"aes_q\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"aes_string\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"aes_string\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"aes_to_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"aes_to_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"after_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"after_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"after_stat\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"after_stat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"allow_lambda\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"allow_lambda\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"alternative_aes_extract_usage\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"alternative_aes_extract_usage\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"annotate\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"annotate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"annotation_custom\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"annotation_custom\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"annotation_id\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"annotation_id\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"annotation_logticks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"annotation_logticks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"annotation_map\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"annotation_map\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"annotation_raster\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"annotation_raster\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arg_enquos\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"arg_enquos\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_cli\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as_cli\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_facets\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as_facets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_facets_list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as_facets_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_gg_data_frame\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as_gg_data_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_labeller\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as_labeller\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_quoted\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as_quoted\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_unordered_factor\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as_unordered_factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.frame.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as.data.frame.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.list.ggproto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as.list.ggproto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.mask\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as.mask\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.quoted\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"as.quoted\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"assemble_strips\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"assemble_strips\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"attach_plot_env\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"attach_plot_env\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"autolayer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"autolayer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"autolayer.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"autolayer.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"autoplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"autoplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"autoplot.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"autoplot.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"axis_label_element_overrides\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"axis_label_element_overrides\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"axis_label_priority\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"axis_label_priority\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"axis_label_priority_between\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"axis_label_priority_between\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"backport_unit_methods\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"backport_unit_methods\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"benchplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"benchplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bin_breaks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"bin_breaks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bin_breaks_bins\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"bin_breaks_bins\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bin_breaks_width\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"bin_breaks_width\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bin_loc\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"bin_loc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bin_out\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"bin_out\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bin_vector\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"bin_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bin2d_breaks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"bin2d_breaks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binned_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"binned_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bins\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"bins\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"borders\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"borders\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"breaks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"breaks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"build_strip\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"build_strip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"by_layer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"by_layer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"c.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"calc_bw\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"calc_bw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"calc_element\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"calc_element\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"calc_limits_bbox\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"calc_limits_bbox\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"calc_logticks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"calc_logticks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"calculate_ellipse\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"calculate_ellipse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"camelize\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"camelize\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cases\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"cases\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"censor_labels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"censor_labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_aesthetics\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_aesthetics\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_arg\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_arg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_bool\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_bool\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_breaks_labels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_breaks_labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_call\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_call\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_character\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_closure\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_closure\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_coord_limits\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_coord_limits\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_data_frame\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_data_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_device\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_device\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_environment\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_environment\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_facet_vars\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_facet_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_formula\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_formula\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_function\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_inherits\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_inherits\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_labeller\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_labeller\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_layout\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_layout\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_linewidth\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_linewidth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_logical\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_name\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_nondata_cols\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_nondata_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_number_decimal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_number_decimal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_number_whole\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_number_whole\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_numeric\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_object\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_object\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_path\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_path\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_polar_guide\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_polar_guide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_required_aesthetics\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_required_aesthetics\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_scale_type\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_scale_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_string\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_string\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_subclass\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_subclass\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_symbol\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_symbol\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_transformation\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"check_transformation\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"clist\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"clist\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"close_poly\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"close_poly\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collapse_labels_lines\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"collapse_labels_lines\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collide\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"collide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collide_setup\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"collide_setup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collide2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"collide2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"combine_elements\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"combine_elements\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"combine_vars\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"combine_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compact\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"compact\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compact_facets\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"compact_facets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute_density\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"compute_density\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute_just\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"compute_just\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"continuous_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"continuous_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"contour_breaks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"contour_breaks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"contour_deduplicate\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"contour_deduplicate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"convertInd\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"convertInd\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_cartesian\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_cartesian\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_equal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_equal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_fixed\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_fixed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_flip\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_flip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_map\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_map\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_munch\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_munch\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_polar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_polar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_quickmap\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_quickmap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_radial\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_radial\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_sf\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_sf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coord_trans\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"coord_trans\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"count\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"create_layout\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"create_layout\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"create_quantile_segment_frame\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"create_quantile_segment_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cunion\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"cunion\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cut_interval\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"cut_interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cut_number\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"cut_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cut_width\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"cut_width\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dapply\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dapply\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"data_frame0\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"data_frame0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"datetime_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"datetime_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"default_aesthetics\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"default_aesthetics\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"default_expansion\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"default_expansion\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"default_transform\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"default_transform\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"defaults\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"defaults\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deg2rad\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"deg2rad\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"densitybin\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"densitybin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deparse2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"deparse2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deprecate_soft0\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"deprecate_soft0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deprecate_warn0\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"deprecate_warn0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deprecated_guide_args\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"deprecated_guide_args\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"derive\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"derive\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"detect_missing\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"detect_missing\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"detect_sf_type\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"detect_sf_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df_col\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"df_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df_rows\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"df_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df.grid\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"df.grid\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"discard_dots\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"discard_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"discrete_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"discrete_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dispatch_args\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dispatch_args\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dist_central_angle\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dist_central_angle\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dist_euclidean\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dist_euclidean\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dist_polar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dist_polar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dotstackGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dotstackGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"downto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"downto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_axis_labels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_axis_labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_abline\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_abline\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_blank\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_blank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_boxplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_boxplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_crossbar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_crossbar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_dotplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_dotplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_label\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_label\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_linerange\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_linerange\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_path\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_path\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_point\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_point\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_pointrange\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_pointrange\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_polygon\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_polygon\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_rect\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_rect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_smooth\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_smooth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_text\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_text\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_timeseries\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_timeseries\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_vline\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_vline\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"draw_key_vpath\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"draw_key_vpath\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"drawDetails.zeroGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"drawDetails.zeroGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dual_param\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dual_param\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dummy_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dummy_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dup_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"dup_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"el_def\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"el_def\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_blank\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_blank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_grob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_grob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_grob.element_blank\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_grob.element_blank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_grob.element_line\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_grob.element_line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_grob.element_rect\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_grob.element_rect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_grob.element_text\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_grob.element_text\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_line\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_rect\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_rect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_render\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_render\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"element_text\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"element_text\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"empty\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"empty\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ensure_nonempty_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ensure_nonempty_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_facet\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"eval_facet\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_facets\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"eval_facets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_limits\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expand_limits\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_limits_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expand_limits_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_limits_continuous_trans\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expand_limits_continuous_trans\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_limits_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expand_limits_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_limits_discrete_trans\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expand_limits_discrete_trans\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_limits_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expand_limits_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_range4\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expand_range4\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expand_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expansion\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"expansion\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract_target_is_likely_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"extract_target_is_likely_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"f_as_facets\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"f_as_facets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"f_as_facets_list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"f_as_facets_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"facet_grid\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"facet_grid\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"facet_null\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"facet_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"facet_wrap\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"facet_wrap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fetch_ggproto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fetch_ggproto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fill_alpha\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fill_alpha\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_args\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"find_args\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_global\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"find_global\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_line_formula\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"find_line_formula\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_names\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"find_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_origin\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"find_origin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_panel\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"find_panel\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"find_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_x_overlaps\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"find_x_overlaps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"firstUpper\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"firstUpper\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fit_data_to_bounds\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fit_data_to_bounds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flip_axis_labels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"flip_axis_labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flip_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"flip_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flip_data_text_angle\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"flip_data_text_angle\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flip_element_grob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"flip_element_grob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flip_text_angle\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"flip_text_angle\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flipped_names\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"flipped_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"font_descent\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"font_descent\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.ggproto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"format.ggproto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.ggproto_method\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"format.ggproto_method\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.cld\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.cld\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.confint.glht\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.confint.glht\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.data.frame\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.formula\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.formula\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.function\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.glht\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.glht\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.grouped_df\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.Line\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.Line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.Lines\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.Lines\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.lm\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.lm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.map\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.map\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.NULL\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.NULL\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.Polygon\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.Polygon\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.Polygons\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.Polygons\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.sfc\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.sfc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.sfg\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.sfg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.SpatialLinesDataFrame\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.SpatialLinesDataFrame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.SpatialPolygons\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.SpatialPolygons\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.SpatialPolygonsDataFrame\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.SpatialPolygonsDataFrame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.summary.glht\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.summary.glht\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.tbl\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.tbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fortify.tbl_df\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"fortify.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gam_method\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"gam_method\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"generate_alt_text\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"generate_alt_text\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_abline\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_abline\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_area\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_area\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_bar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_bar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_bin_2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_bin_2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_bin2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_bin2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_blank\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_blank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_boxplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_boxplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_col\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_column\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_column\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_contour\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_contour\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_contour_filled\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_contour_filled\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_count\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_crossbar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_crossbar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_curve\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_curve\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_density\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_density\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_density_2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_density_2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_density_2d_filled\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_density_2d_filled\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_density2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_density2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_density2d_filled\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_density2d_filled\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_dotplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_dotplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_errorbar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_errorbar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_errorbarh\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_errorbarh\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_freqpoly\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_freqpoly\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_function\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_hex\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_hex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_histogram\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_histogram\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_hline\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_hline\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_jitter\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_jitter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_label\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_label\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_line\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_linerange\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_linerange\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_map\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_map\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_path\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_path\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_point\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_point\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_pointrange\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_pointrange\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_polygon\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_polygon\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_qq\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_qq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_qq_line\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_qq_line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_quantile\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_quantile\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_raster\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_raster\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_rect\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_rect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_ribbon\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_ribbon\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_rug\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_rug\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_segment\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_segment\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_sf\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_sf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_sf_label\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_sf_label\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_sf_text\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_sf_text\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_smooth\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_smooth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_spoke\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_spoke\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_step\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_step\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_text\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_text\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_tile\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_tile\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_violin\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_violin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"geom_vline\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"geom_vline\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_alt_text\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"get_alt_text\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_alt_text.ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"get_alt_text.ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_alt_text.ggplot_built\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"get_alt_text.ggplot_built\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_alt_text.gtable\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"get_alt_text.gtable\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_element_tree\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"get_element_tree\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_guide_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"get_guide_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_key_size\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"get_key_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gg_dep\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"gg_dep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggname\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggname\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.by\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.Coord\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.Coord\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.data.frame\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.Facet\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.Facet\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.function\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.Guides\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.Guides\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.labels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.Layer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.Layer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.NULL\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.NULL\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.Scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.Scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.theme\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.theme\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_add.uneval\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_add.uneval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_build\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_build\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_build.ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_build.ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_gtable\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_gtable\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot_gtable.ggplot_built\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot_gtable.ggplot_built\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplot.function\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplot.function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggplotGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggplotGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggproto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggproto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggproto_formals\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggproto_formals\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggproto_parent\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggproto_parent\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggsave\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggsave\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ggtitle\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ggtitle\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grid_as_facets_list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grid_as_facets_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grid.draw.absoluteGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grid.draw.absoluteGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grid.draw.ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grid.draw.ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grobHeight.absoluteGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grobHeight.absoluteGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grobHeight.zeroGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grobHeight.zeroGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grobWidth.absoluteGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grobWidth.absoluteGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grobWidth.zeroGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grobWidth.zeroGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grobX.absoluteGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grobX.absoluteGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grobY.absoluteGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"grobY.absoluteGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_axis_logticks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_axis_logticks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_axis_stack\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_axis_stack\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_axis_theta\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_axis_theta\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_bins\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_bins\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_colorbar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_colorbar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_colorsteps\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_colorsteps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_colourbar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_colourbar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_coloursteps\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_coloursteps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_custom\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_custom\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_gengrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_gengrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_gengrob.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_gengrob.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_geom\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_geom\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_geom.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_geom.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_grid\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_grid\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_legend\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_legend\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_merge\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_merge\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_merge.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_merge.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_none\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_none\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_train\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_train\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_train.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_train.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_transform\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_transform\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guide_transform.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guide_transform.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guides\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guides\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guides_list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"guides_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_default_transform\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"has_default_transform\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_flipped_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"has_flipped_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_groups\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"has_groups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_name\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"has_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"height_cm\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"height_cm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"heightDetails.titleGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"heightDetails.titleGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"heightDetails.zeroGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"heightDetails.zeroGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hex_binwidth\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"hex_binwidth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hex_bounds\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"hex_bounds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hexBinSummarise\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"hexBinSummarise\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hexGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"hexGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"id\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"id\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"id_var\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"id_var\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"in_arc\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"in_arc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"include_layer_in_guide\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"include_layer_in_guide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"indent\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"indent\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"interleave\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"interleave\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"interleave.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"interleave.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"interleave.unit\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"interleave.unit\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"interp\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"interp\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_bang\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_bang\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_bins\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_bins\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_calculated\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_calculated\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_calculated_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_calculated_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_column_vec\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_column_vec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_complete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_complete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_dotted_var\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_dotted_var\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_facets\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_facets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_finite\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_finite\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_labeller\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_labeller\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_missing_arg\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_missing_arg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_npc\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_npc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_pattern\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_pattern\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_position_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_position_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_scalar_numeric\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_scalar_numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_scaled\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_scaled\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_scaled_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_scaled_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_sf\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_sf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_staged\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_staged\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_staged_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_staged_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_theme_complete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_theme_complete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_theme_validate\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_theme_validate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_triple_bang\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_triple_bang\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_unique\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is_unique\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.constant\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.constant\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.Coord\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.Coord\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.derived\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.derived\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.facet\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.facet\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.formula\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.formula\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.ggproto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.ggproto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.layer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.layer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.margin\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.margin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.rel\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.rel\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.sec_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.sec_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.subclass\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.subclass\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.theme\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.theme\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.waive\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.waive\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.zero\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"is.zero\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"iso_to_path\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"iso_to_path\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"iso_to_polygon\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"iso_to_polygon\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"isoband_z_matrix\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"isoband_z_matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"join_keys\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"join_keys\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"just_dir\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"just_dir\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"justify_grobs\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"justify_grobs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"keep_key_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"keep_key_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"keep_mid_true\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"keep_mid_true\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_both\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"label_both\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_bquote\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"label_bquote\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_context\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"label_context\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_parsed\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"label_parsed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_value\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"label_value\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_variable\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"label_variable\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_wrap_gen\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"label_wrap_gen\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"labelGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"labelGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"labeller\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"labeller\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"labs\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"labs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"last_plot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"last_plot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"layer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"layer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"layer_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"layer_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"layer_grob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"layer_grob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"layer_scales\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"layer_scales\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"layer_sf\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"layer_sf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"layout_null\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"layout_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"legend_position\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"legend_position\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"len0_null\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"len0_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"limits\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"limits\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"limits.character\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"limits.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"limits.Date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"limits.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"limits.factor\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"limits.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"limits.numeric\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"limits.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"limits.POSIXct\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"limits.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"limits.POSIXlt\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"limits.POSIXlt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lims\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"lims\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"link_book\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"link_book\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_labels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"make_labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_proto_method\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"make_proto_method\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"make_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_summary_fun\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"make_summary_fun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"makeContext.dotstackGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"makeContext.dotstackGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"manual_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"manual_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"map_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mapped_aesthetics\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mapped_aesthetics\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"margin\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"margin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mat_2_df\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mat_2_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"matched_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"matched_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"max_height\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"max_height\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"max_width\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"max_width\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mean_cl_boot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mean_cl_boot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mean_cl_normal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mean_cl_normal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mean_sdl\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mean_sdl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mean_se\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mean_se\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"measure_axes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"measure_axes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"measure_legend_keys\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"measure_legend_keys\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"median_hilow\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"median_hilow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"merge_element\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"merge_element\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"merge_element.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"merge_element.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"merge_element.element\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"merge_element.element\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"merge_element.element_blank\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"merge_element.element_blank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mid_rescaler\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mid_rescaler\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify_list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"modify_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modifyList\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"modifyList\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mproject\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"mproject\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"munch_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"munch_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"new_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_aesthetic\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"new_aesthetic\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_guide\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"new_guide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"new_mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"obj_type_friendly\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"obj_type_friendly\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"obj_type_oo\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"obj_type_oo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"object_summaries\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"object_summaries\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"old_guide\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"old_guide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"opposite_position\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"opposite_position\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"oxford_comma\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"oxford_comma\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pal_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pal_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pal_ordinal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pal_ordinal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pal_qualitative\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pal_qualitative\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"panel_cols\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"panel_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"panel_guides_grob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"panel_guides_grob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"panel_rows\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"panel_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_axes_labeling\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"parse_axes_labeling\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_binned_breaks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"parse_binned_breaks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_dpi\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"parse_dpi\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_safe\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"parse_safe\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pattern\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pattern\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pattern_alpha\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pattern_alpha\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pattern_alpha.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pattern_alpha.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pattern_alpha.GridPattern\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pattern_alpha.GridPattern\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pattern_alpha.GridTilingPattern\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pattern_alpha.GridTilingPattern\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pattern_alpha.list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pattern_alpha.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"plot_clone\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"plot_clone\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"plot_dev\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"plot_dev\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"plot_dim\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"plot_dim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"plot_extent\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"plot_extent\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"plot_theme\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"plot_theme\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"plot.ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"plot.ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"polar_bbox\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"polar_bbox\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pos_dodge\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pos_dodge\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pos_dodge2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pos_dodge2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pos_stack\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pos_stack\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_dodge\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_dodge\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_dodge2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_dodge2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_fill\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_fill\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_jitter\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_jitter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_jitterdodge\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_jitterdodge\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_margin\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_margin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_nudge\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_nudge\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"position_stack\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"position_stack\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"precompute_bw\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"precompute_bw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"predictdf\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"predictdf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"predictdf.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"predictdf.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"predictdf.glm\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"predictdf.glm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"predictdf.locfit\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"predictdf.locfit\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"predictdf.loess\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"predictdf.loess\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_isoband_levels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"pretty_isoband_levels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.element\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"print.element\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"print.ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.ggplot2_bins\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"print.ggplot2_bins\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.ggproto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"print.ggproto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.ggproto_method\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"print.ggproto_method\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.rel\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"print.rel\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.theme\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"print.theme\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.uneval\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"print.uneval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"qplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"qplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quant_pred\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"quant_pred\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quickplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"quickplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"r_rescale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"r_rescale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rad2deg\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rad2deg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"random_tip\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"random_tip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rd_aesthetics\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rd_aesthetics\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rd_aesthetics_item\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rd_aesthetics_item\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rd_computed_vars\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rd_computed_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rd_match_docpage\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rd_match_docpage\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rd_orientation\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rd_orientation\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"redistribute_null_units\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"redistribute_null_units\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reflect_density\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"reflect_density\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"register_theme_elements\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"register_theme_elements\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rel\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rel\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"release_questions\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"release_questions\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"remove_missing\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"remove_missing\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rename\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rename_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_data\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rename_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"render_axes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"render_axes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"render_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"render_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"render_strips\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"render_strips\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"repair_segment_arrow\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"repair_segment_arrow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"replace_null\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"replace_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rescale01\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rescale01\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reset_theme_settings\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"reset_theme_settings\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reshape_add_margins\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"reshape_add_margins\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reshape_margins\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"reshape_margins\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"resolution\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"resolution\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"resolve_guide\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"resolve_guide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"resolve_labeller\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"resolve_labeller\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"resolve_text_unit\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"resolve_text_unit\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"revalue\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"revalue\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rotate_just\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rotate_just\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rotate_r_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"rotate_r_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"round_any\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"round_any\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"safe_string\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"safe_string\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha_date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha_datetime\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_alpha_ordinal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_alpha_ordinal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_apply\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_apply\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_brewer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_brewer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_datetime\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_distiller\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_distiller\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_fermenter\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_fermenter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_gradient\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_gradient\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_gradient2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_gradient2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_gradientn\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_gradientn\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_grey\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_grey\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_hue\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_hue\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_ordinal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_ordinal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_steps\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_steps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_steps2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_steps2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_stepsn\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_stepsn\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_viridis_b\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_viridis_b\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_viridis_c\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_viridis_c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_color_viridis_d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_color_viridis_d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_brewer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_brewer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_datetime\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_distiller\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_distiller\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_fermenter\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_fermenter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_gradient\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_gradient\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_gradient2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_gradient2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_gradientn\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_gradientn\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_grey\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_grey\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_hue\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_hue\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_ordinal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_ordinal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_qualitative\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_qualitative\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_steps\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_steps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_steps2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_steps2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_stepsn\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_stepsn\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_viridis_b\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_viridis_b\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_viridis_c\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_viridis_c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_colour_viridis_d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_colour_viridis_d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_continuous_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_continuous_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_description\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_description\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_discrete_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_discrete_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_discrete_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_discrete_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_brewer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_brewer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_datetime\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_distiller\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_distiller\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_fermenter\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_fermenter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_gradient\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_gradient\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_gradient2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_gradient2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_gradientn\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_gradientn\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_grey\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_grey\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_hue\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_hue\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_ordinal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_ordinal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_qualitative\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_qualitative\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_steps\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_steps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_steps2\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_steps2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_stepsn\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_stepsn\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_viridis_b\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_viridis_b\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_viridis_c\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_viridis_c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_fill_viridis_d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_fill_viridis_d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_flip_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_flip_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_flip_position\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_flip_position\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linetype\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linetype\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linetype_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linetype_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linetype_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linetype_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linetype_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linetype_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linetype_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linetype_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linetype_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linetype_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth_date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth_datetime\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_linewidth_ordinal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_linewidth_ordinal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_override_call\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_override_call\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_radius\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_radius\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_shape\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_shape\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_shape_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_shape_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_shape_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_shape_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_shape_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_shape_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_shape_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_shape_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_shape_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_shape_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_shape_ordinal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_shape_ordinal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_area\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_area\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_binned_area\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_binned_area\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_datetime\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_manual\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_manual\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_size_ordinal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_size_ordinal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.character\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.Date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.double\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.double\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.factor\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.hms\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.hms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.integer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.integer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.logical\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.numeric\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.ordered\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.ordered\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.POSIXt\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.POSIXt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_type.sfc\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_type.sfc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_datetime\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_log10\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_log10\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_reverse\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_reverse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_sqrt\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_sqrt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_x_time\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_x_time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_binned\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_binned\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_continuous\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_continuous\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_date\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_datetime\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_log10\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_log10\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_reverse\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_reverse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_sqrt\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_sqrt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scale_y_time\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scale_y_time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scales_list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"scales_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sec_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"sec_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seq_asc\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"seq_asc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_draw_key\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"set_draw_key\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_key_size\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"set_key_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_last_plot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"set_last_plot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_sec_axis\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"set_sec_axis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sf_grob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"sf_grob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sf_rescale01\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"sf_rescale01\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sf_transform_xy\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"sf_transform_xy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"should_stop\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"should_stop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"simplify\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"simplify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"simplify_formula\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"simplify_formula\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"single_value\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"single_value\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"single_value.default\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"single_value.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"single_value.factor\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"single_value.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"snake_class\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"snake_class\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"snakeize\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"snakeize\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spiral_arc_length\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"spiral_arc_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"split_matrix\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"split_matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"split_with_index\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"split_with_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stack_var\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stack_var\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stage\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stage\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stage_calculated\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stage_calculated\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stage_scaled\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stage_scaled\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stairstep\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stairstep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_aes_names\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"standardise_aes_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_aes_symbols\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"standardise_aes_symbols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_align\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_align\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_bin\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_bin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_bin_2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_bin_2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_bin_hex\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_bin_hex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_bin2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_bin2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_binhex\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_binhex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_boxplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_boxplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_contour\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_contour\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_contour_filled\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_contour_filled\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_count\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_density\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_density\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_density_2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_density_2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_density_2d_filled\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_density_2d_filled\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_density2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_density2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_density2d_filled\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_density2d_filled\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_ecdf\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_ecdf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_ellipse\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_ellipse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_function\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_identity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_identity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_qq\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_qq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_qq_line\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_qq_line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_quantile\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_quantile\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_sf\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_sf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_sf_coordinates\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_sf_coordinates\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_smooth\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_smooth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_spoke\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_spoke\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_sum\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_sum\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_summary\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_summary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_summary_2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_summary_2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_summary_bin\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_summary_bin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_summary_hex\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_summary_hex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_summary2d\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_summary2d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_unique\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_unique\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stat_ydensity\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stat_ydensity\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_input_type\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"stop_input_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"strip_dots\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"strip_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"strip_stage\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"strip_stage\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"substitute_aes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"substitute_aes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_by_x\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"summarise_by_x\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_coord\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"summarise_coord\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_layers\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"summarise_layers\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_layout\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"summarise_layout\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summary.ggplot\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"summary.ggplot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"switch_orientation\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"switch_orientation\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"table_add_legends\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"table_add_legends\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"table_add_tag\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"table_add_tag\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tapply_df\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"tapply_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_all_null\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_all_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_bw\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_bw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_classic\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_classic\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_dark\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_dark\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_get\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_get\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_gray\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_gray\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_grey\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_grey\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_light\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_light\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_linedraw\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_linedraw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_minimal\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_minimal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_replace\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_replace\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_set\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_set\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_test\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_test\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_update\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_update\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theme_void\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theme_void\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theta_grid\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theta_grid\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theta_rescale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theta_rescale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theta_rescale_no_clip\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theta_rescale_no_clip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"theta_tickmarks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"theta_tickmarks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"titleGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"titleGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"to_lower_ascii\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"to_lower_ascii\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"to_upper_ascii\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"to_upper_ascii\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tolower\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"tolower\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"toupper\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"toupper\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"trans_support_nbreaks\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"trans_support_nbreaks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transform_position\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"transform_position\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transform_value\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"transform_value\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"translate_shape_string\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"translate_shape_string\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"trim\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"trim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ulevels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ulevels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unique_combs\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"unique_combs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unique0\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"unique0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"uniquecols\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"uniquecols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unitType\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"unitType\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unrowname\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"unrowname\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update_geom_defaults\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"update_geom_defaults\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update_guides\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"update_guides\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update_labels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"update_labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update_stat_defaults\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"update_stat_defaults\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"upto\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"upto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_as_data_frame\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"validate_as_data_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_column_vec\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"validate_column_vec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_element\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"validate_element\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_facets\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"validate_facets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_guide\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"validate_guide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_labels\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"validate_labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_mapping\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"validate_mapping\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_theme\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"validate_theme\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vars\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.character.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.character.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.double.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.double.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.factor.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.factor.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.integer.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.integer.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.mapped_discrete.double\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.mapped_discrete.double\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.mapped_discrete.factor\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.mapped_discrete.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.mapped_discrete.integer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.mapped_discrete.integer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.mapped_discrete.logical\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.mapped_discrete.logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.mapped_discrete.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_cast.mapped_discrete.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.character.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.character.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.double.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.double.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.factor.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.factor.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.integer.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.integer.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.mapped_discrete.character\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.mapped_discrete.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.mapped_discrete.double\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.mapped_discrete.double\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.mapped_discrete.factor\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.mapped_discrete.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.mapped_discrete.integer\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.mapped_discrete.integer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.mapped_discrete.mapped_discrete\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_ptype2.mapped_discrete.mapped_discrete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_rbind0\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_rbind0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_type_friendly\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"vec_type_friendly\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"version_unavailable\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"version_unavailable\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"view_scale_empty\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"view_scale_empty\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"view_scale_primary\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"view_scale_primary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"view_scale_secondary\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"view_scale_secondary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"view_scales_from_graticule\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"view_scales_from_graticule\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"view_scales_from_scale\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"view_scales_from_scale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"view_scales_from_scale_with_coord_trans\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"view_scales_from_scale_with_coord_trans\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"view_scales_polar\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"view_scales_polar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"viewport\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"viewport\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"waiver\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"waiver\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_for_aes_extract_usage\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"warn_for_aes_extract_usage\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_for_aes_extract_usage_expr\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"warn_for_aes_extract_usage_expr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_new_infinites\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"warn_new_infinites\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"weave_axes\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"weave_axes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"weave_tables_col\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"weave_tables_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"weave_tables_row\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"weave_tables_row\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"width_cm\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"width_cm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"widthDetails.titleGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"widthDetails.titleGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"widthDetails.zeroGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"widthDetails.zeroGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_ordered_restart\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"with_ordered_restart\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_seed_null\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"with_seed_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wrap_as_facets_list\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"wrap_as_facets_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wrap_dims\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"wrap_dims\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wrap_hmisc\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"wrap_hmisc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"xlab\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"xlab\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"xlim\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"xlim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"xyz_to_isobands\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"xyz_to_isobands\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"xyz_to_isolines\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"xyz_to_isolines\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ylab\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ylab\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ylim\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"ylim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"zeroGrob\",\n    \"meta\": \"ggplot2\",\n    \"value\": \"zeroGrob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.fun_list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"[.fun_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"[.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"[.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[[<-.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"[[<-.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[<-.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"[<-.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[<-.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"[<-.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"$<-.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"$<-.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"accumulate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"accumulate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"accumulate_right\",\n    \"meta\": \"dplyr\",\n    \"value\": \"accumulate_right\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"across\",\n    \"meta\": \"dplyr\",\n    \"value\": \"across\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"across_glue_mask\",\n    \"meta\": \"dplyr\",\n    \"value\": \"across_glue_mask\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"across_missing_cols_deprecate_warn\",\n    \"meta\": \"dplyr\",\n    \"value\": \"across_missing_cols_deprecate_warn\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"across_setup\",\n    \"meta\": \"dplyr\",\n    \"value\": \"across_setup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_computed_columns\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_computed_columns\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_count\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_count_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_count_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_count_impl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_count_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_count.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_count.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_count.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_count.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_rownames\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_rownames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_suffixes\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_suffixes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_tally\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_tally\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_tally_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"add_tally_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"all_equal\",\n    \"meta\": \"dplyr\",\n    \"value\": \"all_equal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"all_exprs\",\n    \"meta\": \"dplyr\",\n    \"value\": \"all_exprs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"all_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"all_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"anti_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"anti_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"anti_join.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"anti_join.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"any_exprs\",\n    \"meta\": \"dplyr\",\n    \"value\": \"any_exprs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"any_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"any_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"append_pos\",\n    \"meta\": \"dplyr\",\n    \"value\": \"append_pos\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"apply_filter_syms\",\n    \"meta\": \"dplyr\",\n    \"value\": \"apply_filter_syms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"apply_unpack_spec\",\n    \"meta\": \"dplyr\",\n    \"value\": \"apply_unpack_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange_.tbl_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange_.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange_rows\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"arrange.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"arrange.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_across_fn_call\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_across_fn_call\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_fun\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_fun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_fun_list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_fun_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_group_map_function\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_group_map_function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_inlined_function\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_inlined_function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_join_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_join_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_join_by.character\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_join_by.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_join_by.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_join_by.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_join_by.dplyr_join_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_join_by.dplyr_join_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_join_by.list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_join_by.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_pick_expansion\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_pick_expansion\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_pick_selection\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_pick_selection\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_tibble.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as_tibble.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.frame.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as.data.frame.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.tbl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as.tbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.tbl.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as.tbl.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.tbl.tbl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"as.tbl.tbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"auto_by_msg\",\n    \"meta\": \"dplyr\",\n    \"value\": \"auto_by_msg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"auto_copy\",\n    \"meta\": \"dplyr\",\n    \"value\": \"auto_copy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"auto_copy.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"auto_copy.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"auto_name_formulas\",\n    \"meta\": \"dplyr\",\n    \"value\": \"auto_name_formulas\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bench_tbls\",\n    \"meta\": \"dplyr\",\n    \"value\": \"bench_tbls\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"between\",\n    \"meta\": \"dplyr\",\n    \"value\": \"between\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"big_mark\",\n    \"meta\": \"dplyr\",\n    \"value\": \"big_mark\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bind_cols\",\n    \"meta\": \"dplyr\",\n    \"value\": \"bind_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bind_rows\",\n    \"meta\": \"dplyr\",\n    \"value\": \"bind_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_between\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_between\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_binary\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_binary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_closest\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_closest\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_dollar\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_dollar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_equality\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_equality\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_greater_than\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_greater_than\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_greater_than_or_equal\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_greater_than_or_equal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_less_than\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_less_than\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_less_than_or_equal\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_less_than_or_equal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_overlaps\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_overlaps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binding_join_by_within\",\n    \"meta\": \"dplyr\",\n    \"value\": \"binding_join_by_within\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bullets\",\n    \"meta\": \"dplyr\",\n    \"value\": \"bullets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c_across\",\n    \"meta\": \"dplyr\",\n    \"value\": \"c_across\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c_across_missing_cols_deprecate_warn\",\n    \"meta\": \"dplyr\",\n    \"value\": \"c_across_missing_cols_deprecate_warn\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c_across_setup\",\n    \"meta\": \"dplyr\",\n    \"value\": \"c_across_setup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"case_formula_evaluate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"case_formula_evaluate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"case_match\",\n    \"meta\": \"dplyr\",\n    \"value\": \"case_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"case_when\",\n    \"meta\": \"dplyr\",\n    \"value\": \"case_when\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cat_line\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cat_line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cbind.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cbind.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"changes\",\n    \"meta\": \"dplyr\",\n    \"value\": \"changes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_bounds\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_bounds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_by_typo\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_by_typo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_by_typo_impl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_by_typo_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_class\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_class\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_compatible\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_compatible\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_constant\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_constant\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_dbplyr\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_dbplyr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_dot_by_typo\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_dot_by_typo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_dot_cols\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_dot_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_duplicate_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_duplicate_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_filter\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_filter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_frac\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_frac\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_grouped\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_grouped\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_join_by_dots_empty\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_join_by_dots_empty\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_join_relationship\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_join_relationship\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_join_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_join_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_keep\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_keep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_length\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_length_val\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_length_val\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_missing_arg\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_missing_arg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_muffled_warning\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_muffled_warning\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_n_name\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_n_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_na_matches\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_na_matches\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_nth_default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_nth_default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_size\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_slice_n_prop\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_slice_n_prop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_slice_unnamed_n_prop\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_slice_unnamed_n_prop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_transmute_args\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_transmute_args\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_type\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_unmatched\",\n    \"meta\": \"dplyr\",\n    \"value\": \"check_unmatched\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"clamp\",\n    \"meta\": \"dplyr\",\n    \"value\": \"clamp\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cli_collapse\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cli_collapse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cnd_bullet_combine_details\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cnd_bullet_combine_details\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cnd_bullet_cur_group_label\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cnd_bullet_cur_group_label\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cnd_bullet_header\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cnd_bullet_header\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cnd_bullet_rowwise_unlist\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cnd_bullet_rowwise_unlist\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cnd_data\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cnd_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cnd_message_lines\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cnd_message_lines\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coalesce\",\n    \"meta\": \"dplyr\",\n    \"value\": \"coalesce\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collapse\",\n    \"meta\": \"dplyr\",\n    \"value\": \"collapse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collapse.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"collapse.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collect\",\n    \"meta\": \"dplyr\",\n    \"value\": \"collect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collect.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"collect.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"combine\",\n    \"meta\": \"dplyr\",\n    \"value\": \"combine\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"commas\",\n    \"meta\": \"dplyr\",\n    \"value\": \"commas\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"common_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"common_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"common_by_from_vector\",\n    \"meta\": \"dplyr\",\n    \"value\": \"common_by_from_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"common_by.character\",\n    \"meta\": \"dplyr\",\n    \"value\": \"common_by.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"common_by.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"common_by.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"common_by.list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"common_by.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"common_by.NULL\",\n    \"meta\": \"dplyr\",\n    \"value\": \"common_by.NULL\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"common_handler\",\n    \"meta\": \"dplyr\",\n    \"value\": \"common_handler\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compact_null\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compact_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compare_tbls\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compare_tbls\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compare_tbls2\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compare_tbls2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compat_as_lazy\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compat_as_lazy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compat_as_lazy_dots\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compat_as_lazy_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compat_lazy\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compat_lazy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compat_lazy_dots\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compat_lazy_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compute\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compute_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute_by_groups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compute_by_groups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute_groups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compute_groups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute_join_relationship\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compute_join_relationship\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"compute.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"consecutive_id\",\n    \"meta\": \"dplyr\",\n    \"value\": \"consecutive_id\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"context_local\",\n    \"meta\": \"dplyr\",\n    \"value\": \"context_local\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"context_peek\",\n    \"meta\": \"dplyr\",\n    \"value\": \"context_peek\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"context_peek_bare\",\n    \"meta\": \"dplyr\",\n    \"value\": \"context_peek_bare\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"context_poke\",\n    \"meta\": \"dplyr\",\n    \"value\": \"context_poke\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"copy_to\",\n    \"meta\": \"dplyr\",\n    \"value\": \"copy_to\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"copy_to.DBIConnection\",\n    \"meta\": \"dplyr\",\n    \"value\": \"copy_to.DBIConnection\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"copy_to.src_local\",\n    \"meta\": \"dplyr\",\n    \"value\": \"copy_to.src_local\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"count_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"count_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"count_regroups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"count_regroups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"count.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"count.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cross_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cross_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cross_join.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cross_join.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ctxt_error_label\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ctxt_error_label\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ctxt_error_label_named\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ctxt_error_label_named\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cumall\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cumall\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cumany\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cumany\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cume_dist\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cume_dist\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cummean\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cummean\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cur_column\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cur_column\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cur_data\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cur_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cur_data_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cur_data_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cur_group\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cur_group\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cur_group_data\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cur_group_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cur_group_id\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cur_group_id\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cur_group_label\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cur_group_label\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cur_group_rows\",\n    \"meta\": \"dplyr\",\n    \"value\": \"cur_group_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"current_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"current_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"data_mask_top\",\n    \"meta\": \"dplyr\",\n    \"value\": \"data_mask_top\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dataframe_ish\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dataframe_ish\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_analyze\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_analyze\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_begin\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_begin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_commit\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_commit\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_create_index\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_create_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_create_indexes\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_create_indexes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_create_table\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_create_table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_data_type\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_data_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_desc\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_desc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_drop_table\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_drop_table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_explain\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_explain\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_has_table\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_has_table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_insert_into\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_insert_into\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_list_tables\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_list_tables\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_query_fields\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_query_fields\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_query_rows\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_query_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_rollback\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_rollback\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_save_query\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_save_query\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"db_write_table\",\n    \"meta\": \"dplyr\",\n    \"value\": \"db_write_table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dense_rank\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dense_rank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deparse_trunc\",\n    \"meta\": \"dplyr\",\n    \"value\": \"deparse_trunc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"desc\",\n    \"meta\": \"dplyr\",\n    \"value\": \"desc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"describe_repair\",\n    \"meta\": \"dplyr\",\n    \"value\": \"describe_repair\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"detect\",\n    \"meta\": \"dplyr\",\n    \"value\": \"detect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"detect_index\",\n    \"meta\": \"dplyr\",\n    \"value\": \"detect_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df_unpack\",\n    \"meta\": \"dplyr\",\n    \"value\": \"df_unpack\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dim_desc\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dim_desc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"discard\",\n    \"meta\": \"dplyr\",\n    \"value\": \"discard\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct_.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct_.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct_.tbl_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct_.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct_prepare\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct_prepare\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"distinct.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"distinct.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do_.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do_.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do_.NULL\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do_.NULL\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do_.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do_.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do.NULL\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do.NULL\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"do.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"do.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_chop\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_chop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_col_modify\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_col_modify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_col_modify.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_col_modify.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_col_modify.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_col_modify.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_col_modify.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_col_modify.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_col_select\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_col_select\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_error_call\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_error_call\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_error_handler\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_error_handler\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_internal_error\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_internal_error\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_internal_signal\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_internal_signal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_legacy_locale\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_legacy_locale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_local_error_call\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_local_error_call\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_local_slice_by_arg\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_local_slice_by_arg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_locate_matches\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_locate_matches\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_locate_sorted_groups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_locate_sorted_groups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_new_data_frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_new_data_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_new_list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_new_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_new_tibble\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_new_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_order_legacy\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_order_legacy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_pick_tibble\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_pick_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_proxy_order_legacy\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_proxy_order_legacy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_quosure_name\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_quosure_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_quosures\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_quosures\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_reconstruct\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_reconstruct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_reconstruct_dispatch\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_reconstruct_dispatch\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_reconstruct.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_reconstruct.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_reconstruct.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_reconstruct.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_reconstruct.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_reconstruct.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_row_slice\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_row_slice\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_row_slice.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_row_slice.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_row_slice.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_row_slice.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_row_slice.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_row_slice.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_vec_cast_common\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_vec_cast_common\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_vec_ptype_common\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_vec_ptype_common\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dplyr_warning_handler\",\n    \"meta\": \"dplyr\",\n    \"value\": \"dplyr_warning_handler\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ensure_group_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ensure_group_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"env_bind_do_pronouns\",\n    \"meta\": \"dplyr\",\n    \"value\": \"env_bind_do_pronouns\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"env_inherits_global\",\n    \"meta\": \"dplyr\",\n    \"value\": \"env_inherits_global\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"equal_data_frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"equal_data_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"err_expr\",\n    \"meta\": \"dplyr\",\n    \"value\": \"err_expr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"err_locs\",\n    \"meta\": \"dplyr\",\n    \"value\": \"err_locs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"err_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"err_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"error_call\",\n    \"meta\": \"dplyr\",\n    \"value\": \"error_call\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"error_label\",\n    \"meta\": \"dplyr\",\n    \"value\": \"error_label\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"error_label_named\",\n    \"meta\": \"dplyr\",\n    \"value\": \"error_label_named\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"error_name_length_required\",\n    \"meta\": \"dplyr\",\n    \"value\": \"error_name_length_required\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_join_by_between\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_join_by_between\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_join_by_binary\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_join_by_binary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_join_by_closest\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_join_by_closest\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_join_by_dollar\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_join_by_dollar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_join_by_overlaps\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_join_by_overlaps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_join_by_within\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_join_by_within\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_pick\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_pick\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_relocate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_relocate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_select_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_select_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_tbls\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_tbls\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_tbls2\",\n    \"meta\": \"dplyr\",\n    \"value\": \"eval_tbls2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"every\",\n    \"meta\": \"dplyr\",\n    \"value\": \"every\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_across\",\n    \"meta\": \"dplyr\",\n    \"value\": \"expand_across\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_groups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"expand_groups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_if_across\",\n    \"meta\": \"dplyr\",\n    \"value\": \"expand_if_across\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_pick\",\n    \"meta\": \"dplyr\",\n    \"value\": \"expand_pick\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_pick_call\",\n    \"meta\": \"dplyr\",\n    \"value\": \"expand_pick_call\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_pick_quo\",\n    \"meta\": \"dplyr\",\n    \"value\": \"expand_pick_quo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"explain\",\n    \"meta\": \"dplyr\",\n    \"value\": \"explain\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expr_substitute\",\n    \"meta\": \"dplyr\",\n    \"value\": \"expr_substitute\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"failwith\",\n    \"meta\": \"dplyr\",\n    \"value\": \"failwith\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_.tbl_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_bullets\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_bullets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_bullets.dplyr:::filter_incompatible_size\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_bullets.dplyr:::filter_incompatible_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_bullets.dplyr:::filter_incompatible_type\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_bullets.dplyr:::filter_incompatible_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_eval\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_eval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_expand\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_expand\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter_rows\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"filter.ts\",\n    \"meta\": \"dplyr\",\n    \"value\": \"filter.ts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"finalise_equi_join_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"finalise_equi_join_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_template\",\n    \"meta\": \"dplyr\",\n    \"value\": \"find_template\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_var\",\n    \"meta\": \"dplyr\",\n    \"value\": \"find_var\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"first\",\n    \"meta\": \"dplyr\",\n    \"value\": \"first\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flat_map_chr\",\n    \"meta\": \"dplyr\",\n    \"value\": \"flat_map_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fmt_check_length_val\",\n    \"meta\": \"dplyr\",\n    \"value\": \"fmt_check_length_val\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fmt_classes\",\n    \"meta\": \"dplyr\",\n    \"value\": \"fmt_classes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fmt_cols\",\n    \"meta\": \"dplyr\",\n    \"value\": \"fmt_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fmt_comma\",\n    \"meta\": \"dplyr\",\n    \"value\": \"fmt_comma\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fmt_obj\",\n    \"meta\": \"dplyr\",\n    \"value\": \"fmt_obj\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fmt_obj1\",\n    \"meta\": \"dplyr\",\n    \"value\": \"fmt_obj1\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fmt_pos_args\",\n    \"meta\": \"dplyr\",\n    \"value\": \"fmt_pos_args\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.src_local\",\n    \"meta\": \"dplyr\",\n    \"value\": \"format.src_local\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"from_testthat\",\n    \"meta\": \"dplyr\",\n    \"value\": \"from_testthat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"full_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"full_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"full_join.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"full_join.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fun_env\",\n    \"meta\": \"dplyr\",\n    \"value\": \"fun_env\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"funs\",\n    \"meta\": \"dplyr\",\n    \"value\": \"funs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"funs_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"funs_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_slice_size\",\n    \"meta\": \"dplyr\",\n    \"value\": \"get_slice_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_drop_default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_drop_default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_drop_default.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_drop_default.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_drop_default.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_drop_default.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by_prepare\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by_prepare\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_by.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_by.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_cols\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_cols_legacy\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_cols_legacy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_data\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_data_trim\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_data_trim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_data.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_data.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_data.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_data.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_data.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_data.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_data.tbl_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_data.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_indices\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_indices\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_indices_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_indices_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_indices_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_indices_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_indices_.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_indices_.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_indices_.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_indices_.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_indices.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_indices.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_intersect\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_intersect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_keys\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_keys\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_keys.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_keys.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_keys0\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_keys0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_labels_details\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_labels_details\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_map\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_map\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_map.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_map.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_modify\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_modify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_modify.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_modify.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_modify.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_modify.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_nest\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_nest\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_nest_impl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_nest_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_nest.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_nest.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_nest.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_nest.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_rows\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_size\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_size.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_size.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_split\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_split\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_split_impl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_split_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_split.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_split.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_split.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_split.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_split.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_split.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_sum\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_sum\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_trim\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_trim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_trim.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_trim.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_trim.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_trim.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_vars.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_vars.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_walk\",\n    \"meta\": \"dplyr\",\n    \"value\": \"group_walk\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"groups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"groups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"groups.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"groups.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_active_group_context\",\n    \"meta\": \"dplyr\",\n    \"value\": \"has_active_group_context\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_minimum_stringi\",\n    \"meta\": \"dplyr\",\n    \"value\": \"has_minimum_stringi\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"help_topic\",\n    \"meta\": \"dplyr\",\n    \"value\": \"help_topic\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ident\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ident\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"if_across\",\n    \"meta\": \"dplyr\",\n    \"value\": \"if_across\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"if_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"if_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"if_any\",\n    \"meta\": \"dplyr\",\n    \"value\": \"if_any\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"if_else\",\n    \"meta\": \"dplyr\",\n    \"value\": \"if_else\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imap\",\n    \"meta\": \"dplyr\",\n    \"value\": \"imap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"import_from\",\n    \"meta\": \"dplyr\",\n    \"value\": \"import_from\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"import_vctrs\",\n    \"meta\": \"dplyr\",\n    \"value\": \"import_vctrs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"inner_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"inner_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"inner_join.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"inner_join.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"intersect.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"intersect.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_compatible\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_compatible\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_cross_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_cross_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_data_pronoun\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_data_pronoun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_direct\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_direct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_fun_list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_fun_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_inlinable_formula\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_inlinable_formula\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_inlinable_function\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_inlinable_function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_inlinable_lambda\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_inlinable_lambda\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_sel_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_sel_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_slice_call\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_slice_call\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_symbol_or_string\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_symbol_or_string\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_syntactic\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is_syntactic\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.src\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is.src\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.tbl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"is.tbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"join_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"join_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"join_by_common\",\n    \"meta\": \"dplyr\",\n    \"value\": \"join_by_common\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"join_cast_common\",\n    \"meta\": \"dplyr\",\n    \"value\": \"join_cast_common\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"join_cols\",\n    \"meta\": \"dplyr\",\n    \"value\": \"join_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"join_filter\",\n    \"meta\": \"dplyr\",\n    \"value\": \"join_filter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"join_mutate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"join_mutate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"join_rows\",\n    \"meta\": \"dplyr\",\n    \"value\": \"join_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"keep\",\n    \"meta\": \"dplyr\",\n    \"value\": \"keep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_output_dataframe\",\n    \"meta\": \"dplyr\",\n    \"value\": \"label_output_dataframe\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"label_output_list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"label_output_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lag\",\n    \"meta\": \"dplyr\",\n    \"value\": \"lag\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"last\",\n    \"meta\": \"dplyr\",\n    \"value\": \"last\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"last_dplyr_warnings\",\n    \"meta\": \"dplyr\",\n    \"value\": \"last_dplyr_warnings\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lazy_deprec\",\n    \"meta\": \"dplyr\",\n    \"value\": \"lazy_deprec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lead\",\n    \"meta\": \"dplyr\",\n    \"value\": \"lead\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"left_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"left_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"left_join.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"left_join.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_flatten\",\n    \"meta\": \"dplyr\",\n    \"value\": \"list_flatten\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"local_column\",\n    \"meta\": \"dplyr\",\n    \"value\": \"local_column\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"local_error_context\",\n    \"meta\": \"dplyr\",\n    \"value\": \"local_error_context\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"local_mask\",\n    \"meta\": \"dplyr\",\n    \"value\": \"local_mask\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"locale_to_chr_proxy_collate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"locale_to_chr_proxy_collate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"location\",\n    \"meta\": \"dplyr\",\n    \"value\": \"location\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_syntactic\",\n    \"meta\": \"dplyr\",\n    \"value\": \"make_syntactic\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_tbl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"make_tbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"manip_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"manip_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"manip_apply_syms\",\n    \"meta\": \"dplyr\",\n    \"value\": \"manip_apply_syms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"manip_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"manip_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"manip_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"manip_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_chr\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_dbl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map_dbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_int\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_lgl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map_lgl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_chr\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map2_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_dbl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map2_dbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_int\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map2_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_lgl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"map2_lgl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mask_type\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mask_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"maybe_restart\",\n    \"meta\": \"dplyr\",\n    \"value\": \"maybe_restart\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"methods_generic\",\n    \"meta\": \"dplyr\",\n    \"value\": \"methods_generic\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"methods_rd\",\n    \"meta\": \"dplyr\",\n    \"value\": \"methods_rd\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"min_rank\",\n    \"meta\": \"dplyr\",\n    \"value\": \"min_rank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"minimal_names\",\n    \"meta\": \"dplyr\",\n    \"value\": \"minimal_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_.tbl_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_bullets\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_bullets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_bullets.dplyr:::error_incompatible_combine\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_bullets.dplyr:::error_incompatible_combine\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_bullets.dplyr:::mutate_constant_recycle_error\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_bullets.dplyr:::mutate_constant_recycle_error\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_bullets.dplyr:::mutate_incompatible_size\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_bullets.dplyr:::mutate_incompatible_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_bullets.dplyr:::mutate_mixed_null\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_bullets.dplyr:::mutate_mixed_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_bullets.dplyr:::mutate_not_vector\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_bullets.dplyr:::mutate_not_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_col\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_cols\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_each\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_each\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_each_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_each_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_each_impl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_each_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_keep\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_keep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate_relocate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate_relocate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mutate.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"mutate.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"n\",\n    \"meta\": \"dplyr\",\n    \"value\": \"n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"n_distinct\",\n    \"meta\": \"dplyr\",\n    \"value\": \"n_distinct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"n_groups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"n_groups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"n_groups.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"n_groups.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"n_name\",\n    \"meta\": \"dplyr\",\n    \"value\": \"n_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"na_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"na_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"named_args\",\n    \"meta\": \"dplyr\",\n    \"value\": \"named_args\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"names_as_error_names\",\n    \"meta\": \"dplyr\",\n    \"value\": \"names_as_error_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"names<-.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"names<-.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"names<-.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"names<-.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"near\",\n    \"meta\": \"dplyr\",\n    \"value\": \"near\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"negate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"negate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"nest_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_by.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"nest_by.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_by.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"nest_by.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"nest_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_join.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"nest_join.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_dplyr_quosure\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_dplyr_quosure\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_dplyr_warning\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_dplyr_warning\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_error_context\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_error_context\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_expanded_quosures\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_expanded_quosures\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_funs\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_funs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_join_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_join_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_sel_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"new_sel_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"node_walk_replace\",\n    \"meta\": \"dplyr\",\n    \"value\": \"node_walk_replace\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"now\",\n    \"meta\": \"dplyr\",\n    \"value\": \"now\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ntext\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ntext\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nth\",\n    \"meta\": \"dplyr\",\n    \"value\": \"nth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ntile\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ntile\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"or_1\",\n    \"meta\": \"dplyr\",\n    \"value\": \"or_1\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"order_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"order_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_join_by_between\",\n    \"meta\": \"dplyr\",\n    \"value\": \"parse_join_by_between\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_join_by_binary\",\n    \"meta\": \"dplyr\",\n    \"value\": \"parse_join_by_binary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_join_by_closest\",\n    \"meta\": \"dplyr\",\n    \"value\": \"parse_join_by_closest\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_join_by_dollar\",\n    \"meta\": \"dplyr\",\n    \"value\": \"parse_join_by_dollar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_join_by_expr\",\n    \"meta\": \"dplyr\",\n    \"value\": \"parse_join_by_expr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_join_by_name\",\n    \"meta\": \"dplyr\",\n    \"value\": \"parse_join_by_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_join_by_overlaps\",\n    \"meta\": \"dplyr\",\n    \"value\": \"parse_join_by_overlaps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_join_by_within\",\n    \"meta\": \"dplyr\",\n    \"value\": \"parse_join_by_within\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"paste_line\",\n    \"meta\": \"dplyr\",\n    \"value\": \"paste_line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"peek_column\",\n    \"meta\": \"dplyr\",\n    \"value\": \"peek_column\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"peek_error_context\",\n    \"meta\": \"dplyr\",\n    \"value\": \"peek_error_context\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"peek_mask\",\n    \"meta\": \"dplyr\",\n    \"value\": \"peek_mask\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"percent_rank\",\n    \"meta\": \"dplyr\",\n    \"value\": \"percent_rank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pick\",\n    \"meta\": \"dplyr\",\n    \"value\": \"pick\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap\",\n    \"meta\": \"dplyr\",\n    \"value\": \"pmap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"poke_error_context\",\n    \"meta\": \"dplyr\",\n    \"value\": \"poke_error_context\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.all_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"print.all_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.any_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"print.any_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.dplyr_join_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"print.dplyr_join_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.dplyr_sel_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"print.dplyr_sel_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.fun_list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"print.fun_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.last_dplyr_warnings\",\n    \"meta\": \"dplyr\",\n    \"value\": \"print.last_dplyr_warnings\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.src\",\n    \"meta\": \"dplyr\",\n    \"value\": \"print.src\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"progress_estimated\",\n    \"meta\": \"dplyr\",\n    \"value\": \"progress_estimated\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pull\",\n    \"meta\": \"dplyr\",\n    \"value\": \"pull\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pull.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"pull.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"push_dplyr_warnings\",\n    \"meta\": \"dplyr\",\n    \"value\": \"push_dplyr_warnings\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_as_function\",\n    \"meta\": \"dplyr\",\n    \"value\": \"quo_as_function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_as_label\",\n    \"meta\": \"dplyr\",\n    \"value\": \"quo_as_label\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_eval_fns\",\n    \"meta\": \"dplyr\",\n    \"value\": \"quo_eval_fns\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_is_variable_reference\",\n    \"meta\": \"dplyr\",\n    \"value\": \"quo_is_variable_reference\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_reduce\",\n    \"meta\": \"dplyr\",\n    \"value\": \"quo_reduce\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_set_env_to_data_mask_top\",\n    \"meta\": \"dplyr\",\n    \"value\": \"quo_set_env_to_data_mask_top\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"random_table_name\",\n    \"meta\": \"dplyr\",\n    \"value\": \"random_table_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rbind.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rbind.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"re_match\",\n    \"meta\": \"dplyr\",\n    \"value\": \"re_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recode\",\n    \"meta\": \"dplyr\",\n    \"value\": \"recode\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recode_default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"recode_default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recode_default.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"recode_default.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recode_default.factor\",\n    \"meta\": \"dplyr\",\n    \"value\": \"recode_default.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recode_factor\",\n    \"meta\": \"dplyr\",\n    \"value\": \"recode_factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recode.character\",\n    \"meta\": \"dplyr\",\n    \"value\": \"recode.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recode.factor\",\n    \"meta\": \"dplyr\",\n    \"value\": \"recode.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recode.numeric\",\n    \"meta\": \"dplyr\",\n    \"value\": \"recode.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce\",\n    \"meta\": \"dplyr\",\n    \"value\": \"reduce\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce_right\",\n    \"meta\": \"dplyr\",\n    \"value\": \"reduce_right\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reframe\",\n    \"meta\": \"dplyr\",\n    \"value\": \"reframe\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reframe.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"reframe.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"relocate\",\n    \"meta\": \"dplyr\",\n    \"value\": \"relocate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"relocate.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"relocate.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_vars_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_vars_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_with\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_with\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_with.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename_with.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rename.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"replace_with\",\n    \"meta\": \"dplyr\",\n    \"value\": \"replace_with\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reset_dplyr_warnings\",\n    \"meta\": \"dplyr\",\n    \"value\": \"reset_dplyr_warnings\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_incompatible_type\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_incompatible_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_matches_incomplete\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_matches_incomplete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_matches_multiple\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_matches_multiple\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_matches_nothing\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_matches_nothing\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_matches_overflow\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_matches_overflow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_matches_remaining\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_matches_remaining\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_relationship_many_to_one\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_relationship_many_to_one\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_relationship_one_to_many\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_relationship_one_to_many\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_error_join_relationship_one_to_one\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_error_join_relationship_one_to_one\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_warning_join_matches_multiple\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_warning_join_matches_multiple\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_warning_join_relationship_many_to_many\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rethrow_warning_join_relationship_many_to_many\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"right_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"right_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"right_join.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"right_join.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"row_number\",\n    \"meta\": \"dplyr\",\n    \"value\": \"row_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_append\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_append\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_append.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_append.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_bind\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_bind\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_cast_y\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_cast_y\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_check_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_check_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_check_conflict\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_check_conflict\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_check_contains_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_check_contains_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_check_unique\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_check_unique\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_check_unmatched\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_check_unmatched\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_check_x_contains_y\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_check_x_contains_y\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_check_y_conflict\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_check_y_conflict\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_check_y_unmatched\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_check_y_unmatched\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_delete\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_delete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_delete.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_delete.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_df_in_place\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_df_in_place\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_insert\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_insert\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_insert.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_insert.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_patch\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_patch\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_patch.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_patch.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_update\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_update\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_update.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_update.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_upsert\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_upsert\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rows_upsert.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rows_upsert.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rowwise\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rowwise\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rowwise.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rowwise.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rowwise.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rowwise.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rule\",\n    \"meta\": \"dplyr\",\n    \"value\": \"rule\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"same_src\",\n    \"meta\": \"dplyr\",\n    \"value\": \"same_src\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"same_src.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"same_src.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sample_frac\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sample_frac\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sample_frac.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sample_frac.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sample_frac.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sample_frac.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sample_int\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sample_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sample_n\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sample_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sample_n.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sample_n.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sample_n.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sample_n.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_var\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_var\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_vars_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select_vars_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select.list\",\n    \"meta\": \"dplyr\",\n    \"value\": \"select.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"semi_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"semi_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"semi_join.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"semi_join.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_minimal_names\",\n    \"meta\": \"dplyr\",\n    \"value\": \"set_minimal_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_unique_names\",\n    \"meta\": \"dplyr\",\n    \"value\": \"set_unique_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_universal_names\",\n    \"meta\": \"dplyr\",\n    \"value\": \"set_universal_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setdiff.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"setdiff.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setequal.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"setequal.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"shift\",\n    \"meta\": \"dplyr\",\n    \"value\": \"shift\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"shift_c\",\n    \"meta\": \"dplyr\",\n    \"value\": \"shift_c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"shift_slice\",\n    \"meta\": \"dplyr\",\n    \"value\": \"shift_slice\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"show_query\",\n    \"meta\": \"dplyr\",\n    \"value\": \"show_query\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"show_regroups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"show_regroups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"show_time\",\n    \"meta\": \"dplyr\",\n    \"value\": \"show_time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"signal_warnings\",\n    \"meta\": \"dplyr\",\n    \"value\": \"signal_warnings\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"skip_internal_condition\",\n    \"meta\": \"dplyr\",\n    \"value\": \"skip_internal_condition\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_.tbl_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_combine\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_combine\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_eval\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_eval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_head\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_head\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_head.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_head.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_max\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_max\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_max.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_max.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_min\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_min\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_min.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_min.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_rank_idx\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_rank_idx\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_rows\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_sample\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_sample\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_sample.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_sample.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_tail\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_tail\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_tail.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice_tail.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"slice.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"some\",\n    \"meta\": \"dplyr\",\n    \"value\": \"some\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sort_key_generator\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sort_key_generator\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql_escape_ident\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql_escape_ident\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql_escape_string\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql_escape_string\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql_select\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql_select\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql_semi_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql_semi_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql_set_op\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql_set_op\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql_subquery\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql_subquery\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sql_translate_env\",\n    \"meta\": \"dplyr\",\n    \"value\": \"sql_translate_env\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"src\",\n    \"meta\": \"dplyr\",\n    \"value\": \"src\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"src_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"src_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"src_local\",\n    \"meta\": \"dplyr\",\n    \"value\": \"src_local\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"src_mysql\",\n    \"meta\": \"dplyr\",\n    \"value\": \"src_mysql\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"src_postgres\",\n    \"meta\": \"dplyr\",\n    \"value\": \"src_postgres\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"src_sqlite\",\n    \"meta\": \"dplyr\",\n    \"value\": \"src_sqlite\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"src_tbls\",\n    \"meta\": \"dplyr\",\n    \"value\": \"src_tbls\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"src_tbls.src_local\",\n    \"meta\": \"dplyr\",\n    \"value\": \"src_tbls.src_local\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_join_incomplete\",\n    \"meta\": \"dplyr\",\n    \"value\": \"standardise_join_incomplete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_join_no_match\",\n    \"meta\": \"dplyr\",\n    \"value\": \"standardise_join_no_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_join_remaining\",\n    \"meta\": \"dplyr\",\n    \"value\": \"standardise_join_remaining\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_join_suffix\",\n    \"meta\": \"dplyr\",\n    \"value\": \"standardise_join_suffix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_dplyr\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_dplyr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_invalid_dollar_sign\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_invalid_dollar_sign\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_invalid_namespaced_expression\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_invalid_namespaced_expression\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_invalid_top_expression\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_invalid_top_expression\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_join_by_closest_equal_expression\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_join_by_closest_equal_expression\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_join_by_closest_invalid_expression\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_join_by_closest_invalid_expression\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_join_matches_multiple\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_join_matches_multiple\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_mask_type\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_mask_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_pick_empty\",\n    \"meta\": \"dplyr\",\n    \"value\": \"stop_pick_empty\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_rep\",\n    \"meta\": \"dplyr\",\n    \"value\": \"str_rep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"strip_pos\",\n    \"meta\": \"dplyr\",\n    \"value\": \"strip_pos\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_.tbl_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_build\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_build\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_bullets\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_bullets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_bullets.dplyr:::summarise_incompatible_size\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_bullets.dplyr:::summarise_incompatible_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_bullets.dplyr:::summarise_mixed_null\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_bullets.dplyr:::summarise_mixed_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_bullets.dplyr:::summarise_unsupported_type\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_bullets.dplyr:::summarise_unsupported_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_cols\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_deprecate_variable_size\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_deprecate_variable_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_each\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_each\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_each_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_each_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_each_impl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_each_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_eval_one\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_eval_one\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_inform\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_inform\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise_verbose\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise_verbose\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarise.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarise.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarize\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarize\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarize_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarize_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarize_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarize_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarize_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarize_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarize_each\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarize_each\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarize_each_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarize_each_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summarize_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"summarize_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"symdiff\",\n    \"meta\": \"dplyr\",\n    \"value\": \"symdiff\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"symdiff.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"symdiff.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"symdiff.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"symdiff.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tally\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tally\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tally_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tally_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tally_n\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tally_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tally.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tally.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_at_syms\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_at_syms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_at_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_at_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_if_syms\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_if_syms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_if_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_if_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_nongroup_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_nongroup_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_ptype\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_ptype\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_ptype.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_ptype.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_sum.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_sum.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_sum.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_sum.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_vars\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_vars_dispatch\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_vars_dispatch\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_vars.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl_vars.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl.DBIConnection\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl.DBIConnection\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl.src_local\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tbl.src_local\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tick\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tick\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tick_if_needed\",\n    \"meta\": \"dplyr\",\n    \"value\": \"tick_if_needed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"top_frac\",\n    \"meta\": \"dplyr\",\n    \"value\": \"top_frac\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"top_n\",\n    \"meta\": \"dplyr\",\n    \"value\": \"top_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"top_n_rank\",\n    \"meta\": \"dplyr\",\n    \"value\": \"top_n_rank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"topic_links\",\n    \"meta\": \"dplyr\",\n    \"value\": \"topic_links\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transmute\",\n    \"meta\": \"dplyr\",\n    \"value\": \"transmute\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transmute_\",\n    \"meta\": \"dplyr\",\n    \"value\": \"transmute_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transmute_.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"transmute_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transmute_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"transmute_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transmute_at\",\n    \"meta\": \"dplyr\",\n    \"value\": \"transmute_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transmute_if\",\n    \"meta\": \"dplyr\",\n    \"value\": \"transmute_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transmute.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"transmute.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transpose\",\n    \"meta\": \"dplyr\",\n    \"value\": \"transpose\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ungroup\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ungroup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ungroup.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ungroup.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ungroup.grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ungroup.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ungroup.rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"ungroup.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"uninline\",\n    \"meta\": \"dplyr\",\n    \"value\": \"uninline\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"union_all\",\n    \"meta\": \"dplyr\",\n    \"value\": \"union_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"union_all.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"union_all.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"union_all.default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"union_all.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"union.data.frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"union.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unique_names\",\n    \"meta\": \"dplyr\",\n    \"value\": \"unique_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"universal_names\",\n    \"meta\": \"dplyr\",\n    \"value\": \"universal_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unstructure\",\n    \"meta\": \"dplyr\",\n    \"value\": \"unstructure\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_and_split_formula\",\n    \"meta\": \"dplyr\",\n    \"value\": \"validate_and_split_formula\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_grouped_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"validate_grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_recode_default\",\n    \"meta\": \"dplyr\",\n    \"value\": \"validate_recode_default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_rowwise_df\",\n    \"meta\": \"dplyr\",\n    \"value\": \"validate_rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vars_select_syms\",\n    \"meta\": \"dplyr\",\n    \"value\": \"vars_select_syms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_as_location_invert\",\n    \"meta\": \"dplyr\",\n    \"value\": \"vec_as_location_invert\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_case_match\",\n    \"meta\": \"dplyr\",\n    \"value\": \"vec_case_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_case_when\",\n    \"meta\": \"dplyr\",\n    \"value\": \"vec_case_when\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_order_radix\",\n    \"meta\": \"dplyr\",\n    \"value\": \"vec_order_radix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_paste0\",\n    \"meta\": \"dplyr\",\n    \"value\": \"vec_paste0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_slice2\",\n    \"meta\": \"dplyr\",\n    \"value\": \"vec_slice2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"walk\",\n    \"meta\": \"dplyr\",\n    \"value\": \"walk\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_dplyr\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_dplyr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_filter_across\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_filter_across\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_filter_data_frame\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_filter_data_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_filter_one_column_matrix\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_filter_one_column_matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_join\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_join\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_join_cross_by\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_join_cross_by\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_join_multiple\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_join_multiple\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_join_multiple_null\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_join_multiple_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_text_se\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_text_se\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_underscored\",\n    \"meta\": \"dplyr\",\n    \"value\": \"warn_underscored\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_groups\",\n    \"meta\": \"dplyr\",\n    \"value\": \"with_groups\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_no_rlang_infix_labeling\",\n    \"meta\": \"dplyr\",\n    \"value\": \"with_no_rlang_infix_labeling\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_order\",\n    \"meta\": \"dplyr\",\n    \"value\": \"with_order\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wrap\",\n    \"meta\": \"dplyr\",\n    \"value\": \"wrap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wrap_dbplyr_obj\",\n    \"meta\": \"dplyr\",\n    \"value\": \"wrap_dbplyr_obj\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"all_identical\",\n    \"meta\": \"tidyr\",\n    \"value\": \"all_identical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"apply_names_sep\",\n    \"meta\": \"tidyr\",\n    \"value\": \"apply_names_sep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble_matrix\",\n    \"meta\": \"tidyr\",\n    \"value\": \"as_tibble_matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"backtick_if_not_syntactic\",\n    \"meta\": \"tidyr\",\n    \"value\": \"backtick_if_not_syntactic\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"build_longer_spec\",\n    \"meta\": \"tidyr\",\n    \"value\": \"build_longer_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"build_wider_id_cols_expr\",\n    \"meta\": \"tidyr\",\n    \"value\": \"build_wider_id_cols_expr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"build_wider_spec\",\n    \"meta\": \"tidyr\",\n    \"value\": \"build_wider_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_df_alignment\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_df_alignment\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_inner_inner_duplicate\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_inner_inner_duplicate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_key\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_key\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_list_of_bool\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_list_of_bool\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_list_of_functions\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_list_of_functions\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_list_of_ptypes\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_list_of_ptypes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_not_stringr_pattern\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_not_stringr_pattern\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_outer_inner_duplicate\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_outer_inner_duplicate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_pivot_spec\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_pivot_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_pluckers\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_pluckers\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_replacement\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_replacement\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_unique_names\",\n    \"meta\": \"tidyr\",\n    \"value\": \"check_unique_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"chop\",\n    \"meta\": \"tidyr\",\n    \"value\": \"chop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"chop_rectangular_df\",\n    \"meta\": \"tidyr\",\n    \"value\": \"chop_rectangular_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_chop\",\n    \"meta\": \"tidyr\",\n    \"value\": \"col_chop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_names\",\n    \"meta\": \"tidyr\",\n    \"value\": \"col_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_simplify\",\n    \"meta\": \"tidyr\",\n    \"value\": \"col_simplify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_to_long\",\n    \"meta\": \"tidyr\",\n    \"value\": \"col_to_long\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_to_wide\",\n    \"meta\": \"tidyr\",\n    \"value\": \"col_to_wide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collect_indices_info\",\n    \"meta\": \"tidyr\",\n    \"value\": \"collect_indices_info\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compat_id_cols\",\n    \"meta\": \"tidyr\",\n    \"value\": \"compat_id_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"complete\",\n    \"meta\": \"tidyr\",\n    \"value\": \"complete\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"complete_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"complete_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"complete_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"complete_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"complete.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"complete.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"complete.grouped_df\",\n    \"meta\": \"tidyr\",\n    \"value\": \"complete.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"crossing\",\n    \"meta\": \"tidyr\",\n    \"value\": \"crossing\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"crossing_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"crossing_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"debug_name\",\n    \"meta\": \"tidyr\",\n    \"value\": \"debug_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deduplicate_spec\",\n    \"meta\": \"tidyr\",\n    \"value\": \"deduplicate_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df_align\",\n    \"meta\": \"tidyr\",\n    \"value\": \"df_align\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df_align_transpose\",\n    \"meta\": \"tidyr\",\n    \"value\": \"df_align_transpose\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df_append\",\n    \"meta\": \"tidyr\",\n    \"value\": \"df_append\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df_simplify\",\n    \"meta\": \"tidyr\",\n    \"value\": \"df_simplify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"df_unchop\",\n    \"meta\": \"tidyr\",\n    \"value\": \"df_unchop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"drop_cols\",\n    \"meta\": \"tidyr\",\n    \"value\": \"drop_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"drop_na\",\n    \"meta\": \"tidyr\",\n    \"value\": \"drop_na\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"drop_na_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"drop_na_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"drop_na_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"drop_na_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"drop_na.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"drop_na.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"elt_to_wide\",\n    \"meta\": \"tidyr\",\n    \"value\": \"elt_to_wide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"enframe\",\n    \"meta\": \"tidyr\",\n    \"value\": \"enframe\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand\",\n    \"meta\": \"tidyr\",\n    \"value\": \"expand\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"expand_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"expand_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand_grid\",\n    \"meta\": \"tidyr\",\n    \"value\": \"expand_grid\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"expand.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"expand.grouped_df\",\n    \"meta\": \"tidyr\",\n    \"value\": \"expand.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract\",\n    \"meta\": \"tidyr\",\n    \"value\": \"extract\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"extract_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"extract_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract_numeric\",\n    \"meta\": \"tidyr\",\n    \"value\": \"extract_numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"extract.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_unique\",\n    \"meta\": \"tidyr\",\n    \"value\": \"fct_unique\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fill\",\n    \"meta\": \"tidyr\",\n    \"value\": \"fill\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fill_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"fill_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fill_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"fill_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fill.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"fill.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"full_seq\",\n    \"meta\": \"tidyr\",\n    \"value\": \"full_seq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"full_seq.Date\",\n    \"meta\": \"tidyr\",\n    \"value\": \"full_seq.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"full_seq.numeric\",\n    \"meta\": \"tidyr\",\n    \"value\": \"full_seq.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"full_seq.POSIXct\",\n    \"meta\": \"tidyr\",\n    \"value\": \"full_seq.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gather\",\n    \"meta\": \"tidyr\",\n    \"value\": \"gather\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gather_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"gather_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gather_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"gather_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gather.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"gather.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"glue_col_names\",\n    \"meta\": \"tidyr\",\n    \"value\": \"glue_col_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"grid_dots\",\n    \"meta\": \"tidyr\",\n    \"value\": \"grid_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"group_loc\",\n    \"meta\": \"tidyr\",\n    \"value\": \"group_loc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_dir\",\n    \"meta\": \"tidyr\",\n    \"value\": \"guess_dir\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hoist\",\n    \"meta\": \"tidyr\",\n    \"value\": \"hoist\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"id_col\",\n    \"meta\": \"tidyr\",\n    \"value\": \"id_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_max\",\n    \"meta\": \"tidyr\",\n    \"value\": \"int_max\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_default_key\",\n    \"meta\": \"tidyr\",\n    \"value\": \"is_default_key\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_number\",\n    \"meta\": \"tidyr\",\n    \"value\": \"is_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_scalar\",\n    \"meta\": \"tidyr\",\n    \"value\": \"is_scalar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_all_vectors2\",\n    \"meta\": \"tidyr\",\n    \"value\": \"list_all_vectors2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_col_type\",\n    \"meta\": \"tidyr\",\n    \"value\": \"list_col_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_indices\",\n    \"meta\": \"tidyr\",\n    \"value\": \"list_indices\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_of_ptype\",\n    \"meta\": \"tidyr\",\n    \"value\": \"list_of_ptype\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_replace_empty_typed\",\n    \"meta\": \"tidyr\",\n    \"value\": \"list_replace_empty_typed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_replace_null\",\n    \"meta\": \"tidyr\",\n    \"value\": \"list_replace_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_unchop\",\n    \"meta\": \"tidyr\",\n    \"value\": \"map_unchop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_unpack\",\n    \"meta\": \"tidyr\",\n    \"value\": \"map_unpack\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_dataframe\",\n    \"meta\": \"tidyr\",\n    \"value\": \"melt_dataframe\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_info\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest_info\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_legacy\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest_legacy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_legacy.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest_legacy.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest_legacy.tbl_df\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest_legacy.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest.grouped_df\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest.grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nest.tbl_df\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nest.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nesting\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nesting\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nesting_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"nesting_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_long_frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"new_long_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_long_indexed_frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"new_long_indexed_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"normalize_melt_arguments\",\n    \"meta\": \"tidyr\",\n    \"value\": \"normalize_melt_arguments\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pack\",\n    \"meta\": \"tidyr\",\n    \"value\": \"pack\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pivot_longer\",\n    \"meta\": \"tidyr\",\n    \"value\": \"pivot_longer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pivot_longer_spec\",\n    \"meta\": \"tidyr\",\n    \"value\": \"pivot_longer_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pivot_longer.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"pivot_longer.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pivot_wider\",\n    \"meta\": \"tidyr\",\n    \"value\": \"pivot_wider\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pivot_wider_spec\",\n    \"meta\": \"tidyr\",\n    \"value\": \"pivot_wider_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pivot_wider.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"pivot_wider.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reconstruct_tibble\",\n    \"meta\": \"tidyr\",\n    \"value\": \"reconstruct_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rename_with_names_sep\",\n    \"meta\": \"tidyr\",\n    \"value\": \"rename_with_names_sep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"replace_na\",\n    \"meta\": \"tidyr\",\n    \"value\": \"replace_na\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"replace_na.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"replace_na.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"replace_na.default\",\n    \"meta\": \"tidyr\",\n    \"value\": \"replace_na.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"restore\",\n    \"meta\": \"tidyr\",\n    \"value\": \"restore\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rethrow_id_cols_oob\",\n    \"meta\": \"tidyr\",\n    \"value\": \"rethrow_id_cols_oob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"select_wider_id_cols\",\n    \"meta\": \"tidyr\",\n    \"value\": \"select_wider_id_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_longer_delim\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_longer_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_longer_position\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_longer_position\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_rows\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_rows_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_rows_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_rows_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_rows_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_rows.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_rows.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_warn_debug\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_warn_debug\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_wider_delim\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_wider_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_wider_position\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_wider_position\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate_wider_regex\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate_wider_regex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"separate.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"separate.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seq_ncol\",\n    \"meta\": \"tidyr\",\n    \"value\": \"seq_ncol\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seq_nrow\",\n    \"meta\": \"tidyr\",\n    \"value\": \"seq_nrow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"simplifyPieces\",\n    \"meta\": \"tidyr\",\n    \"value\": \"simplifyPieces\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slice_match\",\n    \"meta\": \"tidyr\",\n    \"value\": \"slice_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sorted_unique\",\n    \"meta\": \"tidyr\",\n    \"value\": \"sorted_unique\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"split_labels\",\n    \"meta\": \"tidyr\",\n    \"value\": \"split_labels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spread\",\n    \"meta\": \"tidyr\",\n    \"value\": \"spread\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spread_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"spread_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spread_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"spread_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spread.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"spread.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_id_cols_oob\",\n    \"meta\": \"tidyr\",\n    \"value\": \"stop_id_cols_oob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_use_names_sep\",\n    \"meta\": \"tidyr\",\n    \"value\": \"stop_use_names_sep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_extract\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_extract\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_match_first\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_match_first\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_separate\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_separate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_separate_wider_delim\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_separate_wider_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_separate_wider_position\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_separate_wider_position\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_separate_wider_regex\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_separate_wider_regex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_split_fixed\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_split_fixed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_split_length\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_split_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_split_n\",\n    \"meta\": \"tidyr\",\n    \"value\": \"str_split_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"strike\",\n    \"meta\": \"tidyr\",\n    \"value\": \"strike\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"strip_names\",\n    \"meta\": \"tidyr\",\n    \"value\": \"strip_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"strsep\",\n    \"meta\": \"tidyr\",\n    \"value\": \"strsep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tidyr_col_modify\",\n    \"meta\": \"tidyr\",\n    \"value\": \"tidyr_col_modify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tidyr_legacy\",\n    \"meta\": \"tidyr\",\n    \"value\": \"tidyr_legacy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tidyr_new_list\",\n    \"meta\": \"tidyr\",\n    \"value\": \"tidyr_new_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unchop\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unchop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unchop_finalize\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unchop_finalize\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unchop_sizes2\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unchop_sizes2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"uncount\",\n    \"meta\": \"tidyr\",\n    \"value\": \"uncount\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"uncount.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"uncount.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unite\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unite\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unite_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unite_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unite_.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unite_.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unite.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unite.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest_\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest_auto\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest_auto\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest_legacy\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest_legacy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest_legacy.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest_legacy.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest_longer\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest_longer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest_wider\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest_wider\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest.data.frame\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unnest.rowwise_df\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unnest.rowwise_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unpack\",\n    \"meta\": \"tidyr\",\n    \"value\": \"unpack\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"value_summarize\",\n    \"meta\": \"tidyr\",\n    \"value\": \"value_summarize\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_deprecated_unnamed_id_cols\",\n    \"meta\": \"tidyr\",\n    \"value\": \"warn_deprecated_unnamed_id_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_unused_key\",\n    \"meta\": \"tidyr\",\n    \"value\": \"warn_unused_key\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_indexed_errors\",\n    \"meta\": \"tidyr\",\n    \"value\": \"with_indexed_errors\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wrap_error_names\",\n    \"meta\": \"tidyr\",\n    \"value\": \"wrap_error_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.spec_tbl_df\",\n    \"meta\": \"readr\",\n    \"value\": \"[.spec_tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_chunk_callback\",\n    \"meta\": \"readr\",\n    \"value\": \"as_chunk_callback\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_chunk_callback.ChunkCallback\",\n    \"meta\": \"readr\",\n    \"value\": \"as_chunk_callback.ChunkCallback\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_chunk_callback.function\",\n    \"meta\": \"readr\",\n    \"value\": \"as_chunk_callback.function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_chunk_callback.R6ClassGenerator\",\n    \"meta\": \"readr\",\n    \"value\": \"as_chunk_callback.R6ClassGenerator\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.spec_tbl_df\",\n    \"meta\": \"readr\",\n    \"value\": \"as_tibble.spec_tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.character.col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"as.character.col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"as.col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.col_spec.character\",\n    \"meta\": \"readr\",\n    \"value\": \"as.col_spec.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.col_spec.col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"as.col_spec.col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.col_spec.data.frame\",\n    \"meta\": \"readr\",\n    \"value\": \"as.col_spec.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.col_spec.default\",\n    \"meta\": \"readr\",\n    \"value\": \"as.col_spec.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.col_spec.list\",\n    \"meta\": \"readr\",\n    \"value\": \"as.col_spec.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.col_spec.NULL\",\n    \"meta\": \"readr\",\n    \"value\": \"as.col_spec.NULL\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.frame.spec_tbl_df\",\n    \"meta\": \"readr\",\n    \"value\": \"as.data.frame.spec_tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cat_wrap\",\n    \"meta\": \"readr\",\n    \"value\": \"cat_wrap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"change_decimal_separator\",\n    \"meta\": \"readr\",\n    \"value\": \"change_decimal_separator\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_callback_fun\",\n    \"meta\": \"readr\",\n    \"value\": \"check_callback_fun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_column_types\",\n    \"meta\": \"readr\",\n    \"value\": \"check_column_types\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_encoding\",\n    \"meta\": \"readr\",\n    \"value\": \"check_encoding\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_guess_max\",\n    \"meta\": \"readr\",\n    \"value\": \"check_guess_max\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_tz\",\n    \"meta\": \"readr\",\n    \"value\": \"check_tz\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cli_block\",\n    \"meta\": \"readr\",\n    \"value\": \"cli_block\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"clipboard\",\n    \"meta\": \"readr\",\n    \"value\": \"clipboard\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_character\",\n    \"meta\": \"readr\",\n    \"value\": \"col_character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_concise\",\n    \"meta\": \"readr\",\n    \"value\": \"col_concise\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_date\",\n    \"meta\": \"readr\",\n    \"value\": \"col_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_datetime\",\n    \"meta\": \"readr\",\n    \"value\": \"col_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_double\",\n    \"meta\": \"readr\",\n    \"value\": \"col_double\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_factor\",\n    \"meta\": \"readr\",\n    \"value\": \"col_factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_guess\",\n    \"meta\": \"readr\",\n    \"value\": \"col_guess\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_integer\",\n    \"meta\": \"readr\",\n    \"value\": \"col_integer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_logical\",\n    \"meta\": \"readr\",\n    \"value\": \"col_logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_number\",\n    \"meta\": \"readr\",\n    \"value\": \"col_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_skip\",\n    \"meta\": \"readr\",\n    \"value\": \"col_skip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_spec_standardise\",\n    \"meta\": \"readr\",\n    \"value\": \"col_spec_standardise\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_time\",\n    \"meta\": \"readr\",\n    \"value\": \"col_time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_to_short\",\n    \"meta\": \"readr\",\n    \"value\": \"col_to_short\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collector\",\n    \"meta\": \"readr\",\n    \"value\": \"collector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collector_find\",\n    \"meta\": \"readr\",\n    \"value\": \"collector_find\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"collectorGuess\",\n    \"meta\": \"readr\",\n    \"value\": \"collectorGuess\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"colourise_cols\",\n    \"meta\": \"readr\",\n    \"value\": \"colourise_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cols\",\n    \"meta\": \"readr\",\n    \"value\": \"cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cols_condense\",\n    \"meta\": \"readr\",\n    \"value\": \"cols_condense\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cols_only\",\n    \"meta\": \"readr\",\n    \"value\": \"cols_only\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compare_proxy.spec_tbl_df\",\n    \"meta\": \"readr\",\n    \"value\": \"compare_proxy.spec_tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compare.col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"compare.col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compare.tbl_df\",\n    \"meta\": \"readr\",\n    \"value\": \"compare.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"count_fields\",\n    \"meta\": \"readr\",\n    \"value\": \"count_fields\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"count_fields_\",\n    \"meta\": \"readr\",\n    \"value\": \"count_fields_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"datasource\",\n    \"meta\": \"readr\",\n    \"value\": \"datasource\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"datasource_connection\",\n    \"meta\": \"readr\",\n    \"value\": \"datasource_connection\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"datasource_file\",\n    \"meta\": \"readr\",\n    \"value\": \"datasource_file\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"datasource_raw\",\n    \"meta\": \"readr\",\n    \"value\": \"datasource_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"datasource_string\",\n    \"meta\": \"readr\",\n    \"value\": \"datasource_string\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date_names\",\n    \"meta\": \"readr\",\n    \"value\": \"date_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date_names_lang\",\n    \"meta\": \"readr\",\n    \"value\": \"date_names_lang\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date_names_langs\",\n    \"meta\": \"readr\",\n    \"value\": \"date_names_langs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"default_locale\",\n    \"meta\": \"readr\",\n    \"value\": \"default_locale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"detect_compression\",\n    \"meta\": \"readr\",\n    \"value\": \"detect_compression\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dim_tokens_\",\n    \"meta\": \"readr\",\n    \"value\": \"dim_tokens_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"edition_first\",\n    \"meta\": \"readr\",\n    \"value\": \"edition_first\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"edition_get\",\n    \"meta\": \"readr\",\n    \"value\": \"edition_get\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"edition_set\",\n    \"meta\": \"readr\",\n    \"value\": \"edition_set\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"empty_file\",\n    \"meta\": \"readr\",\n    \"value\": \"empty_file\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_csv\",\n    \"meta\": \"readr\",\n    \"value\": \"format_csv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_csv2\",\n    \"meta\": \"readr\",\n    \"value\": \"format_csv2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_delim\",\n    \"meta\": \"readr\",\n    \"value\": \"format_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_tsv\",\n    \"meta\": \"readr\",\n    \"value\": \"format_tsv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"format.col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fwf_col_names\",\n    \"meta\": \"readr\",\n    \"value\": \"fwf_col_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fwf_cols\",\n    \"meta\": \"readr\",\n    \"value\": \"fwf_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fwf_empty\",\n    \"meta\": \"readr\",\n    \"value\": \"fwf_empty\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fwf_positions\",\n    \"meta\": \"readr\",\n    \"value\": \"fwf_positions\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fwf_widths\",\n    \"meta\": \"readr\",\n    \"value\": \"fwf_widths\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"generate_melt_chunked_fun\",\n    \"meta\": \"readr\",\n    \"value\": \"generate_melt_chunked_fun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"generate_melt_delimited_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"generate_melt_delimited_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"generate_read_delimited_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"generate_read_delimited_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"generate_spec_fun\",\n    \"meta\": \"readr\",\n    \"value\": \"generate_spec_fun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_encoding\",\n    \"meta\": \"readr\",\n    \"value\": \"guess_encoding\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_header\",\n    \"meta\": \"readr\",\n    \"value\": \"guess_header\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_header_\",\n    \"meta\": \"readr\",\n    \"value\": \"guess_header_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_parser\",\n    \"meta\": \"readr\",\n    \"value\": \"guess_parser\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_types\",\n    \"meta\": \"readr\",\n    \"value\": \"guess_types\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_types_\",\n    \"meta\": \"readr\",\n    \"value\": \"guess_types_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_absolute_path\",\n    \"meta\": \"readr\",\n    \"value\": \"is_absolute_path\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_integerish\",\n    \"meta\": \"readr\",\n    \"value\": \"is_integerish\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_named\",\n    \"meta\": \"readr\",\n    \"value\": \"is_named\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_testing\",\n    \"meta\": \"readr\",\n    \"value\": \"is_testing\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_url\",\n    \"meta\": \"readr\",\n    \"value\": \"is_url\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"is.col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.collector\",\n    \"meta\": \"readr\",\n    \"value\": \"is.collector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.connection\",\n    \"meta\": \"readr\",\n    \"value\": \"is.connection\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.date_names\",\n    \"meta\": \"readr\",\n    \"value\": \"is.date_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.locale\",\n    \"meta\": \"readr\",\n    \"value\": \"is.locale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"isFALSE\",\n    \"meta\": \"readr\",\n    \"value\": \"isFALSE\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"keep_character_col_types\",\n    \"meta\": \"readr\",\n    \"value\": \"keep_character_col_types\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"local_edition\",\n    \"meta\": \"readr\",\n    \"value\": \"local_edition\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"locale\",\n    \"meta\": \"readr\",\n    \"value\": \"locale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_csv\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_csv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_csv_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_csv_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_csv2\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_csv2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_csv2_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_csv2_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_delim\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_delim_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_delim_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_delimited\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_delimited\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_delimited_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_delimited_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_fwf\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_fwf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_table\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_table2\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_table2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_tokens\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_tokens\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_tokens_\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_tokens_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_tokens_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_tokens_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_tokens_chunked_\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_tokens_chunked_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_tsv\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_tsv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt_tsv_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"melt_tsv_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"n_problems\",\n    \"meta\": \"readr\",\n    \"value\": \"n_problems\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"name_problems\",\n    \"meta\": \"readr\",\n    \"value\": \"name_problems\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_datasource\",\n    \"meta\": \"readr\",\n    \"value\": \"new_datasource\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"output_column\",\n    \"meta\": \"readr\",\n    \"value\": \"output_column\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"output_column.default\",\n    \"meta\": \"readr\",\n    \"value\": \"output_column.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"output_column.double\",\n    \"meta\": \"readr\",\n    \"value\": \"output_column.double\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"output_column.POSIXt\",\n    \"meta\": \"readr\",\n    \"value\": \"output_column.POSIXt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_character\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_date\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_datetime\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_double\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_double\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_factor\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_guess\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_guess\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_integer\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_integer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_logical\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_number\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_time\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_vector\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_vector_\",\n    \"meta\": \"readr\",\n    \"value\": \"parse_vector_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"POSIXct\",\n    \"meta\": \"readr\",\n    \"value\": \"POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"print.col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.collector\",\n    \"meta\": \"readr\",\n    \"value\": \"print.collector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.date_names\",\n    \"meta\": \"readr\",\n    \"value\": \"print.date_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.locale\",\n    \"meta\": \"readr\",\n    \"value\": \"print.locale\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"problem_rows\",\n    \"meta\": \"readr\",\n    \"value\": \"problem_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"problems\",\n    \"meta\": \"readr\",\n    \"value\": \"problems\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"probs\",\n    \"meta\": \"readr\",\n    \"value\": \"probs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_builtin\",\n    \"meta\": \"readr\",\n    \"value\": \"read_builtin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_connection\",\n    \"meta\": \"readr\",\n    \"value\": \"read_connection\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_connection_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_connection_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_csv\",\n    \"meta\": \"readr\",\n    \"value\": \"read_csv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_csv_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"read_csv_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_csv2\",\n    \"meta\": \"readr\",\n    \"value\": \"read_csv2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_csv2_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"read_csv2_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_delim\",\n    \"meta\": \"readr\",\n    \"value\": \"read_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_delim_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"read_delim_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_delimited\",\n    \"meta\": \"readr\",\n    \"value\": \"read_delimited\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_delimited_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"read_delimited_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_file\",\n    \"meta\": \"readr\",\n    \"value\": \"read_file\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_file_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_file_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_file_raw\",\n    \"meta\": \"readr\",\n    \"value\": \"read_file_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_file_raw_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_file_raw_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_fwf\",\n    \"meta\": \"readr\",\n    \"value\": \"read_fwf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_lines\",\n    \"meta\": \"readr\",\n    \"value\": \"read_lines\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_lines_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_lines_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_lines_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"read_lines_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_lines_chunked_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_lines_chunked_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_lines_raw\",\n    \"meta\": \"readr\",\n    \"value\": \"read_lines_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_lines_raw_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_lines_raw_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_lines_raw_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"read_lines_raw_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_lines_raw_chunked_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_lines_raw_chunked_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_log\",\n    \"meta\": \"readr\",\n    \"value\": \"read_log\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_rds\",\n    \"meta\": \"readr\",\n    \"value\": \"read_rds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_table\",\n    \"meta\": \"readr\",\n    \"value\": \"read_table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_table2\",\n    \"meta\": \"readr\",\n    \"value\": \"read_table2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_tokens\",\n    \"meta\": \"readr\",\n    \"value\": \"read_tokens\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_tokens_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_tokens_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_tokens_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"read_tokens_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_tokens_chunked_\",\n    \"meta\": \"readr\",\n    \"value\": \"read_tokens_chunked_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_tsv\",\n    \"meta\": \"readr\",\n    \"value\": \"read_tsv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"read_tsv_chunked\",\n    \"meta\": \"readr\",\n    \"value\": \"read_tsv_chunked\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"readr_enquo\",\n    \"meta\": \"readr\",\n    \"value\": \"readr_enquo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"readr_example\",\n    \"meta\": \"readr\",\n    \"value\": \"readr_example\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"readr_threads\",\n    \"meta\": \"readr\",\n    \"value\": \"readr_threads\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"register_s3_method\",\n    \"meta\": \"readr\",\n    \"value\": \"register_s3_method\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"should_read_lazy\",\n    \"meta\": \"readr\",\n    \"value\": \"should_read_lazy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"should_show_types\",\n    \"meta\": \"readr\",\n    \"value\": \"should_show_types\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"show_cols_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"show_cols_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"show_progress\",\n    \"meta\": \"readr\",\n    \"value\": \"show_progress\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"source_name\",\n    \"meta\": \"readr\",\n    \"value\": \"source_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spec\",\n    \"meta\": \"readr\",\n    \"value\": \"spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spec_csv\",\n    \"meta\": \"readr\",\n    \"value\": \"spec_csv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spec_csv2\",\n    \"meta\": \"readr\",\n    \"value\": \"spec_csv2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spec_delim\",\n    \"meta\": \"readr\",\n    \"value\": \"spec_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spec_table\",\n    \"meta\": \"readr\",\n    \"value\": \"spec_table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"spec_tsv\",\n    \"meta\": \"readr\",\n    \"value\": \"spec_tsv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_escape\",\n    \"meta\": \"readr\",\n    \"value\": \"standardise_escape\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_path\",\n    \"meta\": \"readr\",\n    \"value\": \"standardise_path\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_for_problems\",\n    \"meta\": \"readr\",\n    \"value\": \"stop_for_problems\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str.col_spec\",\n    \"meta\": \"readr\",\n    \"value\": \"str.col_spec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stream_delim\",\n    \"meta\": \"readr\",\n    \"value\": \"stream_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stream_delim_\",\n    \"meta\": \"readr\",\n    \"value\": \"stream_delim_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenize\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenize\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenize_\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenize_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenizer_csv\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenizer_csv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenizer_delim\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenizer_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenizer_fwf\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenizer_fwf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenizer_line\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenizer_line\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenizer_log\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenizer_log\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenizer_tsv\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenizer_tsv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tokenizer_ws\",\n    \"meta\": \"readr\",\n    \"value\": \"tokenizer_ws\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_convert\",\n    \"meta\": \"readr\",\n    \"value\": \"type_convert\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_convert_col\",\n    \"meta\": \"readr\",\n    \"value\": \"type_convert_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col.Date\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col.default\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col.double\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col.double\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col.factor\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col.hms\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col.hms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col.integer\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col.integer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col.logical\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col.logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_to_col.POSIXct\",\n    \"meta\": \"readr\",\n    \"value\": \"type_to_col.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"utctime\",\n    \"meta\": \"readr\",\n    \"value\": \"utctime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"utctime_\",\n    \"meta\": \"readr\",\n    \"value\": \"utctime_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warn_problems\",\n    \"meta\": \"readr\",\n    \"value\": \"warn_problems\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"whitespaceColumns\",\n    \"meta\": \"readr\",\n    \"value\": \"whitespaceColumns\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_edition\",\n    \"meta\": \"readr\",\n    \"value\": \"with_edition\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_csv\",\n    \"meta\": \"readr\",\n    \"value\": \"write_csv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_csv2\",\n    \"meta\": \"readr\",\n    \"value\": \"write_csv2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_delim\",\n    \"meta\": \"readr\",\n    \"value\": \"write_delim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_excel_csv\",\n    \"meta\": \"readr\",\n    \"value\": \"write_excel_csv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_excel_csv2\",\n    \"meta\": \"readr\",\n    \"value\": \"write_excel_csv2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_file\",\n    \"meta\": \"readr\",\n    \"value\": \"write_file\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_file_\",\n    \"meta\": \"readr\",\n    \"value\": \"write_file_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_file_raw_\",\n    \"meta\": \"readr\",\n    \"value\": \"write_file_raw_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_lines\",\n    \"meta\": \"readr\",\n    \"value\": \"write_lines\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_lines_\",\n    \"meta\": \"readr\",\n    \"value\": \"write_lines_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_lines_raw_\",\n    \"meta\": \"readr\",\n    \"value\": \"write_lines_raw_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_rds\",\n    \"meta\": \"readr\",\n    \"value\": \"write_rds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"write_tsv\",\n    \"meta\": \"readr\",\n    \"value\": \"write_tsv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"zipfile\",\n    \"meta\": \"readr\",\n    \"value\": \"zipfile\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%@%\",\n    \"meta\": \"purrr\",\n    \"value\": \"%@%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"accum_index\",\n    \"meta\": \"purrr\",\n    \"value\": \"accum_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"accum_init\",\n    \"meta\": \"purrr\",\n    \"value\": \"accum_init\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"accumulate_names\",\n    \"meta\": \"purrr\",\n    \"value\": \"accumulate_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"accumulate2\",\n    \"meta\": \"purrr\",\n    \"value\": \"accumulate2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"array_branch\",\n    \"meta\": \"purrr\",\n    \"value\": \"array_branch\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"array_tree\",\n    \"meta\": \"purrr\",\n    \"value\": \"array_tree\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_invoke_function\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_invoke_function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_is_node\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_is_node\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_mapper\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_mapper\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_mapper.character\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_mapper.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_mapper.default\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_mapper.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_mapper.list\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_mapper.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_mapper.numeric\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_mapper.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_predicate\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_predicate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_vector\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_vector_\",\n    \"meta\": \"purrr\",\n    \"value\": \"as_vector_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"assign_in\",\n    \"meta\": \"purrr\",\n    \"value\": \"assign_in\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"at_depth\",\n    \"meta\": \"purrr\",\n    \"value\": \"at_depth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"attr_getter\",\n    \"meta\": \"purrr\",\n    \"value\": \"attr_getter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"auto_browse\",\n    \"meta\": \"purrr\",\n    \"value\": \"auto_browse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"browse_in_frame\",\n    \"meta\": \"purrr\",\n    \"value\": \"browse_in_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"call_with_cleanup\",\n    \"meta\": \"purrr\",\n    \"value\": \"call_with_cleanup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"can_coerce\",\n    \"meta\": \"purrr\",\n    \"value\": \"can_coerce\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"can_simplify\",\n    \"meta\": \"purrr\",\n    \"value\": \"can_simplify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"capture_error\",\n    \"meta\": \"purrr\",\n    \"value\": \"capture_error\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"capture_output\",\n    \"meta\": \"purrr\",\n    \"value\": \"capture_output\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_depth\",\n    \"meta\": \"purrr\",\n    \"value\": \"check_depth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_list\",\n    \"meta\": \"purrr\",\n    \"value\": \"check_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_list_of_data_frames\",\n    \"meta\": \"purrr\",\n    \"value\": \"check_list_of_data_frames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_rate\",\n    \"meta\": \"purrr\",\n    \"value\": \"check_rate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"chuck\",\n    \"meta\": \"purrr\",\n    \"value\": \"chuck\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coerce\",\n    \"meta\": \"purrr\",\n    \"value\": \"coerce\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coerce_chr\",\n    \"meta\": \"purrr\",\n    \"value\": \"coerce_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coerce_dbl\",\n    \"meta\": \"purrr\",\n    \"value\": \"coerce_dbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coerce_int\",\n    \"meta\": \"purrr\",\n    \"value\": \"coerce_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coerce_lgl\",\n    \"meta\": \"purrr\",\n    \"value\": \"coerce_lgl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compose\",\n    \"meta\": \"purrr\",\n    \"value\": \"compose\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cross\",\n    \"meta\": \"purrr\",\n    \"value\": \"cross\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cross_d\",\n    \"meta\": \"purrr\",\n    \"value\": \"cross_d\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cross_df\",\n    \"meta\": \"purrr\",\n    \"value\": \"cross_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cross_n\",\n    \"meta\": \"purrr\",\n    \"value\": \"cross_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cross2\",\n    \"meta\": \"purrr\",\n    \"value\": \"cross2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cross3\",\n    \"meta\": \"purrr\",\n    \"value\": \"cross3\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"defer\",\n    \"meta\": \"purrr\",\n    \"value\": \"defer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deprec_rerun\",\n    \"meta\": \"purrr\",\n    \"value\": \"deprec_rerun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deprecate_to_char\",\n    \"meta\": \"purrr\",\n    \"value\": \"deprecate_to_char\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"discard_at\",\n    \"meta\": \"purrr\",\n    \"value\": \"discard_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"find_extract_default\",\n    \"meta\": \"purrr\",\n    \"value\": \"find_extract_default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten_chr\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten_dbl\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten_dbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten_df\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten_dfc\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten_dfc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten_dfr\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten_dfr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten_int\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten_lgl\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten_lgl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"flatten_raw\",\n    \"meta\": \"purrr\",\n    \"value\": \"flatten_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_element\",\n    \"meta\": \"purrr\",\n    \"value\": \"has_element\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"head_while\",\n    \"meta\": \"purrr\",\n    \"value\": \"head_while\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imap_chr\",\n    \"meta\": \"purrr\",\n    \"value\": \"imap_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imap_dbl\",\n    \"meta\": \"purrr\",\n    \"value\": \"imap_dbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imap_dfc\",\n    \"meta\": \"purrr\",\n    \"value\": \"imap_dfc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imap_dfr\",\n    \"meta\": \"purrr\",\n    \"value\": \"imap_dfr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imap_int\",\n    \"meta\": \"purrr\",\n    \"value\": \"imap_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imap_lgl\",\n    \"meta\": \"purrr\",\n    \"value\": \"imap_lgl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imap_raw\",\n    \"meta\": \"purrr\",\n    \"value\": \"imap_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"imodify\",\n    \"meta\": \"purrr\",\n    \"value\": \"imodify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"index\",\n    \"meta\": \"purrr\",\n    \"value\": \"index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"insistently\",\n    \"meta\": \"purrr\",\n    \"value\": \"insistently\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map_chr\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map_dbl\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map_dbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map_df\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map_dfc\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map_dfc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map_dfr\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map_dfr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map_int\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map_lgl\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map_lgl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invoke_map_raw\",\n    \"meta\": \"purrr\",\n    \"value\": \"invoke_map_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_mold\",\n    \"meta\": \"purrr\",\n    \"value\": \"is_mold\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_rate\",\n    \"meta\": \"purrr\",\n    \"value\": \"is_rate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"iwalk\",\n    \"meta\": \"purrr\",\n    \"value\": \"iwalk\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"keep_at\",\n    \"meta\": \"purrr\",\n    \"value\": \"keep_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lift\",\n    \"meta\": \"purrr\",\n    \"value\": \"lift\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lift_dl\",\n    \"meta\": \"purrr\",\n    \"value\": \"lift_dl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lift_dv\",\n    \"meta\": \"purrr\",\n    \"value\": \"lift_dv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lift_ld\",\n    \"meta\": \"purrr\",\n    \"value\": \"lift_ld\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lift_lv\",\n    \"meta\": \"purrr\",\n    \"value\": \"lift_lv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lift_vd\",\n    \"meta\": \"purrr\",\n    \"value\": \"lift_vd\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lift_vl\",\n    \"meta\": \"purrr\",\n    \"value\": \"lift_vl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_along\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_along\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_assign\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_assign\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_c\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_cbind\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_cbind\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_merge\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_merge\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_modify\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_modify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_rbind\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_rbind\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_recurse\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_recurse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_simplify\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_simplify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_simplify_internal\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_simplify_internal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_slice2<-\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_slice2<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list_transpose\",\n    \"meta\": \"purrr\",\n    \"value\": \"list_transpose\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lmap\",\n    \"meta\": \"purrr\",\n    \"value\": \"lmap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lmap_at\",\n    \"meta\": \"purrr\",\n    \"value\": \"lmap_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lmap_helper\",\n    \"meta\": \"purrr\",\n    \"value\": \"lmap_helper\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lmap_if\",\n    \"meta\": \"purrr\",\n    \"value\": \"lmap_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"local_deprecation_user_env\",\n    \"meta\": \"purrr\",\n    \"value\": \"local_deprecation_user_env\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_at\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_depth\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_depth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_depth_rec\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_depth_rec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_df\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_dfc\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_dfc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_dfr\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_dfr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_raw\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_vec\",\n    \"meta\": \"purrr\",\n    \"value\": \"map_vec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_\",\n    \"meta\": \"purrr\",\n    \"value\": \"map2_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_df\",\n    \"meta\": \"purrr\",\n    \"value\": \"map2_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_dfc\",\n    \"meta\": \"purrr\",\n    \"value\": \"map2_dfc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_dfr\",\n    \"meta\": \"purrr\",\n    \"value\": \"map2_dfr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_raw\",\n    \"meta\": \"purrr\",\n    \"value\": \"map2_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_vec\",\n    \"meta\": \"purrr\",\n    \"value\": \"map2_vec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"match_template\",\n    \"meta\": \"purrr\",\n    \"value\": \"match_template\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify\",\n    \"meta\": \"purrr\",\n    \"value\": \"modify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify_at\",\n    \"meta\": \"purrr\",\n    \"value\": \"modify_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify_depth\",\n    \"meta\": \"purrr\",\n    \"value\": \"modify_depth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify_if\",\n    \"meta\": \"purrr\",\n    \"value\": \"modify_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify_in\",\n    \"meta\": \"purrr\",\n    \"value\": \"modify_in\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify_tree\",\n    \"meta\": \"purrr\",\n    \"value\": \"modify_tree\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify_where\",\n    \"meta\": \"purrr\",\n    \"value\": \"modify_where\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modify2\",\n    \"meta\": \"purrr\",\n    \"value\": \"modify2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_rate\",\n    \"meta\": \"purrr\",\n    \"value\": \"new_rate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"no_zap\",\n    \"meta\": \"purrr\",\n    \"value\": \"no_zap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"none\",\n    \"meta\": \"purrr\",\n    \"value\": \"none\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"partial\",\n    \"meta\": \"purrr\",\n    \"value\": \"partial\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"partialised_body\",\n    \"meta\": \"purrr\",\n    \"value\": \"partialised_body\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck\",\n    \"meta\": \"purrr\",\n    \"value\": \"pluck\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck_depth\",\n    \"meta\": \"purrr\",\n    \"value\": \"pluck_depth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck_exists\",\n    \"meta\": \"purrr\",\n    \"value\": \"pluck_exists\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck_raw\",\n    \"meta\": \"purrr\",\n    \"value\": \"pluck_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck<-\",\n    \"meta\": \"purrr\",\n    \"value\": \"pluck<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"plucker\",\n    \"meta\": \"purrr\",\n    \"value\": \"plucker\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_chr\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_dbl\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_dbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_df\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_dfc\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_dfc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_dfr\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_dfr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_int\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_lgl\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_lgl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_raw\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pmap_vec\",\n    \"meta\": \"purrr\",\n    \"value\": \"pmap_vec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"possibly\",\n    \"meta\": \"purrr\",\n    \"value\": \"possibly\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"prepend\",\n    \"meta\": \"purrr\",\n    \"value\": \"prepend\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.purrr_function_compose\",\n    \"meta\": \"purrr\",\n    \"value\": \"print.purrr_function_compose\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.purrr_function_partial\",\n    \"meta\": \"purrr\",\n    \"value\": \"print.purrr_function_partial\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.purrr_rate_backoff\",\n    \"meta\": \"purrr\",\n    \"value\": \"print.purrr_rate_backoff\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.purrr_rate_delay\",\n    \"meta\": \"purrr\",\n    \"value\": \"print.purrr_rate_delay\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pwalk\",\n    \"meta\": \"purrr\",\n    \"value\": \"pwalk\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quietly\",\n    \"meta\": \"purrr\",\n    \"value\": \"quietly\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_invert\",\n    \"meta\": \"purrr\",\n    \"value\": \"quo_invert\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_is_constant\",\n    \"meta\": \"purrr\",\n    \"value\": \"quo_is_constant\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quo_is_same_env\",\n    \"meta\": \"purrr\",\n    \"value\": \"quo_is_same_env\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_backoff\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_backoff\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_bump_count\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_bump_count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_count\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_delay\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_delay\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_reset\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_reset\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_sleep\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_sleep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_sleep_impl\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_sleep_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_sleep.purrr_rate_backoff\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_sleep.purrr_rate_backoff\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rate_sleep.purrr_rate_delay\",\n    \"meta\": \"purrr\",\n    \"value\": \"rate_sleep.purrr_rate_delay\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rbernoulli\",\n    \"meta\": \"purrr\",\n    \"value\": \"rbernoulli\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rdunif\",\n    \"meta\": \"purrr\",\n    \"value\": \"rdunif\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce_early\",\n    \"meta\": \"purrr\",\n    \"value\": \"reduce_early\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce_impl\",\n    \"meta\": \"purrr\",\n    \"value\": \"reduce_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce_index\",\n    \"meta\": \"purrr\",\n    \"value\": \"reduce_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce_init\",\n    \"meta\": \"purrr\",\n    \"value\": \"reduce_init\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce2\",\n    \"meta\": \"purrr\",\n    \"value\": \"reduce2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce2_impl\",\n    \"meta\": \"purrr\",\n    \"value\": \"reduce2_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reduce2_right\",\n    \"meta\": \"purrr\",\n    \"value\": \"reduce2_right\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rerun\",\n    \"meta\": \"purrr\",\n    \"value\": \"rerun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"result_index\",\n    \"meta\": \"purrr\",\n    \"value\": \"result_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"safely\",\n    \"meta\": \"purrr\",\n    \"value\": \"safely\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seq_len2\",\n    \"meta\": \"purrr\",\n    \"value\": \"seq_len2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"signal_rate_init\",\n    \"meta\": \"purrr\",\n    \"value\": \"signal_rate_init\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"signal_rate_retry\",\n    \"meta\": \"purrr\",\n    \"value\": \"signal_rate_retry\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"simplify_all\",\n    \"meta\": \"purrr\",\n    \"value\": \"simplify_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"simplify_impl\",\n    \"meta\": \"purrr\",\n    \"value\": \"simplify_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"slowly\",\n    \"meta\": \"purrr\",\n    \"value\": \"slowly\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"splice\",\n    \"meta\": \"purrr\",\n    \"value\": \"splice\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"splice_if\",\n    \"meta\": \"purrr\",\n    \"value\": \"splice_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_bad_element_length\",\n    \"meta\": \"purrr\",\n    \"value\": \"stop_bad_element_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_bad_element_type\",\n    \"meta\": \"purrr\",\n    \"value\": \"stop_bad_element_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_bad_type\",\n    \"meta\": \"purrr\",\n    \"value\": \"stop_bad_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_rate_excess\",\n    \"meta\": \"purrr\",\n    \"value\": \"stop_rate_excess\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_rate_expired\",\n    \"meta\": \"purrr\",\n    \"value\": \"stop_rate_expired\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tail_while\",\n    \"meta\": \"purrr\",\n    \"value\": \"tail_while\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update_list\",\n    \"meta\": \"purrr\",\n    \"value\": \"update_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vctrs_list_compat\",\n    \"meta\": \"purrr\",\n    \"value\": \"vctrs_list_compat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vctrs_vec_compat\",\n    \"meta\": \"purrr\",\n    \"value\": \"vctrs_vec_compat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_depth\",\n    \"meta\": \"purrr\",\n    \"value\": \"vec_depth\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_index\",\n    \"meta\": \"purrr\",\n    \"value\": \"vec_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"walk2\",\n    \"meta\": \"purrr\",\n    \"value\": \"walk2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"what_bad_element\",\n    \"meta\": \"purrr\",\n    \"value\": \"what_bad_element\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"what_bad_object\",\n    \"meta\": \"purrr\",\n    \"value\": \"what_bad_object\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"when\",\n    \"meta\": \"purrr\",\n    \"value\": \"when\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"where_at\",\n    \"meta\": \"purrr\",\n    \"value\": \"where_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"where_if\",\n    \"meta\": \"purrr\",\n    \"value\": \"where_if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"[.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[[.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"[[.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[[<-.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"[[<-.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[<-.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"[<-.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"$.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"$.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"$<-.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"$<-.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_add_rows_to_grouped_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_add_rows_to_grouped_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_already_has_rownames\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_already_has_rownames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_as_tibble_row_size_one\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_as_tibble_row_size_one\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_as_tibble_row_vector\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_as_tibble_row_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_assign_columns_non_missing_only\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_assign_columns_non_missing_only\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_assign_columns_non_na_only\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_assign_columns_non_na_only\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_assign_duplicate_column_subscript\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_assign_duplicate_column_subscript\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_assign_duplicate_row_subscript\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_assign_duplicate_row_subscript\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_assign_incompatible_size\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_assign_incompatible_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_assign_incompatible_type\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_assign_incompatible_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_assign_rows_non_na_only\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_assign_rows_non_na_only\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_assign_vector\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_assign_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_both_before_after\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_both_before_after\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_column_names_cannot_be_dot_dot\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_column_names_cannot_be_dot_dot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_column_names_cannot_be_empty\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_column_names_cannot_be_empty\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_column_names_must_be_unique\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_column_names_must_be_unique\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_column_scalar_type\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_column_scalar_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_compat_lazy\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_compat_lazy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_dim_column_index\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_dim_column_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_enframe_must_be_vector\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_enframe_must_be_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_enframe_value_null\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_enframe_value_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_frame_matrix_list\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_frame_matrix_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_incompatible_new_cols\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_incompatible_new_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_incompatible_new_rows\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_incompatible_new_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_incompatible_size\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_incompatible_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_names_must_be_non_null\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_names_must_be_non_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_names_must_have_length\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_names_must_have_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_need_rhs_vector\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_need_rhs_vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_need_rhs_vector_or_null\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_need_rhs_vector_or_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_new_tibble_must_be_list\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_new_tibble_must_be_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_new_tibble_nrow_must_be_nonnegative\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_new_tibble_nrow_must_be_nonnegative\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_subset_columns_non_missing_only\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_subset_columns_non_missing_only\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_subset_matrix_must_be_logical\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_subset_matrix_must_be_logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_subset_matrix_must_be_scalar\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_subset_matrix_must_be_scalar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_subset_matrix_must_have_same_dimensions\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_subset_matrix_must_have_same_dimensions\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_subset_matrix_scalar_type\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_subset_matrix_scalar_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_tibble_row_size_one\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_tibble_row_size_one\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_tribble_c\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_tribble_c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_tribble_lhs_column_syntax\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_tribble_lhs_column_syntax\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_tribble_named_after_tilde\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_tribble_named_after_tilde\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_tribble_needs_columns\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_tribble_needs_columns\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_tribble_non_rectangular\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_tribble_non_rectangular\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_tribble_rhs_column_syntax\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_tribble_rhs_column_syntax\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"abort_unknown_column_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"abort_unknown_column_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_case\",\n    \"meta\": \"tibble\",\n    \"value\": \"add_case\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_column\",\n    \"meta\": \"tibble\",\n    \"value\": \"add_column\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_row\",\n    \"meta\": \"tibble\",\n    \"value\": \"add_row\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_to_env\",\n    \"meta\": \"tibble\",\n    \"value\": \"add_to_env\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_to_env2\",\n    \"meta\": \"tibble\",\n    \"value\": \"add_to_env2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"args_recycle\",\n    \"meta\": \"tibble\",\n    \"value\": \"args_recycle\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_data_frame\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_data_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_friendly_type\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_friendly_type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble_col\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble_deep\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble_deep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble_row\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble_row\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.data.frame\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.default\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.list\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.matrix\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble.matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.NULL\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble.NULL\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.poly\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble.poly\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.table\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_tibble.ts\",\n    \"meta\": \"tibble\",\n    \"value\": \"as_tibble.ts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.frame.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"as.data.frame.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"as.tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cells_to_col_idx\",\n    \"meta\": \"tibble\",\n    \"value\": \"cells_to_col_idx\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"char\",\n    \"meta\": \"tibble\",\n    \"value\": \"char\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_all_lengths_one\",\n    \"meta\": \"tibble\",\n    \"value\": \"check_all_lengths_one\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_minimal_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"check_minimal_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_names_before_after\",\n    \"meta\": \"tibble\",\n    \"value\": \"check_names_before_after\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_names_before_after_character\",\n    \"meta\": \"tibble\",\n    \"value\": \"check_names_before_after_character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_needs_no_dim\",\n    \"meta\": \"tibble\",\n    \"value\": \"check_needs_no_dim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_valid_col\",\n    \"meta\": \"tibble\",\n    \"value\": \"check_valid_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_valid_cols\",\n    \"meta\": \"tibble\",\n    \"value\": \"check_valid_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"col_lengths\",\n    \"meta\": \"tibble\",\n    \"value\": \"col_lengths\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"colourise_chunk\",\n    \"meta\": \"tibble\",\n    \"value\": \"colourise_chunk\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"column_to_rownames\",\n    \"meta\": \"tibble\",\n    \"value\": \"column_to_rownames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"data_frame\",\n    \"meta\": \"tibble\",\n    \"value\": \"data_frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"data_frame_\",\n    \"meta\": \"tibble\",\n    \"value\": \"data_frame_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deframe\",\n    \"meta\": \"tibble\",\n    \"value\": \"deframe\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"detect_dot_dot\",\n    \"meta\": \"tibble\",\n    \"value\": \"detect_dot_dot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"detect_duplicates\",\n    \"meta\": \"tibble\",\n    \"value\": \"detect_duplicates\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"detect_empty_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"detect_empty_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ensure_full_stop\",\n    \"meta\": \"tibble\",\n    \"value\": \"ensure_full_stop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract_frame_data_from_dots\",\n    \"meta\": \"tibble\",\n    \"value\": \"extract_frame_data_from_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract_frame_names_from_dots\",\n    \"meta\": \"tibble\",\n    \"value\": \"extract_frame_names_from_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fast_nrow\",\n    \"meta\": \"tibble\",\n    \"value\": \"fast_nrow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fix_oob\",\n    \"meta\": \"tibble\",\n    \"value\": \"fix_oob\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fix_oob_invalid\",\n    \"meta\": \"tibble\",\n    \"value\": \"fix_oob_invalid\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fix_oob_negative\",\n    \"meta\": \"tibble\",\n    \"value\": \"fix_oob_negative\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fix_oob_positive\",\n    \"meta\": \"tibble\",\n    \"value\": \"fix_oob_positive\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"foreign_caller_env\",\n    \"meta\": \"tibble\",\n    \"value\": \"foreign_caller_env\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_n\",\n    \"meta\": \"tibble\",\n    \"value\": \"format_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"format.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.trunc_mat\",\n    \"meta\": \"tibble\",\n    \"value\": \"format.trunc_mat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"frame_data\",\n    \"meta\": \"tibble\",\n    \"value\": \"frame_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"frame_matrix\",\n    \"meta\": \"tibble\",\n    \"value\": \"frame_matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"friendly_type_of\",\n    \"meta\": \"tibble\",\n    \"value\": \"friendly_type_of\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"galley_use_installed\",\n    \"meta\": \"tibble\",\n    \"value\": \"galley_use_installed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"get_tibble_option_view_max\",\n    \"meta\": \"tibble\",\n    \"value\": \"get_tibble_option_view_max\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_nrow\",\n    \"meta\": \"tibble\",\n    \"value\": \"guess_nrow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_null_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"has_null_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_rownames\",\n    \"meta\": \"tibble\",\n    \"value\": \"has_rownames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invalid_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"invalid_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_rstudio\",\n    \"meta\": \"tibble\",\n    \"value\": \"is_rstudio\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_syntactic_impl\",\n    \"meta\": \"tibble\",\n    \"value\": \"is_syntactic_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"is_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_valid_col\",\n    \"meta\": \"tibble\",\n    \"value\": \"is_valid_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"is.tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"limit_pos_range\",\n    \"meta\": \"tibble\",\n    \"value\": \"limit_pos_range\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"local_tibble_option_view_max\",\n    \"meta\": \"tibble\",\n    \"value\": \"local_tibble_option_view_max\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lst\",\n    \"meta\": \"tibble\",\n    \"value\": \"lst\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lst_\",\n    \"meta\": \"tibble\",\n    \"value\": \"lst_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lst_quos\",\n    \"meta\": \"tibble\",\n    \"value\": \"lst_quos\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lst_to_tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"lst_to_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_option_impl\",\n    \"meta\": \"tibble\",\n    \"value\": \"make_option_impl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_valid_col\",\n    \"meta\": \"tibble\",\n    \"value\": \"make_valid_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_cpl\",\n    \"meta\": \"tibble\",\n    \"value\": \"map_cpl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map_mold\",\n    \"meta\": \"tibble\",\n    \"value\": \"map_mold\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"map2_cpl\",\n    \"meta\": \"tibble\",\n    \"value\": \"map2_cpl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"matrix_to_cells\",\n    \"meta\": \"tibble\",\n    \"value\": \"matrix_to_cells\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"matrixToDataFrame\",\n    \"meta\": \"tibble\",\n    \"value\": \"matrixToDataFrame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"msg_names_must_be_non_null\",\n    \"meta\": \"tibble\",\n    \"value\": \"msg_names_must_be_non_null\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"msg_names_must_have_length\",\n    \"meta\": \"tibble\",\n    \"value\": \"msg_names_must_have_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"msg_unknown_column_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"msg_unknown_column_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"na_value\",\n    \"meta\": \"tibble\",\n    \"value\": \"na_value\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"name_or_pos\",\n    \"meta\": \"tibble\",\n    \"value\": \"name_or_pos\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"names<-.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"names<-.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nchar_width\",\n    \"meta\": \"tibble\",\n    \"value\": \"nchar_width\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"needs_dim\",\n    \"meta\": \"tibble\",\n    \"value\": \"needs_dim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"needs_list_col\",\n    \"meta\": \"tibble\",\n    \"value\": \"needs_list_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_data_mask_with_data\",\n    \"meta\": \"tibble\",\n    \"value\": \"new_data_mask_with_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"new_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"num\",\n    \"meta\": \"tibble\",\n    \"value\": \"num\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"numtbl_as_col_location_assign\",\n    \"meta\": \"tibble\",\n    \"value\": \"numtbl_as_col_location_assign\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"numtbl_as_row_location_assign\",\n    \"meta\": \"tibble\",\n    \"value\": \"numtbl_as_row_location_assign\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck_chr\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluck_chr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck_cpl\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluck_cpl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck_dbl\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluck_dbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck_int\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluck_int\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluck_lgl\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluck_lgl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluralise\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluralise\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluralise_commas\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluralise_commas\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluralise_count\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluralise_count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluralise_msg\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluralise_msg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pluralise_n\",\n    \"meta\": \"tibble\",\n    \"value\": \"pluralise_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pos_from_before_after\",\n    \"meta\": \"tibble\",\n    \"value\": \"pos_from_before_after\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pos_from_before_after_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"pos_from_before_after_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pre_dots\",\n    \"meta\": \"tibble\",\n    \"value\": \"pre_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"print.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.trunc_mat\",\n    \"meta\": \"tibble\",\n    \"value\": \"print.trunc_mat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"probe\",\n    \"meta\": \"tibble\",\n    \"value\": \"probe\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quote_n\",\n    \"meta\": \"tibble\",\n    \"value\": \"quote_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quote_n.character\",\n    \"meta\": \"tibble\",\n    \"value\": \"quote_n.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quote_n.default\",\n    \"meta\": \"tibble\",\n    \"value\": \"quote_n.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"raw_rownames\",\n    \"meta\": \"tibble\",\n    \"value\": \"raw_rownames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rbind_at\",\n    \"meta\": \"tibble\",\n    \"value\": \"rbind_at\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"recycle_columns\",\n    \"meta\": \"tibble\",\n    \"value\": \"recycle_columns\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"remove_rownames\",\n    \"meta\": \"tibble\",\n    \"value\": \"remove_rownames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"render_galley\",\n    \"meta\": \"tibble\",\n    \"value\": \"render_galley\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"render_galley_ext\",\n    \"meta\": \"tibble\",\n    \"value\": \"render_galley_ext\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"repair_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"repair_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"repaired_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"repaired_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"result_vectbl_wrap_rhs\",\n    \"meta\": \"tibble\",\n    \"value\": \"result_vectbl_wrap_rhs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"row.names<-.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"row.names<-.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rowid_to_column\",\n    \"meta\": \"tibble\",\n    \"value\": \"rowid_to_column\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rownames_to_column\",\n    \"meta\": \"tibble\",\n    \"value\": \"rownames_to_column\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"safe_match\",\n    \"meta\": \"tibble\",\n    \"value\": \"safe_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"safe_match_3_0\",\n    \"meta\": \"tibble\",\n    \"value\": \"safe_match_3_0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"safe_match_default\",\n    \"meta\": \"tibble\",\n    \"value\": \"safe_match_default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"same_as_tbl\",\n    \"meta\": \"tibble\",\n    \"value\": \"same_as_tbl\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"same_as_tbl_code\",\n    \"meta\": \"tibble\",\n    \"value\": \"same_as_tbl_code\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scoped_lifecycle_errors\",\n    \"meta\": \"tibble\",\n    \"value\": \"scoped_lifecycle_errors\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scoped_lifecycle_silence\",\n    \"meta\": \"tibble\",\n    \"value\": \"scoped_lifecycle_silence\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scoped_lifecycle_warnings\",\n    \"meta\": \"tibble\",\n    \"value\": \"scoped_lifecycle_warnings\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scrub\",\n    \"meta\": \"tibble\",\n    \"value\": \"scrub\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scrub_file\",\n    \"meta\": \"tibble\",\n    \"value\": \"scrub_file\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"scrub_tempdir\",\n    \"meta\": \"tibble\",\n    \"value\": \"scrub_tempdir\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_char_opts\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_char_opts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_default_name\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_default_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_dftbl_chunk_hook\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_dftbl_chunk_hook\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_dftbl_hooks\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_dftbl_hooks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_dftbl_knit_hook\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_dftbl_knit_hook\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_dftbl_opts_hook\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_dftbl_opts_hook\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_dftbl_source_hook\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_dftbl_source_hook\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_fansi_hooks\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_fansi_hooks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_num_opts\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_num_opts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_repaired_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_repaired_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_tibble_option_view_max\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_tibble_option_view_max\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set_tidy_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"set_tidy_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"signal_superseded\",\n    \"meta\": \"tibble\",\n    \"value\": \"signal_superseded\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"splice_dfs\",\n    \"meta\": \"tibble\",\n    \"value\": \"splice_dfs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"str.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"string_to_indices\",\n    \"meta\": \"tibble\",\n    \"value\": \"string_to_indices\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"subclass_col_index_errors\",\n    \"meta\": \"tibble\",\n    \"value\": \"subclass_col_index_errors\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"subclass_name_repair_errors\",\n    \"meta\": \"tibble\",\n    \"value\": \"subclass_name_repair_errors\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"subclass_row_index_errors\",\n    \"meta\": \"tibble\",\n    \"value\": \"subclass_row_index_errors\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"subclass_tribble_c_errors\",\n    \"meta\": \"tibble\",\n    \"value\": \"subclass_tribble_c_errors\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_expand_to_nrow\",\n    \"meta\": \"tibble\",\n    \"value\": \"tbl_expand_to_nrow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_subassign\",\n    \"meta\": \"tibble\",\n    \"value\": \"tbl_subassign\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_subassign_col\",\n    \"meta\": \"tibble\",\n    \"value\": \"tbl_subassign_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_subassign_matrix\",\n    \"meta\": \"tibble\",\n    \"value\": \"tbl_subassign_matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_subassign_row\",\n    \"meta\": \"tibble\",\n    \"value\": \"tbl_subassign_row\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_subset_matrix\",\n    \"meta\": \"tibble\",\n    \"value\": \"tbl_subset_matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_subset2\",\n    \"meta\": \"tibble\",\n    \"value\": \"tbl_subset2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tbl_sum.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"tbl_sum.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"test_galley\",\n    \"meta\": \"tibble\",\n    \"value\": \"test_galley\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_abort\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_abort\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_error\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_error\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_error_class\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_error_class\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_glimpse_width\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_glimpse_width\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_opt\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_opt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_quos\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_quos\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_row\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_row\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tibble_width\",\n    \"meta\": \"tibble\",\n    \"value\": \"tibble_width\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tidy_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"tidy_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tribble\",\n    \"meta\": \"tibble\",\n    \"value\": \"tribble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"trunc_mat\",\n    \"meta\": \"tibble\",\n    \"value\": \"trunc_mat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"turn_frame_data_into_frame_matrix\",\n    \"meta\": \"tibble\",\n    \"value\": \"turn_frame_data_into_frame_matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"turn_frame_data_into_tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"turn_frame_data_into_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"turn_matrix_into_column_list\",\n    \"meta\": \"tibble\",\n    \"value\": \"turn_matrix_into_column_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"use_repair\",\n    \"meta\": \"tibble\",\n    \"value\": \"use_repair\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_nrow\",\n    \"meta\": \"tibble\",\n    \"value\": \"validate_nrow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_rectangular_shape\",\n    \"meta\": \"tibble\",\n    \"value\": \"validate_rectangular_shape\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"validate_tibble\",\n    \"meta\": \"tibble\",\n    \"value\": \"validate_tibble\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype_abbr.tbl_df\",\n    \"meta\": \"tibble\",\n    \"value\": \"vec_ptype_abbr.tbl_df\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vecpurrr_index\",\n    \"meta\": \"tibble\",\n    \"value\": \"vecpurrr_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_col_location\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_col_location\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_col_location2\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_col_location2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_col_subscript\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_col_subscript\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_col_subscript2\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_col_subscript2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_new_col_index\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_new_col_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_new_row_index\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_new_row_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_row_index\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_row_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_row_location\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_row_location\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_as_row_location2\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_as_row_location2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_assign\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_assign\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_names2\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_names2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_recycle_rhs_cols\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_recycle_rhs_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_recycle_rhs_rows\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_recycle_rhs_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_recycle_rows\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_recycle_rows\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_restore\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_restore\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vectbl_set_names\",\n    \"meta\": \"tibble\",\n    \"value\": \"vectbl_set_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"view\",\n    \"meta\": \"tibble\",\n    \"value\": \"view\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_lifecycle_errors\",\n    \"meta\": \"tibble\",\n    \"value\": \"with_lifecycle_errors\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_lifecycle_silence\",\n    \"meta\": \"tibble\",\n    \"value\": \"with_lifecycle_silence\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_lifecycle_warnings\",\n    \"meta\": \"tibble\",\n    \"value\": \"with_lifecycle_warnings\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.stringr_pattern\",\n    \"meta\": \"stringr\",\n    \"value\": \"[.stringr_pattern\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.stringr_view\",\n    \"meta\": \"stringr\",\n    \"value\": \"[.stringr_view\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_bare_character\",\n    \"meta\": \"stringr\",\n    \"value\": \"as_bare_character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"boundary\",\n    \"meta\": \"stringr\",\n    \"value\": \"boundary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_lengths\",\n    \"meta\": \"stringr\",\n    \"value\": \"check_lengths\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_positive_integer\",\n    \"meta\": \"stringr\",\n    \"value\": \"check_positive_integer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coll\",\n    \"meta\": \"stringr\",\n    \"value\": \"coll\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_interp_matches\",\n    \"meta\": \"stringr\",\n    \"value\": \"eval_interp_matches\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract_expressions\",\n    \"meta\": \"stringr\",\n    \"value\": \"extract_expressions\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"extract_formats\",\n    \"meta\": \"stringr\",\n    \"value\": \"extract_formats\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fix_replacement\",\n    \"meta\": \"stringr\",\n    \"value\": \"fix_replacement\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fix_replacement_one\",\n    \"meta\": \"stringr\",\n    \"value\": \"fix_replacement_one\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fixed\",\n    \"meta\": \"stringr\",\n    \"value\": \"fixed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"interp_placeholders\",\n    \"meta\": \"stringr\",\n    \"value\": \"interp_placeholders\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"invert_match\",\n    \"meta\": \"stringr\",\n    \"value\": \"invert_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_replacement_fun\",\n    \"meta\": \"stringr\",\n    \"value\": \"is_replacement_fun\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"like_to_regex\",\n    \"meta\": \"stringr\",\n    \"value\": \"like_to_regex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"match_brace\",\n    \"meta\": \"stringr\",\n    \"value\": \"match_brace\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"no_boundary\",\n    \"meta\": \"stringr\",\n    \"value\": \"no_boundary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"no_empty\",\n    \"meta\": \"stringr\",\n    \"value\": \"no_empty\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"opts\",\n    \"meta\": \"stringr\",\n    \"value\": \"opts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.stringr_view\",\n    \"meta\": \"stringr\",\n    \"value\": \"print.stringr_view\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"regex\",\n    \"meta\": \"stringr\",\n    \"value\": \"regex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_c\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_conv\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_conv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_count\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_detect\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_detect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_dup\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_dup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_ends\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_ends\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_equal\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_equal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_escape\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_escape\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_extract_all\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_extract_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_flatten\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_flatten\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_flatten_comma\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_flatten_comma\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_glue\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_glue\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_glue_data\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_glue_data\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_interp\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_interp\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_length\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_like\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_like\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_locate\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_locate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_locate_all\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_locate_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_match\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_match_all\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_match_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_opts_collator\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_opts_collator\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_order\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_order\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_pad\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_pad\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_rank\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_rank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_remove\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_remove\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_remove_all\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_remove_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_replace\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_replace\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_replace_all\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_replace_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_replace_na\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_replace_na\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_sort\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_sort\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_split\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_split\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_split_1\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_split_1\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_split_i\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_split_i\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_squish\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_squish\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_starts\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_starts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_sub\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_sub\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_sub_all\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_sub_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_sub<-\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_sub<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_subset\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_subset\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_to_lower\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_to_lower\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_to_sentence\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_to_sentence\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_to_title\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_to_title\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_to_upper\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_to_upper\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_transform\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_transform\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_transform_all\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_transform_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_trim\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_trim\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_trunc\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_trunc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_unique\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_unique\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_view\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_view\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_view_all\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_view_all\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_view_filter\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_view_filter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_view_highlighter\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_view_highlighter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_view_print\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_view_print\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_view_special\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_view_special\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_view_widget\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_view_widget\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_which\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_which\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_width\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_width\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"str_wrap\",\n    \"meta\": \"stringr\",\n    \"value\": \"str_wrap\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"turkish_I\",\n    \"meta\": \"stringr\",\n    \"value\": \"turkish_I\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type\",\n    \"meta\": \"stringr\",\n    \"value\": \"type\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type.character\",\n    \"meta\": \"stringr\",\n    \"value\": \"type.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type.default\",\n    \"meta\": \"stringr\",\n    \"value\": \"type.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type.stringr_boundary\",\n    \"meta\": \"stringr\",\n    \"value\": \"type.stringr_boundary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type.stringr_coll\",\n    \"meta\": \"stringr\",\n    \"value\": \"type.stringr_coll\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type.stringr_fixed\",\n    \"meta\": \"stringr\",\n    \"value\": \"type.stringr_fixed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type.stringr_regex\",\n    \"meta\": \"stringr\",\n    \"value\": \"type.stringr_regex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"word\",\n    \"meta\": \"stringr\",\n    \"value\": \"word\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_factor\",\n    \"meta\": \"forcats\",\n    \"value\": \"as_factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_factor.character\",\n    \"meta\": \"forcats\",\n    \"value\": \"as_factor.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_factor.factor\",\n    \"meta\": \"forcats\",\n    \"value\": \"as_factor.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_factor.logical\",\n    \"meta\": \"forcats\",\n    \"value\": \"as_factor.logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_factor.numeric\",\n    \"meta\": \"forcats\",\n    \"value\": \"as_factor.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_factor\",\n    \"meta\": \"forcats\",\n    \"value\": \"check_factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_factor_list\",\n    \"meta\": \"forcats\",\n    \"value\": \"check_factor_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_recode_levels\",\n    \"meta\": \"forcats\",\n    \"value\": \"check_recode_levels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_single_value_per_group\",\n    \"meta\": \"forcats\",\n    \"value\": \"check_single_value_per_group\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_weights\",\n    \"meta\": \"forcats\",\n    \"value\": \"check_weights\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute_weights\",\n    \"meta\": \"forcats\",\n    \"value\": \"compute_weights\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"digits\",\n    \"meta\": \"forcats\",\n    \"value\": \"digits\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_anon\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_anon\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_c\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_collapse\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_collapse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_count\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_count\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_cross\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_cross\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_drop\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_drop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_expand\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_expand\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_explicit_na\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_explicit_na\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_infreq\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_infreq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_inorder\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_inorder\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_inseq\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_inseq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_lump\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_lump\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_lump_lowfreq\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_lump_lowfreq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_lump_min\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_lump_min\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_lump_n\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_lump_n\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_lump_prop\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_lump_prop\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_match\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_match\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_na_level_to_value\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_na_level_to_value\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_na_value_to_level\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_na_value_to_level\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_other\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_other\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_recode\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_recode\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_relabel\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_relabel\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_relevel\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_relevel\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_reorder\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_reorder\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_reorder2\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_reorder2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_rev\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_rev\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_shift\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_shift\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_shuffle\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_shuffle\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fct_unify\",\n    \"meta\": \"forcats\",\n    \"value\": \"fct_unify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"first2\",\n    \"meta\": \"forcats\",\n    \"value\": \"first2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"in_smallest\",\n    \"meta\": \"forcats\",\n    \"value\": \"in_smallest\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"last2\",\n    \"meta\": \"forcats\",\n    \"value\": \"last2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lump_cutoff\",\n    \"meta\": \"forcats\",\n    \"value\": \"lump_cutoff\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lvls_expand\",\n    \"meta\": \"forcats\",\n    \"value\": \"lvls_expand\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lvls_other\",\n    \"meta\": \"forcats\",\n    \"value\": \"lvls_other\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lvls_rename\",\n    \"meta\": \"forcats\",\n    \"value\": \"lvls_rename\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lvls_reorder\",\n    \"meta\": \"forcats\",\n    \"value\": \"lvls_reorder\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lvls_revalue\",\n    \"meta\": \"forcats\",\n    \"value\": \"lvls_revalue\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lvls_seq\",\n    \"meta\": \"forcats\",\n    \"value\": \"lvls_seq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lvls_union\",\n    \"meta\": \"forcats\",\n    \"value\": \"lvls_union\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"refactor\",\n    \"meta\": \"forcats\",\n    \"value\": \"refactor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"terminal\",\n    \"meta\": \"forcats\",\n    \"value\": \"terminal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"zero_pad\",\n    \"meta\": \"forcats\",\n    \"value\": \"zero_pad\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"-.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"-.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \":=\",\n    \"meta\": \"data.table\",\n    \"value\": \":=\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"[.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"[.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[<-.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"[<-.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"[<-.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"[<-.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%between%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%between%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%chin%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%chin%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%flike%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%flike%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%ilike%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%ilike%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%inrange%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%inrange%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%iscall%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%iscall%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%like%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%like%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%notin%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%notin%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%plike%\",\n    \"meta\": \"data.table\",\n    \"value\": \"%plike%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"+.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"+.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"$<-.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"$<-.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"address\",\n    \"meta\": \"data.table\",\n    \"value\": \"address\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"aggregate_funs\",\n    \"meta\": \"data.table\",\n    \"value\": \"aggregate_funs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"all.equal.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"all.equal.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"allNA\",\n    \"meta\": \"data.table\",\n    \"value\": \"allNA\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"alloc.col\",\n    \"meta\": \"data.table\",\n    \"value\": \"alloc.col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"any_na\",\n    \"meta\": \"data.table\",\n    \"value\": \"any_na\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"anyDuplicated.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"anyDuplicated.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"anyNonAscii\",\n    \"meta\": \"data.table\",\n    \"value\": \"anyNonAscii\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_list\",\n    \"meta\": \"data.table\",\n    \"value\": \"as_list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_raw\",\n    \"meta\": \"data.table\",\n    \"value\": \"as_raw\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.character.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.character.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.frame.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.frame.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.frame.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.frame.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.array\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.array\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.character\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.data.frame\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.Date\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.default\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.factor\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.factor\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.integer\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.integer\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.list\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.logical\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.matrix\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.numeric\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.ordered\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.ordered\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.data.table.xts\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.data.table.xts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.Date.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.Date.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.IDate.Date\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.IDate.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.IDate.default\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.IDate.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.IDate.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.IDate.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.IDate.numeric\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.IDate.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.IDate.POSIXct\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.IDate.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.ITime.character\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.ITime.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.ITime.default\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.ITime.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.ITime.numeric\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.ITime.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.ITime.POSIXct\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.ITime.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.ITime.POSIXlt\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.ITime.POSIXlt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.ITime.times\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.ITime.times\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.list.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.list.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.list.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.list.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.matrix.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.matrix.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXct.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.POSIXct.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXct.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.POSIXct.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXlt.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.POSIXlt.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.xts.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"as.xts.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"binary\",\n    \"meta\": \"data.table\",\n    \"value\": \"binary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"bmerge\",\n    \"meta\": \"data.table\",\n    \"value\": \"bmerge\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"brackify\",\n    \"meta\": \"data.table\",\n    \"value\": \"brackify\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"c.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"c.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"catf\",\n    \"meta\": \"data.table\",\n    \"value\": \"catf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cbind.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"cbind.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cedta\",\n    \"meta\": \"data.table\",\n    \"value\": \"cedta\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"char.trunc\",\n    \"meta\": \"data.table\",\n    \"value\": \"char.trunc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"chgroup\",\n    \"meta\": \"data.table\",\n    \"value\": \"chgroup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"chmatch\",\n    \"meta\": \"data.table\",\n    \"value\": \"chmatch\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"chmatchdup\",\n    \"meta\": \"data.table\",\n    \"value\": \"chmatchdup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"chorder\",\n    \"meta\": \"data.table\",\n    \"value\": \"chorder\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"CJ\",\n    \"meta\": \"data.table\",\n    \"value\": \"CJ\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"clip_msec\",\n    \"meta\": \"data.table\",\n    \"value\": \"clip_msec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"coerceAs\",\n    \"meta\": \"data.table\",\n    \"value\": \"coerceAs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"colnames<-.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"colnames<-.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"colnamesInt\",\n    \"meta\": \"data.table\",\n    \"value\": \"colnamesInt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cols_from_csv\",\n    \"meta\": \"data.table\",\n    \"value\": \"cols_from_csv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cols_with_dims\",\n    \"meta\": \"data.table\",\n    \"value\": \"cols_with_dims\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compactprint\",\n    \"meta\": \"data.table\",\n    \"value\": \"compactprint\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"convertDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"convertDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"copy\",\n    \"meta\": \"data.table\",\n    \"value\": \"copy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cube\",\n    \"meta\": \"data.table\",\n    \"value\": \"cube\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cube.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"cube.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cut_colnames\",\n    \"meta\": \"data.table\",\n    \"value\": \"cut_colnames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cut.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"cut.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dcast\",\n    \"meta\": \"data.table\",\n    \"value\": \"dcast\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dcast.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"dcast.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dcf.lib\",\n    \"meta\": \"data.table\",\n    \"value\": \"dcf.lib\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dcf.repo\",\n    \"meta\": \"data.table\",\n    \"value\": \"dcf.repo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"deparse_formula\",\n    \"meta\": \"data.table\",\n    \"value\": \"deparse_formula\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dim.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"dim.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dimnames.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"dimnames.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dimnames<-.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"dimnames<-.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"droplevels.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"droplevels.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"DT\",\n    \"meta\": \"data.table\",\n    \"value\": \"DT\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dt_width\",\n    \"meta\": \"data.table\",\n    \"value\": \"dt_width\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"duplicated.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"duplicated.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"edit.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"edit.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"endsWith\",\n    \"meta\": \"data.table\",\n    \"value\": \"endsWith\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"endsWithAny\",\n    \"meta\": \"data.table\",\n    \"value\": \"endsWithAny\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"enlist\",\n    \"meta\": \"data.table\",\n    \"value\": \"enlist\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"eval_with_cols\",\n    \"meta\": \"data.table\",\n    \"value\": \"eval_with_cols\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fcase\",\n    \"meta\": \"data.table\",\n    \"value\": \"fcase\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fcoalesce\",\n    \"meta\": \"data.table\",\n    \"value\": \"fcoalesce\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fdroplevels\",\n    \"meta\": \"data.table\",\n    \"value\": \"fdroplevels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fifelse\",\n    \"meta\": \"data.table\",\n    \"value\": \"fifelse\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fintersect\",\n    \"meta\": \"data.table\",\n    \"value\": \"fintersect\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"forder\",\n    \"meta\": \"data.table\",\n    \"value\": \"forder\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"forderv\",\n    \"meta\": \"data.table\",\n    \"value\": \"forderv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_col\",\n    \"meta\": \"data.table\",\n    \"value\": \"format_col\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_col.default\",\n    \"meta\": \"data.table\",\n    \"value\": \"format_col.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_col.expression\",\n    \"meta\": \"data.table\",\n    \"value\": \"format_col.expression\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_col.POSIXct\",\n    \"meta\": \"data.table\",\n    \"value\": \"format_col.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_list_item\",\n    \"meta\": \"data.table\",\n    \"value\": \"format_list_item\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_list_item.default\",\n    \"meta\": \"data.table\",\n    \"value\": \"format_list_item.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"format.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"format.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"foverlaps\",\n    \"meta\": \"data.table\",\n    \"value\": \"foverlaps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"frank\",\n    \"meta\": \"data.table\",\n    \"value\": \"frank\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"frankv\",\n    \"meta\": \"data.table\",\n    \"value\": \"frankv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fread\",\n    \"meta\": \"data.table\",\n    \"value\": \"fread\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"froll\",\n    \"meta\": \"data.table\",\n    \"value\": \"froll\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"frollapply\",\n    \"meta\": \"data.table\",\n    \"value\": \"frollapply\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"frollmean\",\n    \"meta\": \"data.table\",\n    \"value\": \"frollmean\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"frollsum\",\n    \"meta\": \"data.table\",\n    \"value\": \"frollsum\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fsetdiff\",\n    \"meta\": \"data.table\",\n    \"value\": \"fsetdiff\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fsetequal\",\n    \"meta\": \"data.table\",\n    \"value\": \"fsetequal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fsort\",\n    \"meta\": \"data.table\",\n    \"value\": \"fsort\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"funion\",\n    \"meta\": \"data.table\",\n    \"value\": \"funion\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"funique\",\n    \"meta\": \"data.table\",\n    \"value\": \"funique\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fwrite\",\n    \"meta\": \"data.table\",\n    \"value\": \"fwrite\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"g[\",\n    \"meta\": \"data.table\",\n    \"value\": \"g[\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"g[[\",\n    \"meta\": \"data.table\",\n    \"value\": \"g[[\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gc_mem\",\n    \"meta\": \"data.table\",\n    \"value\": \"gc_mem\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"getdots\",\n    \"meta\": \"data.table\",\n    \"value\": \"getdots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"getDTthreads\",\n    \"meta\": \"data.table\",\n    \"value\": \"getDTthreads\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"getindex\",\n    \"meta\": \"data.table\",\n    \"value\": \"getindex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"getNumericRounding\",\n    \"meta\": \"data.table\",\n    \"value\": \"getNumericRounding\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"getRversion\",\n    \"meta\": \"data.table\",\n    \"value\": \"getRversion\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gfirst\",\n    \"meta\": \"data.table\",\n    \"value\": \"gfirst\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gforce\",\n    \"meta\": \"data.table\",\n    \"value\": \"gforce\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ghead\",\n    \"meta\": \"data.table\",\n    \"value\": \"ghead\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"glast\",\n    \"meta\": \"data.table\",\n    \"value\": \"glast\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gmax\",\n    \"meta\": \"data.table\",\n    \"value\": \"gmax\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gmean\",\n    \"meta\": \"data.table\",\n    \"value\": \"gmean\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gmedian\",\n    \"meta\": \"data.table\",\n    \"value\": \"gmedian\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gmin\",\n    \"meta\": \"data.table\",\n    \"value\": \"gmin\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gprod\",\n    \"meta\": \"data.table\",\n    \"value\": \"gprod\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"groupingsets\",\n    \"meta\": \"data.table\",\n    \"value\": \"groupingsets\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"groupingsets.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"groupingsets.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gsd\",\n    \"meta\": \"data.table\",\n    \"value\": \"gsd\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gshift\",\n    \"meta\": \"data.table\",\n    \"value\": \"gshift\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gsum\",\n    \"meta\": \"data.table\",\n    \"value\": \"gsum\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gtail\",\n    \"meta\": \"data.table\",\n    \"value\": \"gtail\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess\",\n    \"meta\": \"data.table\",\n    \"value\": \"guess\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gvar\",\n    \"meta\": \"data.table\",\n    \"value\": \"gvar\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"gweighted.mean\",\n    \"meta\": \"data.table\",\n    \"value\": \"gweighted.mean\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"has_format_method\",\n    \"meta\": \"data.table\",\n    \"value\": \"has_format_method\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"haskey\",\n    \"meta\": \"data.table\",\n    \"value\": \"haskey\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"haszlib\",\n    \"meta\": \"data.table\",\n    \"value\": \"haszlib\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"head.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"head.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hour\",\n    \"meta\": \"data.table\",\n    \"value\": \"hour\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"IDateTime\",\n    \"meta\": \"data.table\",\n    \"value\": \"IDateTime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"IDateTime.default\",\n    \"meta\": \"data.table\",\n    \"value\": \"IDateTime.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"indices\",\n    \"meta\": \"data.table\",\n    \"value\": \"indices\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"inrange\",\n    \"meta\": \"data.table\",\n    \"value\": \"inrange\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"INT\",\n    \"meta\": \"data.table\",\n    \"value\": \"INT\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_bzip\",\n    \"meta\": \"data.table\",\n    \"value\": \"is_bzip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_constantish\",\n    \"meta\": \"data.table\",\n    \"value\": \"is_constantish\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_gzip\",\n    \"meta\": \"data.table\",\n    \"value\": \"is_gzip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_na\",\n    \"meta\": \"data.table\",\n    \"value\": \"is_na\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_utc\",\n    \"meta\": \"data.table\",\n    \"value\": \"is_utc\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_zip\",\n    \"meta\": \"data.table\",\n    \"value\": \"is_zip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.AsIs\",\n    \"meta\": \"data.table\",\n    \"value\": \"is.AsIs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"is.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.ff\",\n    \"meta\": \"data.table\",\n    \"value\": \"is.ff\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.N\",\n    \"meta\": \"data.table\",\n    \"value\": \"is.N\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.na.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"is.na.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.sorted\",\n    \"meta\": \"data.table\",\n    \"value\": \"is.sorted\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"isoweek\",\n    \"meta\": \"data.table\",\n    \"value\": \"isoweek\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"isReallyReal\",\n    \"meta\": \"data.table\",\n    \"value\": \"isReallyReal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"isRealReallyInt\",\n    \"meta\": \"data.table\",\n    \"value\": \"isRealReallyInt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"isTRUEorFALSE\",\n    \"meta\": \"data.table\",\n    \"value\": \"isTRUEorFALSE\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"isTRUEorNA\",\n    \"meta\": \"data.table\",\n    \"value\": \"isTRUEorNA\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"key\",\n    \"meta\": \"data.table\",\n    \"value\": \"key\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"key<-\",\n    \"meta\": \"data.table\",\n    \"value\": \"key<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"let\",\n    \"meta\": \"data.table\",\n    \"value\": \"let\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"like\",\n    \"meta\": \"data.table\",\n    \"value\": \"like\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list2lang\",\n    \"meta\": \"data.table\",\n    \"value\": \"list2lang\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"max.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"max.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"maybe_reset_index\",\n    \"meta\": \"data.table\",\n    \"value\": \"maybe_reset_index\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mday\",\n    \"meta\": \"data.table\",\n    \"value\": \"mday\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mean.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"mean.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mean.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"mean.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"measure\",\n    \"meta\": \"data.table\",\n    \"value\": \"measure\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"measurev\",\n    \"meta\": \"data.table\",\n    \"value\": \"measurev\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt\",\n    \"meta\": \"data.table\",\n    \"value\": \"melt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"melt.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"melt.default\",\n    \"meta\": \"data.table\",\n    \"value\": \"melt.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"merge.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"merge.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"messagef\",\n    \"meta\": \"data.table\",\n    \"value\": \"messagef\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"min.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"min.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"minute\",\n    \"meta\": \"data.table\",\n    \"value\": \"minute\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"month\",\n    \"meta\": \"data.table\",\n    \"value\": \"month\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"more\",\n    \"meta\": \"data.table\",\n    \"value\": \"more\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"na.omit.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"na.omit.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nafill\",\n    \"meta\": \"data.table\",\n    \"value\": \"nafill\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"name_dots\",\n    \"meta\": \"data.table\",\n    \"value\": \"name_dots\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"names<-.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"names<-.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nan_is_na\",\n    \"meta\": \"data.table\",\n    \"value\": \"nan_is_na\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"null.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"null.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"only.list\",\n    \"meta\": \"data.table\",\n    \"value\": \"only.list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"Ops.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"Ops.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"packageStartupMessagef\",\n    \"meta\": \"data.table\",\n    \"value\": \"packageStartupMessagef\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"paste_dims\",\n    \"meta\": \"data.table\",\n    \"value\": \"paste_dims\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"patterns\",\n    \"meta\": \"data.table\",\n    \"value\": \"patterns\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"print.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"print.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quarter\",\n    \"meta\": \"data.table\",\n    \"value\": \"quarter\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"raise_condition\",\n    \"meta\": \"data.table\",\n    \"value\": \"raise_condition\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rbind.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"rbind.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rbindlist\",\n    \"meta\": \"data.table\",\n    \"value\": \"rbindlist\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rep.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"rep.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rep.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"rep.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"replace_dot_alias\",\n    \"meta\": \"data.table\",\n    \"value\": \"replace_dot_alias\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"require_bit64_if_needed\",\n    \"meta\": \"data.table\",\n    \"value\": \"require_bit64_if_needed\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rleid\",\n    \"meta\": \"data.table\",\n    \"value\": \"rleid\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rleidv\",\n    \"meta\": \"data.table\",\n    \"value\": \"rleidv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rm.AsIs\",\n    \"meta\": \"data.table\",\n    \"value\": \"rm.AsIs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rollup\",\n    \"meta\": \"data.table\",\n    \"value\": \"rollup\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rollup.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"rollup.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"root_name\",\n    \"meta\": \"data.table\",\n    \"value\": \"root_name\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"round.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"round.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"round.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"round.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rowid\",\n    \"meta\": \"data.table\",\n    \"value\": \"rowid\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rowidv\",\n    \"meta\": \"data.table\",\n    \"value\": \"rowidv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rss\",\n    \"meta\": \"data.table\",\n    \"value\": \"rss\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"safe_rep_len\",\n    \"meta\": \"data.table\",\n    \"value\": \"safe_rep_len\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"second\",\n    \"meta\": \"data.table\",\n    \"value\": \"second\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"selfrefok\",\n    \"meta\": \"data.table\",\n    \"value\": \"selfrefok\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seq.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"seq.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seq.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"seq.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"set\",\n    \"meta\": \"data.table\",\n    \"value\": \"set\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setalloccol\",\n    \"meta\": \"data.table\",\n    \"value\": \"setalloccol\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setattr\",\n    \"meta\": \"data.table\",\n    \"value\": \"setattr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setcoalesce\",\n    \"meta\": \"data.table\",\n    \"value\": \"setcoalesce\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setcolorder\",\n    \"meta\": \"data.table\",\n    \"value\": \"setcolorder\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setDF\",\n    \"meta\": \"data.table\",\n    \"value\": \"setDF\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setdiff_\",\n    \"meta\": \"data.table\",\n    \"value\": \"setdiff_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setdroplevels\",\n    \"meta\": \"data.table\",\n    \"value\": \"setdroplevels\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setDT\",\n    \"meta\": \"data.table\",\n    \"value\": \"setDT\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setDTthreads\",\n    \"meta\": \"data.table\",\n    \"value\": \"setDTthreads\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setindex\",\n    \"meta\": \"data.table\",\n    \"value\": \"setindex\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setindexv\",\n    \"meta\": \"data.table\",\n    \"value\": \"setindexv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setkey\",\n    \"meta\": \"data.table\",\n    \"value\": \"setkey\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setkeyv\",\n    \"meta\": \"data.table\",\n    \"value\": \"setkeyv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setnafill\",\n    \"meta\": \"data.table\",\n    \"value\": \"setnafill\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setnames\",\n    \"meta\": \"data.table\",\n    \"value\": \"setnames\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setNumericRounding\",\n    \"meta\": \"data.table\",\n    \"value\": \"setNumericRounding\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setorder\",\n    \"meta\": \"data.table\",\n    \"value\": \"setorder\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setorderv\",\n    \"meta\": \"data.table\",\n    \"value\": \"setorderv\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setreordervec\",\n    \"meta\": \"data.table\",\n    \"value\": \"setreordervec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"shallow\",\n    \"meta\": \"data.table\",\n    \"value\": \"shallow\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"shouldPrint\",\n    \"meta\": \"data.table\",\n    \"value\": \"shouldPrint\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"SJ\",\n    \"meta\": \"data.table\",\n    \"value\": \"SJ\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"split_deparsing\",\n    \"meta\": \"data.table\",\n    \"value\": \"split_deparsing\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"split.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"split.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"startsWithAny\",\n    \"meta\": \"data.table\",\n    \"value\": \"startsWithAny\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stopf\",\n    \"meta\": \"data.table\",\n    \"value\": \"stopf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"subset.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"subset.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"substitute2\",\n    \"meta\": \"data.table\",\n    \"value\": \"substitute2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tables\",\n    \"meta\": \"data.table\",\n    \"value\": \"tables\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tail.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"tail.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"test\",\n    \"meta\": \"data.table\",\n    \"value\": \"test\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"test.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"test.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"testMsg\",\n    \"meta\": \"data.table\",\n    \"value\": \"testMsg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"timetaken\",\n    \"meta\": \"data.table\",\n    \"value\": \"timetaken\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"toprint_subset\",\n    \"meta\": \"data.table\",\n    \"value\": \"toprint_subset\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transform.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"transform.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"truelength\",\n    \"meta\": \"data.table\",\n    \"value\": \"truelength\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"trunc_cols_message\",\n    \"meta\": \"data.table\",\n    \"value\": \"trunc_cols_message\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"trunc.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"trunc.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tstrsplit\",\n    \"meta\": \"data.table\",\n    \"value\": \"tstrsplit\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"type_size\",\n    \"meta\": \"data.table\",\n    \"value\": \"type_size\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"uniqlengths\",\n    \"meta\": \"data.table\",\n    \"value\": \"uniqlengths\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"uniqlist\",\n    \"meta\": \"data.table\",\n    \"value\": \"uniqlist\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unique.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"unique.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unique.IDate\",\n    \"meta\": \"data.table\",\n    \"value\": \"unique.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unique.ITime\",\n    \"meta\": \"data.table\",\n    \"value\": \"unique.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"uniqueN\",\n    \"meta\": \"data.table\",\n    \"value\": \"uniqueN\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update_dev_pkg\",\n    \"meta\": \"data.table\",\n    \"value\": \"update_dev_pkg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"value_vars\",\n    \"meta\": \"data.table\",\n    \"value\": \"value_vars\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vapply_1b\",\n    \"meta\": \"data.table\",\n    \"value\": \"vapply_1b\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vapply_1c\",\n    \"meta\": \"data.table\",\n    \"value\": \"vapply_1c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vapply_1i\",\n    \"meta\": \"data.table\",\n    \"value\": \"vapply_1i\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vecseq\",\n    \"meta\": \"data.table\",\n    \"value\": \"vecseq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"warningf\",\n    \"meta\": \"data.table\",\n    \"value\": \"warningf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wday\",\n    \"meta\": \"data.table\",\n    \"value\": \"wday\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"week\",\n    \"meta\": \"data.table\",\n    \"value\": \"week\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"which_\",\n    \"meta\": \"data.table\",\n    \"value\": \"which_\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"which.first\",\n    \"meta\": \"data.table\",\n    \"value\": \"which.first\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"which.last\",\n    \"meta\": \"data.table\",\n    \"value\": \"which.last\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"within.data.table\",\n    \"meta\": \"data.table\",\n    \"value\": \"within.data.table\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"XOR\",\n    \"meta\": \"data.table\",\n    \"value\": \"XOR\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"yday\",\n    \"meta\": \"data.table\",\n    \"value\": \"yday\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"year\",\n    \"meta\": \"data.table\",\n    \"value\": \"year\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"yearmon\",\n    \"meta\": \"data.table\",\n    \"value\": \"yearmon\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"yearqtr\",\n    \"meta\": \"data.table\",\n    \"value\": \"yearqtr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%--%\",\n    \"meta\": \"lubridate\",\n    \"value\": \"%--%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%m-%\",\n    \"meta\": \"lubridate\",\n    \"value\": \"%m-%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%m+%\",\n    \"meta\": \"lubridate\",\n    \"value\": \"%m+%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"%within%\",\n    \"meta\": \"lubridate\",\n    \"value\": \"%within%\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_duration_to_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"add_duration_to_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_duration_to_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"add_duration_to_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_number_to_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"add_number_to_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_number_to_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"add_number_to_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_period_to_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"add_period_to_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_period_to_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"add_period_to_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"add_with_rollback\",\n    \"meta\": \"lubridate\",\n    \"value\": \"add_with_rollback\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"adjust_estimate\",\n    \"meta\": \"lubridate\",\n    \"value\": \"adjust_estimate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"am\",\n    \"meta\": \"lubridate\",\n    \"value\": \"am\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_datetime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_difftime_from_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as_difftime_from_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_duration_from_difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as_duration_from_difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_month\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as_month\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_POSIXct\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as_POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as_week_start\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as_week_start\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.list.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.list.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXct.fts\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXct.fts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXct.irts\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXct.irts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXct.timeSeries\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXct.timeSeries\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXct.xts\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXct.xts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXct.zoo\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXct.zoo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXlt.fts\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXlt.fts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXlt.irts\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXlt.irts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXlt.timeSeries\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXlt.timeSeries\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXlt.tis\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXlt.tis\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXlt.xts\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXlt.xts\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXlt.zoo\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXlt.zoo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXt\",\n    \"meta\": \"lubridate\",\n    \"value\": \"as.POSIXt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.Date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"c.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"c.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"c.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"c.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.POSIXct\",\n    \"meta\": \"lubridate\",\n    \"value\": \"c.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c.POSIXlt\",\n    \"meta\": \"lubridate\",\n    \"value\": \"c.POSIXlt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ceil_to_posix\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ceil_to_posix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ceiling_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ceiling_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"check_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"check_interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"check_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_round_endpoints\",\n    \"meta\": \"lubridate\",\n    \"value\": \"check_round_endpoints\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"check_tzones\",\n    \"meta\": \"lubridate\",\n    \"value\": \"check_tzones\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"comp_posix_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"comp_posix_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"compute_estimate\",\n    \"meta\": \"lubridate\",\n    \"value\": \"compute_estimate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cyclic_encoding\",\n    \"meta\": \"lubridate\",\n    \"value\": \"cyclic_encoding\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"Date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date_decimal\",\n    \"meta\": \"lubridate\",\n    \"value\": \"date_decimal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date_to_posix\",\n    \"meta\": \"lubridate\",\n    \"value\": \"date_to_posix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"date.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"date.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"date<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"date<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"day\",\n    \"meta\": \"lubridate\",\n    \"value\": \"day\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"day<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"day<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"days\",\n    \"meta\": \"lubridate\",\n    \"value\": \"days\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"days_in_month\",\n    \"meta\": \"lubridate\",\n    \"value\": \"days_in_month\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"days_in_months_so_far\",\n    \"meta\": \"lubridate\",\n    \"value\": \"days_in_months_so_far\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ddays\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ddays\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"decimal_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"decimal_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"decimal_date.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"decimal_date.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"decimal_date.zoo\",\n    \"meta\": \"lubridate\",\n    \"value\": \"decimal_date.zoo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dhours\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dhours\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_difftime_by_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_difftime_by_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_duration_by_difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_duration_by_difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_duration_by_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_duration_by_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_duration_by_number\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_duration_by_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_interval_by_difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_interval_by_difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_interval_by_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_interval_by_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_interval_by_number\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_interval_by_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_interval_by_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_interval_by_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_period_by_number\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_period_by_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divide_period_by_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divide_period_by_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"divisible_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"divisible_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dmicroseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dmicroseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dmilliseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dmilliseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dminutes\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dminutes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dmonths\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dmonths\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dmy\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dmy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dmy_h\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dmy_h\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dmy_hm\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dmy_hm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dmy_hms\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dmy_hms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dnanoseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dnanoseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dpicoseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dpicoseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dst\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dst\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dst.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dst.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dweeks\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dweeks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dyears\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dyears\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"dym\",\n    \"meta\": \"lubridate\",\n    \"value\": \"dym\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"epiweek\",\n    \"meta\": \"lubridate\",\n    \"value\": \"epiweek\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"epiyear\",\n    \"meta\": \"lubridate\",\n    \"value\": \"epiyear\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fast_strptime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"fast_strptime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"fit_to_timeline\",\n    \"meta\": \"lubridate\",\n    \"value\": \"fit_to_timeline\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"floor_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"floor_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"floor_to_posix\",\n    \"meta\": \"lubridate\",\n    \"value\": \"floor_to_posix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"force_tz\",\n    \"meta\": \"lubridate\",\n    \"value\": \"force_tz\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"force_tz.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"force_tz.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"force_tzs\",\n    \"meta\": \"lubridate\",\n    \"value\": \"force_tzs\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_ISO8601\",\n    \"meta\": \"lubridate\",\n    \"value\": \"format_ISO8601\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format_ISO8601_precision_check\",\n    \"meta\": \"lubridate\",\n    \"value\": \"format_ISO8601_precision_check\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"format.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"format.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"format.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"format.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"guess_formats\",\n    \"meta\": \"lubridate\",\n    \"value\": \"guess_formats\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hm\",\n    \"meta\": \"lubridate\",\n    \"value\": \"hm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hms\",\n    \"meta\": \"lubridate\",\n    \"value\": \"hms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hour.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"hour.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hour.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"hour.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hour<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"hour<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hours\",\n    \"meta\": \"lubridate\",\n    \"value\": \"hours\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_aligns\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_aligns\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_diff\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_diff\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_end\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_end\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_end<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_end<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_flip\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_flip\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_length\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_overlaps\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_overlaps\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_shift\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_shift\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_standardize\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_standardize\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_start\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_start\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"int_start<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"int_start<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"intersect.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"intersect.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_verbose\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is_verbose\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is_zero_hms\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is_zero_hms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.Date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.instant\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.instant\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.POSIXct\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.POSIXlt\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.POSIXlt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.POSIXt\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.POSIXt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.timepoint\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.timepoint\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"is.timespan\",\n    \"meta\": \"lubridate\",\n    \"value\": \"is.timespan\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"isoyear\",\n    \"meta\": \"lubridate\",\n    \"value\": \"isoyear\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"leap_year\",\n    \"meta\": \"lubridate\",\n    \"value\": \"leap_year\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"local_time\",\n    \"meta\": \"lubridate\",\n    \"value\": \"local_time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"make_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_datetime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"make_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"make_difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"make_difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"match_lengths\",\n    \"meta\": \"lubridate\",\n    \"value\": \"match_lengths\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mday.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"mday.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mday.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"mday.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mday<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"mday<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mdy\",\n    \"meta\": \"lubridate\",\n    \"value\": \"mdy\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mdy_h\",\n    \"meta\": \"lubridate\",\n    \"value\": \"mdy_h\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mdy_hm\",\n    \"meta\": \"lubridate\",\n    \"value\": \"mdy_hm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mdy_hms\",\n    \"meta\": \"lubridate\",\n    \"value\": \"mdy_hms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"microseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"microseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"milliseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"milliseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"minute.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"minute.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"minute.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"minute.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"minute<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"minute<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"minutes\",\n    \"meta\": \"lubridate\",\n    \"value\": \"minutes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modulo_duration_by_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"modulo_duration_by_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modulo_interval_by_duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"modulo_interval_by_duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modulo_interval_by_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"modulo_interval_by_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"modulo_period_by_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"modulo_period_by_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"month.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"month.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"month.numeric\",\n    \"meta\": \"lubridate\",\n    \"value\": \"month.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"month.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"month.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"month<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"month<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"months.numeric\",\n    \"meta\": \"lubridate\",\n    \"value\": \"months.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ms\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"multiply_duration_by_number\",\n    \"meta\": \"lubridate\",\n    \"value\": \"multiply_duration_by_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"multiply_interval_by_number\",\n    \"meta\": \"lubridate\",\n    \"value\": \"multiply_interval_by_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"multiply_period_by_number\",\n    \"meta\": \"lubridate\",\n    \"value\": \"multiply_period_by_number\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"my\",\n    \"meta\": \"lubridate\",\n    \"value\": \"my\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"myd\",\n    \"meta\": \"lubridate\",\n    \"value\": \"myd\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"nanoseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"nanoseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"new_empty_interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"new_empty_interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"normalize_roll_dst\",\n    \"meta\": \"lubridate\",\n    \"value\": \"normalize_roll_dst\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"normalize_units_length\",\n    \"meta\": \"lubridate\",\n    \"value\": \"normalize_units_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"on_package_load\",\n    \"meta\": \"lubridate\",\n    \"value\": \"on_package_load\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_date_time\",\n    \"meta\": \"lubridate\",\n    \"value\": \"parse_date_time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_date_time2\",\n    \"meta\": \"lubridate\",\n    \"value\": \"parse_date_time2\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_dt\",\n    \"meta\": \"lubridate\",\n    \"value\": \"parse_dt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"parse_interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"parse_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"parse_period_unit\",\n    \"meta\": \"lubridate\",\n    \"value\": \"parse_period_unit\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"period_to_difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"period_to_difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"period_to_seconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"period_to_seconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"picoseconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"picoseconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pm\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_dates\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_dates\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_day\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_day\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_hour\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_hour\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_min\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_min\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_month\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_month\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_point\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_point\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_sec\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_sec\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_unit\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_unit\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"pretty_year\",\n    \"meta\": \"lubridate\",\n    \"value\": \"pretty_year\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"qday\",\n    \"meta\": \"lubridate\",\n    \"value\": \"qday\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"qday.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"qday.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"qday<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"qday<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date.chron\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date.chron\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date.Date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date.IDate\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date.IDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date.ITime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date.ITime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date.POSIXct\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date.POSIXct\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date.POSIXlt\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date.POSIXlt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date.ti\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date.ti\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_date.timeDate\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_date.timeDate\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"reclass_timespan\",\n    \"meta\": \"lubridate\",\n    \"value\": \"reclass_timespan\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rollback\",\n    \"meta\": \"lubridate\",\n    \"value\": \"rollback\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rollbackward\",\n    \"meta\": \"lubridate\",\n    \"value\": \"rollbackward\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rollforward\",\n    \"meta\": \"lubridate\",\n    \"value\": \"rollforward\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"round_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"round_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"second.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"second.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"second.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"second.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"second<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"second<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seconds\",\n    \"meta\": \"lubridate\",\n    \"value\": \"seconds\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seconds_to_period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"seconds_to_period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seconds_to_unit\",\n    \"meta\": \"lubridate\",\n    \"value\": \"seconds_to_unit\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"semester\",\n    \"meta\": \"lubridate\",\n    \"value\": \"semester\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"setdiff.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"setdiff.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stamp\",\n    \"meta\": \"lubridate\",\n    \"value\": \"stamp\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stamp_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"stamp_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stamp_time\",\n    \"meta\": \"lubridate\",\n    \"value\": \"stamp_time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_date_names\",\n    \"meta\": \"lubridate\",\n    \"value\": \"standardise_date_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_difftime_names\",\n    \"meta\": \"lubridate\",\n    \"value\": \"standardise_difftime_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_lt_names\",\n    \"meta\": \"lubridate\",\n    \"value\": \"standardise_lt_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"standardise_period_names\",\n    \"meta\": \"lubridate\",\n    \"value\": \"standardise_period_names\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_incompatible_classes\",\n    \"meta\": \"lubridate\",\n    \"value\": \"stop_incompatible_classes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"stop_incompatible_sizes\",\n    \"meta\": \"lubridate\",\n    \"value\": \"stop_incompatible_sizes\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"subtract_interval_from_date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"subtract_interval_from_date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summary.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"summary.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summary.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"summary.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summary.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"summary.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"time_length\",\n    \"meta\": \"lubridate\",\n    \"value\": \"time_length\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"today\",\n    \"meta\": \"lubridate\",\n    \"value\": \"today\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"trunc_divide\",\n    \"meta\": \"lubridate\",\n    \"value\": \"trunc_divide\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz_is_local\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz_is_local\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz_union\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz_union\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.character\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.character\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.Date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.logical\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.logical\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.POSIXt\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.POSIXt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.timeSeries\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.timeSeries\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.yearmon\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.yearmon\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.yearqtr\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.yearqtr\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.zoo\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.zoo\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz.zooreg\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz.zooreg\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tz<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tz<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tzdir_find\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tzdir_find\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tzdir_get\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tzdir_get\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tzdir_internal\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tzdir_internal\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tzdir_set\",\n    \"meta\": \"lubridate\",\n    \"value\": \"tzdir_set\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"union.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"union.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"unique.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"unique.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update_datetime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"update_datetime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update_posixt_old\",\n    \"meta\": \"lubridate\",\n    \"value\": \"update_posixt_old\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update.Date\",\n    \"meta\": \"lubridate\",\n    \"value\": \"update.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"update.POSIXt\",\n    \"meta\": \"lubridate\",\n    \"value\": \"update.POSIXt\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.difftime.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_cast.difftime.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.Duration.difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_cast.Duration.difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.Duration.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_cast.Duration.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.Interval.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_cast.Interval.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_cast.Period.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_cast.Period.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_proxy.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_proxy.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_proxy.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_proxy.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_proxy.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_proxy.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.difftime.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_ptype2.difftime.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.Duration.difftime\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_ptype2.Duration.difftime\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.Duration.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_ptype2.Duration.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.Interval.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_ptype2.Interval.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_ptype2.Period.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_ptype2.Period.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_restore.Duration\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_restore.Duration\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_restore.Interval\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_restore.Interval\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vec_restore.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"vec_restore.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wday.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"wday.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wday.numeric\",\n    \"meta\": \"lubridate\",\n    \"value\": \"wday.numeric\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"wday<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"wday<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"week<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"week<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"weeks\",\n    \"meta\": \"lubridate\",\n    \"value\": \"weeks\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_tz\",\n    \"meta\": \"lubridate\",\n    \"value\": \"with_tz\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with_tz.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"with_tz.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"xtfrm.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"xtfrm.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"yday.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"yday.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"yday<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"yday<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ydm\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ydm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ydm_h\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ydm_h\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ydm_hm\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ydm_hm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ydm_hms\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ydm_hms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"year.default\",\n    \"meta\": \"lubridate\",\n    \"value\": \"year.default\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"year.Period\",\n    \"meta\": \"lubridate\",\n    \"value\": \"year.Period\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"year<-\",\n    \"meta\": \"lubridate\",\n    \"value\": \"year<-\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"years\",\n    \"meta\": \"lubridate\",\n    \"value\": \"years\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ym\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ym\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ymd\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ymd\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ymd_h\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ymd_h\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ymd_hm\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ymd_hm\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"ymd_hms\",\n    \"meta\": \"lubridate\",\n    \"value\": \"ymd_hms\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"yq\",\n    \"meta\": \"lubridate\",\n    \"value\": \"yq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"c\",\n    \"meta\": \"base R\",\n    \"value\": \"c\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"list\",\n    \"meta\": \"base R\",\n    \"value\": \"list\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"data.frame\",\n    \"meta\": \"base R\",\n    \"value\": \"data.frame\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"matrix\",\n    \"meta\": \"base R\",\n    \"value\": \"matrix\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"vector\",\n    \"meta\": \"base R\",\n    \"value\": \"vector\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"seq\",\n    \"meta\": \"base R\",\n    \"value\": \"seq\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"rep\",\n    \"meta\": \"base R\",\n    \"value\": \"rep\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lapply\",\n    \"meta\": \"base R\",\n    \"value\": \"lapply\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sapply\",\n    \"meta\": \"base R\",\n    \"value\": \"sapply\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tapply\",\n    \"meta\": \"base R\",\n    \"value\": \"tapply\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"mean\",\n    \"meta\": \"base R\",\n    \"value\": \"mean\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sum\",\n    \"meta\": \"base R\",\n    \"value\": \"sum\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"min\",\n    \"meta\": \"base R\",\n    \"value\": \"min\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"max\",\n    \"meta\": \"base R\",\n    \"value\": \"max\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sd\",\n    \"meta\": \"base R\",\n    \"value\": \"sd\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"median\",\n    \"meta\": \"base R\",\n    \"value\": \"median\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"quantile\",\n    \"meta\": \"base R\",\n    \"value\": \"quantile\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"summary\",\n    \"meta\": \"base R\",\n    \"value\": \"summary\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"head\",\n    \"meta\": \"base R\",\n    \"value\": \"head\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"tail\",\n    \"meta\": \"base R\",\n    \"value\": \"tail\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"subset\",\n    \"meta\": \"base R\",\n    \"value\": \"subset\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"transform\",\n    \"meta\": \"base R\",\n    \"value\": \"transform\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"with\",\n    \"meta\": \"base R\",\n    \"value\": \"with\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"within\",\n    \"meta\": \"base R\",\n    \"value\": \"within\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"if\",\n    \"meta\": \"base R\",\n    \"value\": \"if\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"else\",\n    \"meta\": \"base R\",\n    \"value\": \"else\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"for\",\n    \"meta\": \"base R\",\n    \"value\": \"for\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"while\",\n    \"meta\": \"base R\",\n    \"value\": \"while\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"function\",\n    \"meta\": \"base R\",\n    \"value\": \"function\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"return\",\n    \"meta\": \"base R\",\n    \"value\": \"return\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"print\",\n    \"meta\": \"base R\",\n    \"value\": \"print\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"cat\",\n    \"meta\": \"base R\",\n    \"value\": \"cat\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"paste\",\n    \"meta\": \"base R\",\n    \"value\": \"paste\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"paste0\",\n    \"meta\": \"base R\",\n    \"value\": \"paste0\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"sprintf\",\n    \"meta\": \"base R\",\n    \"value\": \"sprintf\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"plot\",\n    \"meta\": \"base R\",\n    \"value\": \"plot\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"hist\",\n    \"meta\": \"base R\",\n    \"value\": \"hist\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"lines\",\n    \"meta\": \"base R\",\n    \"value\": \"lines\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"points\",\n    \"meta\": \"base R\",\n    \"value\": \"points\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"text\",\n    \"meta\": \"base R\",\n    \"value\": \"text\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"legend\",\n    \"meta\": \"base R\",\n    \"value\": \"legend\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"par\",\n    \"meta\": \"base R\",\n    \"value\": \"par\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"options\",\n    \"meta\": \"base R\",\n    \"value\": \"options\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"Sys.Date\",\n    \"meta\": \"base R\",\n    \"value\": \"Sys.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"Sys.time\",\n    \"meta\": \"base R\",\n    \"value\": \"Sys.time\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.Date\",\n    \"meta\": \"base R\",\n    \"value\": \"as.Date\",\n    \"score\": 100\n  },\n  {\n    \"name\": \"as.POSIXct\",\n    \"meta\": \"base R\",\n    \"value\": \"as.POSIXct\",\n    \"score\": 100\n  }\n]\n","type":"text"},{"name":"module_data_combiner_server.R","content":"server_data_combiner <- function(id, list_of_importer_df_reactives) {\r\n  moduleServer(id, function(input, output, session) {\r\n    \r\n    # Reactive values for filtering\r\n    filter_applied <- reactiveVal(FALSE)\r\n    filtered_data <- reactiveVal(NULL)\r\n    \r\n    combined_data_from_all_importers <- reactive({\r\n      \r\n      get_valid_df <- function(df_reactive_fn) {\r\n        if (is.function(df_reactive_fn)) {\r\n          df <- df_reactive_fn() # Call the reactive function\r\n          if (!is.null(df) && (is.data.frame(df) || is.data.table(df)) && nrow(df) > 0) {\r\n            return(as.data.table(df)) # Ensure it's a data.table\r\n          }\r\n        }\r\n        return(NULL)\r\n      }\r\n\r\n      # Get the current list of reactive functions\r\n      # list_of_importer_df_reactives can be either a reactive or a static list\r\n      current_reactives <- if (is.function(list_of_importer_df_reactives)) {\r\n        list_of_importer_df_reactives() # Call the reactive to get the list\r\n      } else {\r\n        list_of_importer_df_reactives # Use the static list directly\r\n      }\r\n      \r\n      # Handle empty list case\r\n      if (length(current_reactives) == 0) {\r\n        return(NULL)\r\n      }\r\n\r\n      # Evaluate each reactive in the list\r\n      evaluated_dfs_list <- lapply(current_reactives, get_valid_df)\r\n      \r\n      # Assign names based on the position in the original list (e.g., \"importer_1\", \"importer_2\")\r\n      # These names will be used for the 'idcol' if they are preserved through Filter.\r\n      # Use existing names if available, otherwise create default names\r\n      if (is.null(names(current_reactives))) {\r\n        names(evaluated_dfs_list) <- paste0(\"importer_\", seq_along(evaluated_dfs_list))\r\n      } else {\r\n        names(evaluated_dfs_list) <- names(current_reactives)\r\n      }\r\n      \r\n      # Filter out any NULLs that resulted from importers with no data or errors\r\n      valid_dfs_to_combine <- Filter(Negate(is.null), evaluated_dfs_list)\r\n\r\n      if (length(valid_dfs_to_combine) > 0) {\r\n        # rbindlist will use the names of the list elements for the idcol\r\n        tryCatch({\r\n          # Ensure all data.tables have consistent column types\r\n          valid_dfs_to_combine <- lapply(valid_dfs_to_combine, function(dt) {\r\n            # Convert to data.table if not already\r\n            dt <- as.data.table(dt)\r\n            \r\n            # Ensure consistent column types for common columns\r\n            if (\"timestamp\" %in% names(dt)) {\r\n              dt$timestamp <- as.POSIXct(dt$timestamp)\r\n            }\r\n            if (\"value\" %in% names(dt)) {\r\n              dt$value <- as.numeric(dt$value)\r\n            }\r\n            if (\"series\" %in% names(dt)) {\r\n              dt$series <- as.character(dt$series)\r\n            }\r\n            if (\"file_name_source\" %in% names(dt)) {\r\n              dt$file_name_source <- as.character(dt$file_name_source)\r\n            }\r\n            \r\n            return(dt)\r\n          })\r\n          \r\n          combined_df <- data.table::rbindlist(\r\n            valid_dfs_to_combine, \r\n            use.names = TRUE, \r\n            fill = TRUE, \r\n            idcol = \"source_importer_id\"\r\n          )\r\n          \r\n          # Apply filters if they are active\r\n          if (filter_applied()) {\r\n            return(filtered_data())\r\n          } else {\r\n            return(combined_df)\r\n          }\r\n          \r\n        }, error = function(e) {\r\n          warning(\"Error in rbindlist: \", e$message, \". Trying with ignore.attr=TRUE\")\r\n          # Fallback: try with ignore.attr=TRUE to handle class mismatches\r\n          tryCatch({\r\n            combined_df <- data.table::rbindlist(\r\n              valid_dfs_to_combine, \r\n              use.names = TRUE, \r\n              fill = TRUE, \r\n              idcol = \"source_importer_id\",\r\n              ignore.attr = TRUE  # This handles class attribute mismatches\r\n            )\r\n            \r\n            if (filter_applied()) {\r\n              return(filtered_data())\r\n            } else {\r\n              return(combined_df)\r\n            }\r\n          }, error = function(e2) {\r\n            warning(\"Even fallback rbindlist failed: \", e2$message)\r\n            return(NULL)\r\n          })\r\n        })\r\n      } else {\r\n        NULL # Or return an empty data.table: data.table()\r\n      }\r\n    })\r\n    \r\n    # Update source filter checkboxes when combined data changes\r\n    observe({\r\n      base_data <- combined_data_from_all_importers()\r\n      \r\n      if (!is.null(base_data) && nrow(base_data) > 0 && 'source_importer_id' %in% names(base_data)) {\r\n        # Get unique source IDs\r\n        unique_sources <- unique(base_data$source_importer_id)\r\n        \r\n        if (length(unique_sources) > 0) {\r\n          # Create mapping from module IDs to friendly names\r\n          source_labels <- sapply(unique_sources, function(source_id) {\r\n            # Convert data_import_module_1 to \"Data Import 1\"\r\n            if (grepl(\"^data_import_module_\", source_id)) {\r\n              tab_number <- gsub(\"data_import_module_\", \"\", source_id)\r\n              paste(\"Data Import\", tab_number)\r\n            } else if (grepl(\"^importer_\", source_id)) {\r\n              tab_number <- gsub(\"importer_\", \"\", source_id)\r\n              paste(\"Importer\", tab_number)\r\n            } else {\r\n              # Fallback for other naming patterns\r\n              source_id\r\n            }\r\n          })\r\n          \r\n          # Generate checkboxes\r\n          checkbox_list <- lapply(seq_along(unique_sources), function(i) {\r\n            source_id <- unique_sources[i]\r\n            label <- source_labels[i]\r\n            \r\n            div(class = \"form-check form-check-inline\",\r\n              tags$input(\r\n                type = \"checkbox\",\r\n                class = \"form-check-input\",\r\n                id = session$ns(paste0(\"source_\", source_id)),\r\n                value = source_id,\r\n                checked = \"checked\" # Default to all sources selected\r\n              ),\r\n              tags$label(\r\n                class = \"form-check-label small\",\r\n                `for` = session$ns(paste0(\"source_\", source_id)),\r\n                label\r\n              )\r\n            )\r\n          })\r\n          \r\n          # Update the UI\r\n          output$source_filter_checkboxes <- renderUI({\r\n            tagList(checkbox_list)\r\n          })\r\n        }\r\n      } else {\r\n        # No data available\r\n        output$source_filter_checkboxes <- renderUI({\r\n          p(class = \"text-muted small\", \"No data sources available yet\")\r\n        })\r\n      }\r\n    })\r\n    \r\n    # Apply filters to combined data\r\n    observeEvent(input$apply_combiner_filters, {\r\n      base_data <- combined_data_from_all_importers()\r\n      \r\n      if (is.null(base_data)) {\r\n        showNotification(\"No data available to filter\", type = \"warning\")\r\n        return()\r\n      }\r\n      \r\n      filtered_df <- data.table::copy(base_data)\r\n      \r\n      tryCatch({\r\n        # Apply source filtering using checkboxes\r\n        if ('source_importer_id' %in% names(filtered_df)) {\r\n          # Get all unique sources\r\n          unique_sources <- unique(filtered_df$source_importer_id)\r\n          \r\n          # Check which sources are selected\r\n          selected_sources <- c()\r\n          for (source_id in unique_sources) {\r\n            checkbox_id <- paste0(\"source_\", source_id)\r\n            if (!is.null(input[[checkbox_id]]) && input[[checkbox_id]]) {\r\n              selected_sources <- c(selected_sources, source_id)\r\n            }\r\n          }\r\n          \r\n          # Filter data by selected sources\r\n          if (length(selected_sources) > 0) {\r\n            filtered_df <- filtered_df[source_importer_id %in% selected_sources]\r\n          } else {\r\n            # If no sources selected, show warning and use all data\r\n            showNotification(\"No sources selected - using all data\", type = \"warning\")\r\n          }\r\n        }\r\n        \r\n        # Apply series filtering - Include Series\r\n        if (!is.null(input$combiner_filter_in_series) && input$combiner_filter_in_series != \"\" && \"series\" %in% names(filtered_df)) {\r\n          filtered_df <- filter_in(filtered_df, 'series', input$combiner_filter_in_series)\r\n        }\r\n        \r\n        # Apply series filtering - Exclude Series\r\n        if (!is.null(input$combiner_filter_out_series) && input$combiner_filter_out_series != \"\" && \"series\" %in% names(filtered_df)) {\r\n          filtered_df <- filter_out(filtered_df, 'series', input$combiner_filter_out_series)\r\n        }\r\n        \r\n        # Apply file filtering - Include Files\r\n        if (!is.null(input$combiner_filter_in_files) && input$combiner_filter_in_files != \"\" && \"file_name_source\" %in% names(filtered_df)) {\r\n          filtered_df <- filter_in(filtered_df, 'file_name_source', input$combiner_filter_in_files)\r\n        }\r\n        \r\n        # Apply file filtering - Exclude Files\r\n        if (!is.null(input$combiner_filter_out_files) && input$combiner_filter_out_files != \"\" && \"file_name_source\" %in% names(filtered_df)) {\r\n          filtered_df <- filter_out(filtered_df, 'file_name_source', input$combiner_filter_out_files)\r\n        }\r\n        \r\n        # Apply timestamp filtering\r\n        if ('timestamp' %in% names(filtered_df)) {\r\n          # Start time filtering\r\n          if (!is.null(input$combiner_filter_start_enabled) && input$combiner_filter_start_enabled) {\r\n            if (!is.null(input$combiner_filter_start_date) && !is.null(input$combiner_filter_start_time)) {\r\n              start_datetime <- as.POSIXct(paste(\r\n                as.character(input$combiner_filter_start_date), \r\n                format(input$combiner_filter_start_time, '%H:%M:%S')\r\n              ))\r\n              \r\n              if (!is.na(start_datetime)) {\r\n                filtered_df <- filtered_df[timestamp >= start_datetime]\r\n              }\r\n            }\r\n          }\r\n          \r\n          # End time filtering\r\n          if (!is.null(input$combiner_filter_end_enabled) && input$combiner_filter_end_enabled) {\r\n            if (!is.null(input$combiner_filter_end_date) && !is.null(input$combiner_filter_end_time)) {\r\n              end_datetime <- as.POSIXct(paste(\r\n                as.character(input$combiner_filter_end_date), \r\n                format(input$combiner_filter_end_time, '%H:%M:%S')\r\n              ))\r\n              \r\n              if (!is.na(end_datetime)) {\r\n                filtered_df <- filtered_df[timestamp <= end_datetime]\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        filtered_data(filtered_df)\r\n        filter_applied(TRUE)\r\n        \r\n        showNotification(paste(\"Filters applied. Showing\", nrow(filtered_df), \"of\", nrow(base_data), \"rows\"), type = \"message\")\r\n        \r\n      }, error = function(e) {\r\n        showNotification(paste(\"Filter error:\", e$message), type = \"error\")\r\n        return()\r\n      })\r\n    })\r\n    \r\n    # Clear filters\r\n    observeEvent(input$clear_combiner_filters, {\r\n      filter_applied(FALSE)\r\n      filtered_data(NULL)\r\n      \r\n      # Clear input fields\r\n      updateTextInput(session, \"combiner_filter_in_series\", value = \"\")\r\n      updateTextInput(session, \"combiner_filter_out_series\", value = \"\")\r\n      updateTextInput(session, \"combiner_filter_in_files\", value = \"\")\r\n      updateTextInput(session, \"combiner_filter_out_files\", value = \"\")\r\n      \r\n      # Clear timestamp filtering\r\n      updateCheckboxInput(session, \"combiner_filter_start_enabled\", value = FALSE)\r\n      updateCheckboxInput(session, \"combiner_filter_end_enabled\", value = FALSE)\r\n      updateDateInput(session, \"combiner_filter_start_date\", value = Sys.Date())\r\n      updateDateInput(session, \"combiner_filter_end_date\", value = Sys.Date())\r\n      \r\n      # Reset all source checkboxes to checked\r\n      base_data <- combined_data_from_all_importers()\r\n      if (!is.null(base_data) && 'source_importer_id' %in% names(base_data)) {\r\n        unique_sources <- unique(base_data$source_importer_id)\r\n        for (source_id in unique_sources) {\r\n          checkbox_id <- paste0(\"source_\", source_id)\r\n          updateCheckboxInput(session, checkbox_id, value = TRUE)\r\n        }\r\n      }\r\n      \r\n      showNotification(\"Filters cleared - showing all data\", type = \"message\")\r\n    })\r\n    \r\n    # Clear all data\r\n    observeEvent(input$clear_combined_data, {\r\n      # This is a more complex operation that would need to clear data from all importers\r\n      # For now, we'll show a confirmation and clear filters\r\n      showModal(modalDialog(\r\n        title = \"Clear All Data\",\r\n        \"This will clear all processed data from all import modules. Are you sure?\",\r\n        footer = tagList(\r\n          modalButton(\"Cancel\"),\r\n          actionButton(\"confirm_clear_data\", \"Yes, Clear All\", class = \"btn-danger\")\r\n        )\r\n      ))\r\n    })\r\n    \r\n    # Status display\r\n    output$combiner_status <- renderText({\r\n      data <- combined_data_from_all_importers()\r\n      \r\n      if (is.null(data)) {\r\n        \"Status: No data available\"\r\n      } else {\r\n        total_rows <- nrow(data)\r\n        unique_sources <- length(unique(data$source_importer_id))\r\n        unique_files <- if (\"file_name_source\" %in% names(data)) {\r\n          length(unique(data$file_name_source))\r\n        } else {\r\n          \"N/A\"\r\n        }\r\n        \r\n        filter_status <- if (filter_applied()) \"Filtered\" else \"All data\"\r\n        \r\n        paste0(\r\n          \"Status: \", filter_status, \"\\n\",\r\n          \"Rows: \", format(total_rows, big.mark = \",\"), \"\\n\",\r\n          \"Sources: \", unique_sources, \"\\n\",\r\n          \"Files: \", unique_files\r\n        )\r\n      }\r\n    })\r\n\r\n    server_data_table_display(\r\n      \"combined_data_sample\",\r\n      reactive(combined_data_from_all_importers())\r\n    )\r\n    server_data_table_display(\r\n      \"combined_data_summary\",\r\n      reactive(combined_data_from_all_importers())\r\n    )\r\n    \r\n    # Additional data table displays for new tabs\r\n    server_data_table_display(\r\n      \"combined_data_file_info\",\r\n      reactive(combined_data_from_all_importers())\r\n    )\r\n    server_data_table_display(\r\n      \"combined_data_quality\",\r\n      reactive(combined_data_from_all_importers())\r\n    )\r\n    server_data_table_display(\r\n      \"combined_data_columns\",\r\n      reactive(combined_data_from_all_importers())\r\n    )\r\n    server_data_table_display(\r\n      \"combined_data_log\",\r\n      reactive(combined_data_from_all_importers())\r\n    )\r\n\r\n    list(\r\n      df = reactive(combined_data_from_all_importers())\r\n    )\r\n  })\r\n}","type":"text"},{"name":"module_data_combiner_ui.R","content":"ui_data_combiner <- function(id) {\n  ns <- NS(id)\n  div(class = \"module-container\",\n    layout_sidebar(\n      sidebar = sidebar(\n        title = \"Combined Data Info\",\n        position = \"left\",\n        width = 350,\n        div(class = \"text-center\",\n          icon(\"database\", class = \"fa-2x text-primary mb-2\"),\n          h5(\"Combined Data\", class = \"mb-3\"),\n          p(class = \"text-muted small\", \n            \"Automatically combines processed data from all active Data Import tabs.\"\n          ),\n          p(class = \"text-muted small\",\n            \"Data updates in real-time when import tabs finish processing.\"\n          )\n        ),\n        \n        # Filtering Controls\n        div(class = \"mb-3\",\n          h6(\"Data Filtering\", class = \"text-muted mb-2\"),\n          textInput(\n            ns(\"combiner_filter_in_series\"),\n            \"Include Series (regex)\",\n            placeholder = \"e.g., temp.*|pressure\",\n            width = \"100%\"\n          ) |> tooltip(\"Regex pattern to include only matching series\"),\n          \n          textInput(\n            ns(\"combiner_filter_out_series\"),\n            \"Exclude Series (regex)\", \n            placeholder = \"e.g., debug|test\",\n            width = \"100%\"\n          ) |> tooltip(\"Regex pattern to exclude matching series\"),\n          \n          textInput(\n            ns(\"combiner_filter_in_files\"),\n            \"Include Files (regex)\",\n            placeholder = \"e.g., experiment.*\\\\.csv\",\n            width = \"100%\"\n          ) |> tooltip(\"Regex pattern to include only matching files\"),\n          \n          textInput(\n            ns(\"combiner_filter_out_files\"),\n            \"Exclude Files (regex)\", \n            placeholder = \"e.g., debug.*|test.*\",\n            width = \"100%\"\n          ) |> tooltip(\"Regex pattern to exclude matching files\"),\n          \n          div(class = \"row g-1 mt-2\",\n            div(class = \"col-6\",\n              actionButton(\n                ns(\"apply_combiner_filters\"),\n                \"Apply Filters\",\n                class = \"btn-primary btn-sm w-100\",\n                icon = icon(\"filter\")\n              )\n            ),\n            div(class = \"col-6\", \n              actionButton(\n                ns(\"clear_combiner_filters\"),\n                \"Clear Filters\",\n                class = \"btn-outline-secondary btn-sm w-100\",\n                icon = icon(\"eraser\")\n              )\n            )\n          )\n        ),\n        \n        # Source Selection\n        div(class = \"mb-3\",\n          h6(\"Source Selection\", class = \"text-muted mb-2\"),\n          uiOutput(ns(\"source_filter_checkboxes\"))\n        ),\n        \n        # Time Range Filtering\n        div(class = \"mb-3\",\n          h6(\"Time Range Filtering\", class = \"text-muted mb-2\"),\n          \n          # Start Time Filtering\n          checkboxInput(\n            ns(\"combiner_filter_start_enabled\"),\n            \"Enable Start Time Filter\",\n            value = FALSE\n          ),\n          \n          conditionalPanel(\n            condition = paste0(\"input['\", ns(\"combiner_filter_start_enabled\"), \"']\"),\n            dateInput(\n              ns(\"combiner_filter_start_date\"),\n              \"Start Date\",\n              width = \"100%\"\n            ),\n            timeInput(\n              ns(\"combiner_filter_start_time\"),\n              \"Start Time\",\n              value = strptime(\"00:00:00\", \"%T\")\n            )\n          ),\n          \n          # End Time Filtering\n          div(class = \"mt-2\",\n            checkboxInput(\n              ns(\"combiner_filter_end_enabled\"),\n              \"Enable End Time Filter\",\n              value = FALSE\n            ),\n            \n            conditionalPanel(\n              condition = paste0(\"input['\", ns(\"combiner_filter_end_enabled\"), \"']\"),\n              dateInput(\n                ns(\"combiner_filter_end_date\"),\n                \"End Date\",\n                width = \"100%\"\n              ),\n              timeInput(\n                ns(\"combiner_filter_end_time\"),\n                \"End Time\",\n                value = strptime(\"23:59:59\", \"%T\")\n              )\n            )\n          )\n        ),\n        \n        # Data Management\n        div(class = \"mb-3\",\n          h6(\"Data Management\", class = \"text-muted mb-2\"),\n          actionButton(\n            \"clear_combined_data\",\n            \"Clear All Data\",\n            class = \"btn-danger btn-sm w-100\",\n            icon = icon(\"trash\")\n          ) |> tooltip(\"Remove all data from importers and clear combined dataset\"),\n          \n          div(class = \"mt-2\",\n            verbatimTextOutput(\"combiner_status\", placeholder = TRUE)\n          )\n        )\n      ),\n      navset_card_pill(\n        nav_panel(\n          \"Summary\",\n          icon = icon(\"chart-bar\"),\n          ui_data_table_display(\n            ns(\"combined_data_summary\"),\n            r_code_on_df = if (exists(\"r_code_combined_data_summary\")) r_code_combined_data_summary else \"# Default summary code\\nif (is.null(df) || nrow(df) == 0) {\\n  data.frame(Message = 'No data available') |> \\n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\\n} else {\\n  summary_df <- df[, .(\\n    Records = .N,\\n    Min_Value = min(value, na.rm = TRUE),\\n    Max_Value = max(value, na.rm = TRUE),\\n    Mean_Value = mean(value, na.rm = TRUE)\\n  ), by = .(Series = series)]\\n  \\n  datatable(summary_df, \\n    options = list(scrollX = TRUE, pageLength = 15), \\n    rownames = FALSE, class = 'compact stripe'\\n  )\\n}\"\n          )\n        ),\n        nav_panel(\n          \"Sample Data\",\n          icon = icon(\"table\"),\n          ui_data_table_display(\n            ns(\"combined_data_sample\"),\n            r_code_on_df = if (exists(\"r_code_combined_data_sample\")) r_code_combined_data_sample else \"# Default sample code\\nif (is.null(df) || nrow(df) == 0) {\\n  data.frame(Message = 'No data available') |> \\n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\\n} else {\\n  sample_df <- head(df, 100)\\n  datatable(sample_df, \\n    options = list(scrollX = TRUE, pageLength = 10), \\n    rownames = FALSE, class = 'compact stripe'\\n  )\\n}\"\n          )\n        ),\n        nav_panel(\n          \"File Info\",\n          icon = icon(\"file-alt\"),\n          ui_data_table_display(\n            ns(\"combined_data_file_info\"),\n            r_code_on_df = \"\n# File information summary\nif (is.null(df) || nrow(df) == 0) {\n  data.frame(Message = 'No data available') |> \n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\n} else {\n  file_info <- df[, .(\n    Records = .N,\n    Date_Range = paste(\n      format(min(timestamp, na.rm = TRUE), '%Y-%m-%d %H:%M'),\n      'to',\n      format(max(timestamp, na.rm = TRUE), '%Y-%m-%d %H:%M')\n    ),\n    Unique_Series = length(unique(series)),\n    Processing_Source = paste(unique(source_importer_id), collapse = ', ')\n  ), by = .(File = file_name_source)][order(-Records)]\n  \n  datatable(file_info, \n    options = list(scrollX = TRUE, pageLength = 15, searching = TRUE), \n    rownames = FALSE, filter='top', class='compact stripe'\n  )\n}\n            \"\n          )\n        ),\n        nav_panel(\n          \"Data Quality\",\n          icon = icon(\"check-circle\"),\n          ui_data_table_display(\n            ns(\"combined_data_quality\"),\n            r_code_on_df = \"\n# Data quality metrics\nif (is.null(df) || nrow(df) == 0) {\n  data.frame(Message = 'No data available') |> \n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\n} else {\n  quality_metrics <- df[, .(\n    Total_Points = .N,\n    Missing_Values = sum(is.na(value)),\n    Missing_Percent = round(sum(is.na(value)) / .N * 100, 2),\n    Zero_Values = sum(value == 0, na.rm = TRUE),\n    Negative_Values = sum(value < 0, na.rm = TRUE),\n    Min_Value = round(min(value, na.rm = TRUE), 4),\n    Max_Value = round(max(value, na.rm = TRUE), 4),\n    Has_Duplicates = any(duplicated(timestamp))\n  ), by = .(Series = series)][order(-Total_Points)]\n  \n  datatable(quality_metrics, \n    options = list(scrollX = TRUE, pageLength = 15, searching = TRUE), \n    rownames = FALSE, filter='top', class='compact stripe'\n  ) |> formatStyle('Missing_Percent', \n    backgroundColor = styleInterval(c(5, 20), c('lightgreen', 'yellow', 'lightcoral'))\n  )\n}\n            \"\n          )\n        ),\n        nav_panel(\n          \"Columns\",\n          icon = icon(\"columns\"),\n          ui_data_table_display(\n            ns(\"combined_data_columns\"),\n            r_code_on_df = \"\n# Column information\nif (is.null(df) || nrow(df) == 0) {\n  data.frame(Message = 'No data available') |> \n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\n} else {\n  col_info <- data.frame(\n    Column = names(df),\n    Type = sapply(df, function(x) class(x)[1]),\n    Sample_Values = sapply(df, function(x) {\n      if (is.numeric(x)) {\n        paste(round(head(x[!is.na(x)], 3), 3), collapse = ', ')\n      } else {\n        paste(head(x[!is.na(x)], 3), collapse = ', ')\n      }\n    }),\n    Missing_Count = sapply(df, function(x) sum(is.na(x))),\n    Unique_Count = sapply(df, function(x) length(unique(x[!is.na(x)]))),\n    stringsAsFactors = FALSE\n  )\n  \n  datatable(col_info, \n    options = list(scrollX = TRUE, pageLength = 15, searching = FALSE), \n    rownames = FALSE, class='compact stripe'\n  )\n}\n            \"\n          )\n        ),\n        nav_panel(\n          \"Processing Log\",\n          icon = icon(\"history\"),\n          ui_data_table_display(\n            ns(\"combined_data_log\"),\n            r_code_on_df = \"\n# Processing status and log\nif (is.null(df) || nrow(df) == 0) {\n  data.frame(\n    Status = 'No Data',\n    Message = 'No files have been processed yet. Upload and process files in Data Import tabs.',\n    Timestamp = Sys.time()\n  ) |> datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\n} else {\n  log_info <- data.frame(\n    Status = 'Data Available',\n    Total_Records = nrow(df),\n    Unique_Files = length(unique(df$file_name_source)),\n    Unique_Series = length(unique(df$series)),\n    Date_Range = paste(\n      format(min(df$timestamp, na.rm = TRUE), '%Y-%m-%d %H:%M'),\n      'to',\n      format(max(df$timestamp, na.rm = TRUE), '%Y-%m-%d %H:%M')\n    ),\n    Sources = paste(unique(df$source_importer_id), collapse = ', '),\n    Last_Updated = format(Sys.time(), '%Y-%m-%d %H:%M:%S'),\n    stringsAsFactors = FALSE\n  )\n  \n  datatable(log_info, \n    options = list(dom = 't', ordering = FALSE), \n    rownames = FALSE, class='compact'\n  )\n}\n            \"\n          )\n        )\n      )\n    )\n  ) # Close module-container div\n}","type":"text"},{"name":"module_data_table_server.R","content":"server_data_table_display <- function(id, input_data_reactive) {\r\n  moduleServer(id, function(input, output, session) {\r\n    processed_data <- reactiveVal()\r\n\r\n    # Debounce the R code input to avoid rapid re-evaluations\r\n    debounced_code_input <- debounce(reactive(input$code_input), 1000)\r\n\r\n    observe({ # Unified observer for code changes or data changes\r\n      current_code <- debounced_code_input()\r\n      current_data <- input_data_reactive()\r\n      \r\n      # Don't req(current_data) here - our code templates handle NULL data gracefully\r\n      \r\n      # Only proceed if code is non-empty, otherwise might show raw data\r\n      # Or, if code is empty, could default to showing current_data directly as DT\r\n      if (is.null(current_code) || current_code == \"\") {\r\n          # Default behavior if no code: render data as a basic DT table\r\n          if (!is.null(current_data) && (is.data.frame(current_data) || is.data.table(current_data))) {\r\n            processed_data(datatable(current_data, options = list(scrollX = TRUE, pageLength = 5, lengthMenu = c(5, 10, 25, 50)), rownames = FALSE, filter = 'top', class = 'compact stripe hover'))\r\n          } else {\r\n            # Handle NULL data case even when no custom code\r\n            processed_data(data.frame(Message = \"No data available\") |> datatable(options = list(dom = 't', ordering = FALSE), rownames = FALSE, class = 'compact'))\r\n          }\r\n          return()\r\n      }\r\n\r\n      spsComps::shinyCatch({\r\n        # Ensure 'df' is available in the eval environment\r\n        env <- new.env(parent = .GlobalEnv) # Safer environment\r\n        env$df <- current_data\r\n        # Make essential functions available for data table display code\r\n        env$datatable <- DT::datatable\r\n        env$renderPrint <- shiny::renderPrint\r\n        env$skim <- skimr::skim  # Use fully qualified name\r\n        env$setDT <- data.table::setDT\r\n        env$data.frame <- data.frame\r\n        env$is.data.table <- data.table::is.data.table\r\n        env$is.data.frame <- is.data.frame\r\n        env$is.null <- is.null\r\n        env$nrow <- nrow\r\n        env$ncol <- ncol\r\n        env$names <- names\r\n        env$paste <- paste\r\n        env$c <- c\r\n        env$library <- library  # Allow library calls in eval code\r\n        env$require <- require   # Allow require calls in eval code\r\n        \r\n        evaluated_output <- eval(parse(text = current_code), envir = env)\r\n        processed_data(evaluated_output)\r\n      })\r\n    }) |> bindEvent(list(debounced_code_input(), input_data_reactive(), input$apply_code), ignoreNULL = FALSE, ignoreInit = FALSE)\r\n\r\n\r\n    output$data_table <- renderUI({\r\n      req(processed_data()) # Ensure processed_data is available\r\n      tagList(processed_data()) # Wrap in tagList in case it's multiple UI elements\r\n    })\r\n  })\r\n}","type":"text"},{"name":"module_data_table_ui.R","content":"\r\nui_data_table_display <- function(id, r_code_on_df, title = NULL) {\r\n  ns <- NS(id)\r\n  card( # Wrapped in card for better structure\r\n    full_screen = TRUE,\r\n    card_header(\r\n      title,\r\n      popover(\r\n        # Gear icon on the right\r\n        bsicons::bs_icon(\"gear\", class = \"ms-auto\"),\r\n        title = \"Table Display R Code\",\r\n        placement = \"bottom\",\r\n        options = list(\r\n          container = \"body\",\r\n          customClass = \"large-popover\"\r\n        ),\r\n        # Use fixed height for popover ace editor\r\n        aceEditor_pre(\r\n            ns(\"code_input\"),\r\n            value = r_code_on_df,\r\n            height = \"300px\",\r\n            maxLines = 20\r\n        ),\r\n        action_input_tip(\r\n          ns(\"apply_code\"), \r\n          \"Apply Display Code\", \r\n          tip = \"Apply R code to customize table view\"\r\n        )\r\n      )\r\n    ),\r\n    card_body(\r\n        padding = \"0.25rem\", # Reduced padding\r\n        uiOutput(ns(\"data_table\")) # For datatable or other renderPrint outputs\r\n    )\r\n  )\r\n}","type":"text"},{"name":"module_importer_server.R","content":"# --- Server Module for Data Importer ---\r\nserver_data_import <- function(id, global_files_reactive = NULL) { # Accept global files\r\n  moduleServer(id, function(input, output, session) {\r\n    ns <- session$ns # For constructing observeEvent selectors if needed, though not used here\r\n\r\n    # Tab renaming functionality - use reactive values instead of custom messages\r\n    tab_rename_trigger <- reactiveVal(NULL)\r\n    \r\n    # Auto-apply tab name when input changes (no button needed)\r\n    observeEvent(input$tab_name, {\r\n      req(input$tab_name)\r\n      new_name <- trimws(input$tab_name)\r\n      \r\n      cat(\"=== TAB NAME AUTO-APPLY ===\\n\")\r\n      cat(\"Module ID:\", id, \"\\n\")\r\n      cat(\"New name:\", new_name, \"\\n\")\r\n      \r\n      if (new_name == \"\") {\r\n        return() # Don't apply empty names\r\n      }\r\n      \r\n      # Set the reactive value to trigger parent's observer\r\n      current_title <- paste(\"Import\", substr(id, nchar(\"data_import_module_\") + 1, nchar(id)))\r\n      tab_rename_trigger(list(\r\n        moduleId = id,\r\n        newName = new_name,\r\n        currentTitle = current_title,\r\n        timestamp = Sys.time() # Ensure trigger fires even with same name\r\n      ))\r\n      \r\n      cat(\"Tab rename trigger set automatically\\n\")\r\n      showNotification(paste(\"Tab renamed to:\", new_name), type = \"message\", duration = 2)\r\n    }, ignoreInit = TRUE) # Only trigger on user changes, not initial load\r\n\r\n    df_list_uploaded <- reactiveVal(data.table(name = character(0), path = character(0), size = numeric(0)))\r\n\r\n\r\n\r\n    # Update df_list_uploaded to use all available files from Input Data tab\r\n    # Then apply include/exclude filters to determine the actual working set\r\n    observe({\r\n      if (!is.null(global_files_reactive)) {\r\n        global_files <- global_files_reactive()\r\n        \r\n        # Build file info from all available files\r\n        all_files_info <- data.table(\r\n          name = character(0),\r\n          path = character(0), \r\n          size = numeric(0)\r\n        )\r\n        \r\n        for (file_name in names(global_files)) {\r\n          file_info <- global_files[[file_name]]\r\n          all_files_info <- rbind(all_files_info, data.table(\r\n            name = file_info$name,\r\n            path = file_info$path,\r\n            size = file_info$size\r\n          ))\r\n        }\r\n        \r\n        df_list_uploaded(all_files_info)\r\n        if (nrow(all_files_info) > 0) {\r\n          showNotification(paste(nrow(all_files_info), \"file(s) available - use filters to narrow selection.\"), duration = 2, type = \"message\")\r\n        }\r\n      }\r\n    })\r\n\r\n    df_list_filtered <- reactive({\r\n      df <- df_list_uploaded()\r\n      if (nrow(df) == 0) return(df) # Return empty DT if no files\r\n\r\n      if (!is.null(input$filter_in_files_1) && input$filter_in_files_1 != \"\") {\r\n        df <- filter_in(df, \"name\", input$filter_in_files_1)\r\n      }\r\n      if (!is.null(input$filter_out_files_1) && input$filter_out_files_1 != \"\") {\r\n        df <- filter_out(df, \"name\", input$filter_out_files_1)\r\n      }\r\n      \r\n      # Update file selector choices\r\n      updateSelectInput(session, \"input_preview_file_selector\",\r\n        choices = df$name,\r\n        selected = if (nrow(df) > 0) df$name[1] else NULL\r\n      )\r\n      df\r\n    })\r\n\r\n    server_data_table_display(\r\n      \"data_table_input_file_list\",\r\n      reactive(df_list_filtered())\r\n    )\r\n\r\n    df_preview_pre_processed <- reactiveVal()\r\n    df_preview_post_processed <- reactiveVal() # For the single file post-process preview\r\n\r\n    # Debounced reactive for Ace editor code\r\n    r_code_pre_process_reactive <- debounce(reactive(input$r_code_pre_process), 500)\r\n    r_code_post_process_reactive <- debounce(reactive(input$r_code_post_process), 500)\r\n\r\n    ace_server_functions(ns(\"r_code_pre_process\")) # ns() for module IDs\r\n    ace_server_functions(ns(\"r_code_post_process\"))\r\n\r\n    # Function to pre-process a single file (for preview)\r\n    pre_process_single_file <- function(file_path, file_name, code, n_every, skip_rows) {\r\n      spsComps::shinyCatch({\r\n        # Environment for eval: pass necessary inputs directly\r\n        env <- new.env(parent = .GlobalEnv) # Safer environment\r\n        env$file_path <- file_path\r\n        env$file_name <- file_name\r\n        env$n_every <- n_every # Use a different name to avoid conflict with base::n\r\n        env$skip_rows <- skip_rows # Use a different name\r\n        env$showNotification <- showNotification # Make shiny's showNotification available\r\n        env$fread <- data.table::fread\r\n        env$read_excel <- readxl::read_excel\r\n        env$read_fst <- fst::read_fst\r\n        env$read_parquet <- nanoparquet::read_parquet\r\n        env$file_ext <- tools::file_ext\r\n        env$setDT <- data.table::setDT\r\n        env$as.data.table <- data.table::as.data.table\r\n        \r\n        eval(parse(text = code), envir = env)\r\n      })\r\n    }\r\n    \r\n    # Function to post-process a single data frame (for preview)\r\n    post_process_single_df <- function(df_to_process, code, filter_in_val, filter_out_val, rename_val, date_fmt_val) {\r\n        spsComps::shinyCatch({\r\n            env <- new.env(parent = .GlobalEnv)\r\n            env$df <- as.data.table(df_to_process) # Ensure it's a data.table\r\n            env$showNotification <- showNotification\r\n            env$setDT <- data.table::setDT\r\n            env$setnames <- data.table::setnames\r\n            env$melt <- data.table::melt\r\n            env$parse_date_time <- lubridate::parse_date_time\r\n            env$ymd_hms <- lubridate::ymd_hms # if used in code\r\n            env$na.omit <- stats::na.omit\r\n            env$filter_in <- filter_in # Make helper available\r\n            env$filter_out <- filter_out # Make helper available\r\n            env$rname <- rname # Make helper available\r\n            env$str_extract <- stringr::str_extract\r\n            env$stringi <- stringi::stri_extract_first_regex # if used\r\n\r\n            # Make specific input values available for the post-processing script\r\n            env$input_filter_in_1 <- filter_in_val\r\n            env$input_filter_out_1 <- filter_out_val\r\n            env$input_rename_1 <- rename_val\r\n            env$input_date_format <- date_fmt_val\r\n            \r\n            eval(parse(text = code), envir = env)\r\n        })\r\n    }\r\n\r\n\r\n    observe({ # For pre-processing preview\r\n      file_name_selected <- input$input_preview_file_selector\r\n      code_pre <- r_code_pre_process_reactive()\r\n      \r\n      req(file_name_selected, code_pre, nrow(df_list_filtered()) > 0)\r\n      \r\n      file_info_selected <- df_list_filtered()[name == file_name_selected]\r\n      if (nrow(file_info_selected) == 0) {\r\n        showNotification(\"Selected file not found in the filtered list.\", type = \"warning\")\r\n        df_preview_pre_processed(NULL)\r\n        return()\r\n      }\r\n\r\n      df <- pre_process_single_file(\r\n        file_info_selected$path,\r\n        file_info_selected$name,\r\n        code_pre,\r\n        input$file_skip_every_nth,\r\n        input$skip_n_rows_start\r\n      )\r\n      df_preview_pre_processed(df)\r\n    }) |> bindEvent(list(input$reload_data, input$input_preview_file_selector, r_code_pre_process_reactive(), input$file_skip_every_nth, input$skip_n_rows_start), ignoreNULL = TRUE)\r\n\r\n\r\n    observe({ # For post-processing preview\r\n        req(df_preview_pre_processed())\r\n        code_post <- r_code_post_process_reactive()\r\n        req(code_post)\r\n\r\n        df <- post_process_single_df(\r\n            df_preview_pre_processed(), \r\n            code_post,\r\n            input$filter_in_1,\r\n            input$filter_out_1,\r\n            input$rename_1,\r\n            input$date_format\r\n        )\r\n        df_preview_post_processed(df)\r\n    }) |> bindEvent(list(df_preview_pre_processed(), r_code_post_process_reactive(), input$filter_in_1, input$filter_out_1, input$rename_1, input$date_format), ignoreNULL = TRUE)\r\n\r\n\r\n    # Display tables for preview\r\n    server_data_table_display(\"data_table_input_data\", reactive(df_preview_pre_processed()))\r\n    server_data_table_display(\"data_table_input_data_repeat\", reactive(df_preview_pre_processed()))\r\n    server_data_table_display(\"data_table_input_data_sum\", reactive(df_preview_pre_processed()))\r\n    server_data_table_display(\"data_table_modified_data\", reactive(df_preview_post_processed()))\r\n    server_data_table_display(\"data_table_modified_data_sum\", reactive(df_preview_post_processed()))\r\n    server_data_table_display(\"data_table_skim\", reactive(df_preview_post_processed()))\r\n\r\n    # --- Main Data Processing and Combination Logic for this Importer ---\r\n    combined_data_for_this_importer <- reactiveVal()\r\n\r\n    observeEvent(input$combine_data, {\r\n      showNotification(\"Starting to process and combine all files for this importer...\", type = \"message\", duration = 5)\r\n      \r\n      files_to_process <- df_list_filtered()\r\n      if (nrow(files_to_process) == 0) {\r\n        showNotification(\"No files to process.\", type = \"warning\")\r\n        combined_data_for_this_importer(NULL)\r\n        return()\r\n      }\r\n\r\n      # Isolate all necessary inputs at the beginning of the combine process\r\n      # to avoid issues with reactive changes during the potentially long map2 call.\r\n      isolated_r_code_pre_process <- isolate(input$r_code_pre_process)\r\n      isolated_r_code_post_process <- isolate(input$r_code_post_process)\r\n      isolated_file_skip_every_nth <- isolate(input$file_skip_every_nth)\r\n      isolated_skip_n_rows_start <- isolate(input$skip_n_rows_start)\r\n      isolated_filter_in_1 <- isolate(input$filter_in_1)\r\n      isolated_filter_out_1 <- isolate(input$filter_out_1)\r\n      isolated_rename_1 <- isolate(input$rename_1)\r\n      isolated_date_format <- isolate(input$date_format)\r\n\r\n      # Use future_map2 for parallel processing if files are independent\r\n      # Requires careful handling of environments and function calls\r\n      # For simplicity, using purrr::map2 here. For true parallelism, future::plan(multisession) is set.\r\n      # Ensure functions pre_process_single_file and post_process_single_df are self-contained or pass all dependencies.\r\n      \r\n      progress <- shiny::Progress$new(session, min = 0, max = nrow(files_to_process))\r\n      progress$set(message = \"Processing files...\", value = 0)\r\n      on.exit(progress$close())\r\n\r\n      results_list <- tryCatch({\r\n        purrr::map2(files_to_process$path, files_to_process$name, function(.x_path, .y_name) {\r\n          progress$inc(1, detail = paste(\"Processing\", basename(.y_name)))\r\n          \r\n          # Step 1: Pre-process\r\n          df_pre <- pre_process_single_file(\r\n            file_path = .x_path,\r\n            file_name = .y_name,\r\n            code = isolated_r_code_pre_process,\r\n            n_every = isolated_file_skip_every_nth,\r\n            skip_rows = isolated_skip_n_rows_start\r\n          )\r\n          \r\n          if (is.null(df_pre) || !is.data.frame(df_pre) || nrow(df_pre) == 0) {\r\n            return(NULL) # Skip this file if pre-processing fails or yields no data\r\n          }\r\n          \r\n          # Step 2: Post-process\r\n          df_post <- post_process_single_df(\r\n            df_to_process = df_pre,\r\n            code = isolated_r_code_post_process,\r\n            filter_in_val = isolated_filter_in_1,\r\n            filter_out_val = isolated_filter_out_1,\r\n            rename_val = isolated_rename_1,\r\n            date_fmt_val = isolated_date_format\r\n          )\r\n          return(df_post)\r\n        })\r\n      }, error = function(e) {\r\n        showNotification(paste(\"Error during batch processing:\", e$message), type = \"error\", duration = 10)\r\n        return(list()) # Return empty list on error\r\n      })\r\n      \r\n      valid_results <- Filter(Negate(is.null), results_list)\r\n      \r\n      if (length(valid_results) > 0) {\r\n        final_combined_dt <- data.table::rbindlist(valid_results, use.names = TRUE, fill = TRUE)\r\n        combined_data_for_this_importer(final_combined_dt)\r\n        showNotification(paste(\"Successfully processed and combined\", length(valid_results), \"files.\"), type = \"message\")\r\n      } else {\r\n        combined_data_for_this_importer(NULL)\r\n        showNotification(\"No data resulted from processing the files.\", type = \"warning\")\r\n      }\r\n    })\r\n\r\n    # Return the combined data for this importer module\r\n    list(\r\n      df = reactive(combined_data_for_this_importer()),\r\n      tab_rename_trigger = tab_rename_trigger\r\n    )\r\n  })\r\n}\r\n","type":"text"},{"name":"module_importer_ui.R","content":"ui_data_importer <- function(id) {\n  ns <- NS(id)\n  \n  # Main content area with tabs - uses dynamic height\n  div(class = \"module-container\",\n    navset_card_pill(\n      id = ns(\"main_tabs\"),\n      # full_screen = TRUE,\n      # height now managed by CSS and JavaScript\n      height = \"100%\",\n    \n      # Files Tab with its own sidebar\n      nav_panel(\n      title = \"Files\",\n      icon = icon(\"folder\"),\n      layout_sidebar(\n        sidebar = sidebar(\n          title = \"File Controls\",\n          width = 350, # Increased from 280\n          class = \"p-2\", # Reduced padding\n          \n\n          \n          # File Filtering (primary selection method)\n          div(class = \"mb-2\",\n            h6(\"File Filtering\", class = \"text-muted mb-1 small\", style = \"font-weight: 600;\"),\n            p(class = \"text-muted small mb-2\", \"Use these filters to control which files are processed:\"),\n            div(class = \"row g-1\",\n              div(class = \"col-12\",\n                textInput(\n                  ns(\"filter_in_files_1\"),\n                  NULL,\n                  placeholder = \"Include files (regex) - leave empty for all\",\n                  width = \"100%\"\n                ) |> tooltip(\"Regex pattern to include only matching files. Leave empty to include all files.\")\n              ),\n              div(class = \"col-12\",\n                textInput(\n                  ns(\"filter_out_files_1\"),\n                  NULL,\n                  placeholder = \"Exclude files (regex) - e.g., '_backup|temp'\",\n                  width = \"100%\"\n                ) |> tooltip(\"Regex pattern to exclude matching files. Applied after include filter.\")\n              )\n            )\n          ),\n          \n          # Custom Tab Name (compact)\n          div(class = \"mb-2\",\n            h6(\"Tab Name\", class = \"text-muted mb-1 small\"),\n            textInput(\n              ns(\"tab_name\"),\n              NULL,\n              value = \"\",\n              placeholder = \"Custom name...\",\n              width = \"100%\"\n            ) |> tooltip(\"Enter a custom name for this data import tab - applies automatically\")\n          )\n        ),\n        \n        # Files content\n        card_body(\n          h5(\"Uploaded Files\", class = \"card-title\"),\n          ui_data_table_display(ns(\"data_table_input_file_list\"))\n        )\n      )\n    ),\n    \n    # Preview Tab with its own sidebar\n    nav_panel(\n      title = \"Preview\", \n      icon = icon(\"eye\"),\n      layout_sidebar(\n        sidebar = sidebar(\n          title = \"Processing Controls\",\n          width = 350, # Increased from 280\n          class = \"p-2\", # Reduced padding\n\n          # Process All Files Button\n          div(class = \"mt-auto\",\n            actionButton(\n              ns(\"combine_data\"),\n              \"Process All Files\",\n              icon = icon(\"cogs\"),\n              class = \"btn-success w-100\",\n              style = \"margin-top: 10px;\"\n            ) |> tooltip(\"Process and combine all files with current settings\")\n          ),\n\n          # Preview File Selection (compact)\n          div(class = \"mb-2\",\n            selectInput(\n              ns(\"input_preview_file_selector\"),\n              \"Preview File\",\n              choices = NULL,\n              width = \"100%\"\n            ) |> tooltip(\"Choose a file to preview in the Preview tab\"),\n            \n            actionButton(\n              ns(\"reload_data\"),\n              \"Reload\",\n              icon = icon(\"refresh\"),\n              class = \"btn-outline-secondary btn-sm w-100\",\n              style = \"margin-top: 2px;\"\n            ) |> tooltip(\"Refresh the data preview with current settings\")\n          ),\n          \n          # Processing Controls (compact)\n          div(class = \"mb-2\",\n            h6(\"Processing\", class = \"text-muted mb-1 small\"),\n            div(class = \"row g-1\",\n              div(class = \"col-6\",\n                numericInput(\n                  ns(\"skip_n_rows_start\"),\n                  \"Skip Rows\",\n                  value = 0, min = 0,\n                  width = \"100%\"\n                ) |> tooltip(\"Number of rows to skip at the beginning of each file\")\n              ),\n              div(class = \"col-6\",\n                numericInput(\n                  ns(\"file_skip_every_nth\"), \n                  \"Sample Nth\",\n                  value = 0, min = 0,\n                  width = \"100%\"\n                ) |> tooltip(\"Read every Nth row (0 = all rows, 2 = every 2nd row, etc.)\")\n              )\n            )\n          ),\n          \n          # Data Transformation (compact)\n          div(class = \"mb-2\",\n            h6(\"Transformation\", class = \"text-muted mb-1 small\"),\n            textInput(\n              ns(\"filter_in_1\"),\n              NULL,\n              placeholder = \"Filter in pattern\",\n              width = \"100%\"\n            ) |> tooltip(\"Regex to include only matching rows\"),\n            textInput(\n              ns(\"filter_out_1\"), \n              NULL,\n              placeholder = \"Filter out pattern\",\n              width = \"100%\"\n            ) |> tooltip(\"Regex to exclude matching rows\"),\n            textInput(\n              ns(\"rename_1\"),\n              NULL,\n              placeholder = \"old:new,old2:new2\",\n              width = \"100%\"\n            ) |> tooltip(\"Rename columns using old:new format\"),\n            textInput(\n              ns(\"date_format\"),\n              NULL,\n              placeholder = \"ymd_HMS, dmy, etc.\",\n              width = \"100%\"\n            ) |> tooltip(\"Lubridate format for parsing dates\")\n          ),\n          \n        ),\n        \n        # Preview content with tabs\n        navset_card_pill(\n          nav_panel(\n            \"Raw Data\",\n            icon = icon(\"table\"),\n            ui_data_table_display(ns(\"data_table_input_data\"), r_code_on_df = DT_head)\n          ),\n          nav_panel(\n            \"Processed Data\", \n            icon = icon(\"filter\"),\n            ui_data_table_display(ns(\"data_table_modified_data\"), r_code_on_df = DT_head)\n          ),\n          nav_panel(\n            \"Summary Table\",\n            icon = icon(\"chart-bar\"),\n            ui_data_table_display(ns(\"data_table_modified_data_sum\"), r_code_on_df = if (exists(\"r_code_combined_data_summary\")) r_code_combined_data_summary else \"# Default summary code\\nif (is.null(df) || nrow(df) == 0) {\\n  data.frame(Message = 'No data available') |> \\n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\\n} else {\\n  summary_df <- df[, .(\\n    Records = .N,\\n    Min_Value = min(value, na.rm = TRUE),\\n    Max_Value = max(value, na.rm = TRUE),\\n    Mean_Value = mean(value, na.rm = TRUE)\\n  ), by = .(Series = series)]\\n  \\n  datatable(summary_df, \\n    options = list(scrollX = TRUE, pageLength = 15), \\n    rownames = FALSE, class = 'compact stripe'\\n  )\\n}\")\n          ),\n          nav_panel(\n            \"Skimrdsf\",\n                          icon = icon(\"chart-line\"),\n            ui_data_table_display(ns(\"data_table_skim\"), r_code_on_df = \n               \"df |> skim() |> renderPrint()\" # Using renderPrint for skim output\n            )\n          )\n        )\n      )\n    ),\n    \n    # Process Tab with its own sidebar (added)\n    nav_panel(\n      title = \"Code\",\n      icon = icon(\"cogs\"),\n      layout_sidebar(\n        sidebar = sidebar(\n          title = \"Actions\",\n          width = 240,\n          \n          # Process All Files (moved from main sidebar to bottom)\n        ),\n        \n        # Process content\n        layout_columns(\n          col_widths = c(6, 6),\n          \n          # Pre-processing\n          card(\n            card_header(\"Pre-processing Code\"),\n            card_body(\n              p(\"R code to read and initially process each file:\", class = \"text-muted small\"),\n              aceEditor_pre(ns(\"r_code_pre_process\"), value = r_code_data_pre_process)\n            )\n          ),\n          \n          # Post-processing  \n          card(\n            card_header(\"Post-processing Code\"),\n            card_body(\n              p(\"R code to transform each processed file:\", class = \"text-muted small\"),\n              aceEditor_pre(ns(\"r_code_post_process\"), value = r_code_data_processing)\n            )\n                      )\n          )\n        )\n      )\n    )\n  ) # Close module-container div\n}","type":"text"},{"name":"module_plotter_server.R","content":"# --- Server Module for Plotter ---\nserver_plotter <- function(id, combined_data_reactive, main_session_input = NULL) { # Added main_session_input\n  moduleServer(id, function(input, output, session) {\n    ns <- session$ns\n\n    # Tab renaming functionality for plotter (same as importer)\n    plot_rename_trigger <- reactiveVal(NULL)\n    \n    # Auto-apply plot name when input changes (no button needed)\n    observeEvent(input$plot_name, {\n      req(input$plot_name)\n      new_name <- trimws(input$plot_name)\n      \n      cat(\"=== PLOT NAME AUTO-APPLY ===\\n\")\n      cat(\"Module ID:\", id, \"\\n\")\n      cat(\"New name:\", new_name, \"\\n\")\n      \n      if (new_name == \"\") {\n        return() # Don't apply empty names\n      }\n      \n      # Set the reactive value to trigger parent's observer\n      current_title <- id # Use the module ID as current title\n      plot_rename_trigger(list(\n        moduleId = id,\n        newName = new_name,\n        currentTitle = current_title,\n        timestamp = Sys.time() # Ensure trigger fires even with same name\n      ))\n      \n      cat(\"Plot rename trigger set automatically\\n\")\n      showNotification(paste(\"Plot renamed to:\", new_name), type = \"message\", duration = 2)\n    }, ignoreInit = TRUE) # Only trigger on user changes, not initial load\n\n    # --- Plot-specific Data Processing ---\n    df_plot_data_processed <- reactiveVal()\n    r_code_plot_process_reactive <- debounce(reactive(input$r_code_plot_process), 500)\n    ace_server_functions(ns(\"r_code_plot_process\"))\n    \n    # Multiple ace editors for different plot components\n    r_code_plot_text_reactive <- debounce(reactive(input$r_code_plot_text), 500)\n    r_code_plot_data_processing_reactive <- debounce(reactive(input$r_code_plot_data_processing), 500)\n    r_code_plot_base_setup_reactive <- debounce(reactive(input$r_code_plot_base_setup), 500)\n    r_code_plot_themes_styling_reactive <- debounce(reactive(input$r_code_plot_themes_styling), 500)\n    r_code_plot_statistical_overlays_reactive <- debounce(reactive(input$r_code_plot_statistical_overlays), 500)\n    r_code_plot_grid_axes_reactive <- debounce(reactive(input$r_code_plot_grid_axes), 500)\n    r_code_plot_faceting_final_reactive <- debounce(reactive(input$r_code_plot_faceting_final), 500)\n    r_code_plot_static_reactive <- debounce(reactive(input$r_code_plot_static), 500)\n    r_code_plot_interactive_reactive <- debounce(reactive(input$r_code_plot_interactive), 500)\n    r_code_plot_table_reactive <- debounce(reactive(input$r_code_plot_table), 500)\n    r_code_plot_final_reactive <- debounce(reactive(input$r_code_plot_final), 500)\n    \n    # Ace server functions for each editor\n    ace_server_functions(ns(\"r_code_plot_text\"))\n    ace_server_functions(ns(\"r_code_plot_data_processing\"))\n    ace_server_functions(ns(\"r_code_plot_base_setup\"))\n    ace_server_functions(ns(\"r_code_plot_themes_styling\"))\n    ace_server_functions(ns(\"r_code_plot_statistical_overlays\"))\n    ace_server_functions(ns(\"r_code_plot_grid_axes\"))\n    ace_server_functions(ns(\"r_code_plot_faceting_final\"))\n    ace_server_functions(ns(\"r_code_plot_static\"))\n    ace_server_functions(ns(\"r_code_plot_interactive\"))\n    ace_server_functions(ns(\"r_code_plot_table\"))\n    ace_server_functions(ns(\"r_code_plot_final\"))\n\n    # Update source filter checkboxes when combined data changes\n    observe({\n      req(combined_data_reactive())\n      \n      combined_df <- combined_data_reactive()\n      if (!is.null(combined_df) && nrow(combined_df) > 0 && 'source_importer_id' %in% names(combined_df)) {\n        # Get unique source IDs\n        unique_sources <- unique(combined_df$source_importer_id)\n        \n        if (length(unique_sources) > 0) {\n          # Create mapping from module IDs to friendly names\n          source_labels <- sapply(unique_sources, function(source_id) {\n            # Convert data_import_module_1 to \"Data Import 1\"\n            if (grepl(\"^data_import_module_\", source_id)) {\n              tab_number <- gsub(\"data_import_module_\", \"\", source_id)\n              paste(\"Data Import\", tab_number)\n            } else {\n              # Fallback for other naming patterns\n              source_id\n            }\n          })\n          \n          # Generate checkboxes\n          checkbox_list <- lapply(seq_along(unique_sources), function(i) {\n            source_id <- unique_sources[i]\n            label <- source_labels[i]\n            \n            div(class = \"form-check form-check-inline\",\n              tags$input(\n                type = \"checkbox\",\n                class = \"form-check-input\",\n                id = session$ns(paste0(\"source_\", source_id)),\n                value = source_id,\n                checked = \"checked\" # Default to all sources selected\n              ),\n              tags$label(\n                class = \"form-check-label small\",\n                `for` = session$ns(paste0(\"source_\", source_id)),\n                label\n              )\n            )\n          })\n          \n          # Update the UI\n          output$source_filter_checkboxes <- renderUI({\n            tagList(checkbox_list)\n          })\n        }\n      } else {\n        # No data available\n        output$source_filter_checkboxes <- renderUI({\n          p(class = \"text-muted small\", \"No data sources available yet\")\n        })\n      }\n    })\n\n    # Process data when button is clicked\n    observeEvent(input$data_render, {\n      req(combined_data_reactive())\n      \n      spsComps::shinyCatch({\n        # Get the combined data\n        combined_df <- data.table::copy(combined_data_reactive())\n        \n        if (is.null(combined_df) || nrow(combined_df) == 0) {\n          showNotification(\"No data available to process\", type = \"warning\")\n          return()\n        }\n        \n        # Apply source filtering\n        if ('source_importer_id' %in% names(combined_df)) {\n          # Get all unique sources\n          unique_sources <- unique(combined_df$source_importer_id)\n          \n          # Check which sources are selected\n          selected_sources <- c()\n          for (source_id in unique_sources) {\n            checkbox_id <- paste0(\"source_\", source_id)\n            if (!is.null(input[[checkbox_id]]) && input[[checkbox_id]]) {\n              selected_sources <- c(selected_sources, source_id)\n            }\n          }\n          \n          # Filter data by selected sources\n          if (length(selected_sources) > 0) {\n            combined_df <- combined_df[combined_df$source_importer_id %in% selected_sources, ]\n          } else {\n            # If no sources selected, show warning and use all data\n            showNotification(\"No sources selected - using all data\", type = \"warning\")\n          }\n        }\n        \n        # Apply sampling if specified\n        if (!is.null(input$sample_n_plot) && input$sample_n_plot > 0 && input$sample_n_plot < 1) {\n          n_sample <- floor(nrow(combined_df) * input$sample_n_plot)\n          if (n_sample > 0) {\n            combined_df <- combined_df[sample(nrow(combined_df), n_sample), ]\n          }\n        }\n        \n        # Environment for plot data processing\n        env <- new.env(parent = .GlobalEnv)\n        env$df <- as.data.table(combined_df) # Start with filtered and sampled data\n        env$input <- input # Expose module's input for filtering etc.\n        env$filter_in <- filter_in\n        env$filter_out <- filter_out\n        env$rname <- rname\n        env$str_extract <- stringr::str_extract\n        env$sample <- sample # base R sample\n        \n        # Add code sharing functions\n        env$get_plotter_code <- get_plotter_code\n        env$get_importer_code <- get_importer_code\n        env$main_session_input <- main_session_input\n        \n        processed_df <- eval(parse(text = r_code_plot_process_reactive()), envir = env)\n        df_plot_data_processed(processed_df)\n        \n        # Update aesthetics choices based on processed data columns\n        if (!is.null(processed_df) && ncol(processed_df) > 0) {\n          column_choices <- c(\"None\" = \"null\", setNames(names(processed_df), names(processed_df)))\n          \n          updateSelectInput(session, \"plot_color\", choices = column_choices, selected = if(\"series\" %in% names(processed_df)) \"series\" else \"null\")\n          updateSelectInput(session, \"plot_linetype\", choices = column_choices, selected = \"null\")\n        }\n        \n        showNotification(\"Plot-specific data processing complete.\", type = \"message\")\n      })\n    })\n\n    # Display tables for plot data\n    server_data_table_display(\n      \"plot_data_table_input_data\",\n      reactive(combined_data_reactive()) # Show the raw input to this plotter\n    )\n    server_data_table_display(\n      \"plot_data_table_input_data_summary\",\n      reactive(combined_data_reactive()) # Show summary of raw input data\n    )\n    server_data_table_display(\n      \"plot_data_table_modified_data\",\n      reactive(df_plot_data_processed()) # Show data after plot-specific processing\n    )\n    server_data_table_display(\n      \"plot_data_table_modified_data_summary\",\n      reactive(df_plot_data_processed()) # Summary of processed data\n    )\n\n    # --- Plot Rendering Logic ---\n    plot_object_reactive <- reactiveVal(NULL)\n    \n    observeEvent(input$plot_render, {\n      spsComps::shinyCatch({\n        req(df_plot_data_processed()) # Requires data processed for *this* plot\n        \n        # Environment for plot generation\n        env <- new.env(parent = .GlobalEnv)\n        env$df <- df_plot_data_processed()\n        env$input <- input # Expose module's input for titles, labels, etc.\n        \n        # Check if ggplot2 can load properly\n        ggplot2_available <- tryCatch({\n          # Test if we can actually load ggplot2 and its dependencies\n          library(ggplot2, quietly = TRUE)\n          # Test a simple ggplot operation\n          test_plot <- ggplot(data.frame(x=1, y=1), aes(x=x, y=y)) + geom_point()\n          TRUE\n        }, error = function(e) {\n          cat(\"ggplot2 loading failed:\", e$message, \"\\n\")\n          FALSE\n        })\n        \n        if (ggplot2_available) {\n          # Add ggplot2 functions - full version\n          env$ggplot <- ggplot2::ggplot\n          env$geom_line <- ggplot2::geom_line\n          env$geom_point <- ggplot2::geom_point\n          env$geom_ribbon <- ggplot2::geom_ribbon\n          env$aes <- ggplot2::aes\n          env$labs <- ggplot2::labs\n          env$ggtitle <- ggplot2::ggtitle # Deprecated, use labs(title=)\n          env$xlab <- ggplot2::xlab # Deprecated\n          env$ylab <- ggplot2::ylab # Deprecated\n          env$theme_bw <- ggplot2::theme_bw\n          env$facet_wrap <- ggplot2::facet_wrap\n          env$ggplot2_available <- TRUE\n        } else {\n          # Create fallback functions that use base R plots or plotly\n          env$ggplot2_available <- FALSE\n          env$ggplot <- function(data = NULL, mapping = NULL, ...) {\n            warning(\"ggplot2 not available - use plotly functions instead\")\n            return(list(data = data, mapping = mapping, type = \"ggplot_fallback\"))\n          }\n          env$geom_line <- function(...) {\n            warning(\"ggplot2 not available - use plotly::add_lines() instead\")\n            return(list(type = \"geom_fallback\"))\n          }\n          env$geom_point <- function(...) {\n            warning(\"ggplot2 not available - use plotly::add_markers() instead\")\n            return(list(type = \"geom_fallback\"))\n          }\n          env$geom_ribbon <- function(...) {\n            warning(\"ggplot2 not available - use plotly::add_ribbons() instead\")\n            return(list(type = \"geom_fallback\"))\n          }\n          env$aes <- function(...) {\n            warning(\"ggplot2 not available - define aesthetics directly in plotly\")\n            return(list(type = \"aes_fallback\"))\n          }\n          env$labs <- function(...) {\n            warning(\"ggplot2 not available - use plotly::layout() instead\")\n            return(list(type = \"labs_fallback\"))\n          }\n          env$ggtitle <- function(...) {\n            warning(\"ggplot2 not available - use plotly::layout(title = ...) instead\")\n            return(list(type = \"title_fallback\"))\n          }\n          env$xlab <- function(...) {\n            warning(\"ggplot2 not available - use plotly::layout(xaxis = list(title = ...)) instead\")\n            return(list(type = \"xlab_fallback\"))\n          }\n          env$ylab <- function(...) {\n            warning(\"ggplot2 not available - use plotly::layout(yaxis = list(title = ...)) instead\")\n            return(list(type = \"ylab_fallback\"))\n          }\n          env$theme_bw <- function(...) {\n            warning(\"ggplot2 not available - use plotly styling instead\")\n            return(list(type = \"theme_fallback\"))\n          }\n          env$facet_wrap <- function(...) {\n            warning(\"ggplot2 not available - create subplots with plotly::subplot() instead\")\n            return(list(type = \"facet_fallback\"))\n          }\n        }\n        \n        # Add scattermore with safe loading\n        tryCatch({\n          env$geom_scattermore <- scattermore::geom_scattermore\n        }, error = function(e) {\n          env$geom_scattermore <- function(...) {\n            warning(\"scattermore not available - use plotly::add_markers() for large datasets\")\n            return(list(type = \"scattermore_fallback\"))\n          }\n        })\n        \n        env$str_sub <- stringr::str_sub\n        env$ggplotly <- plotly::ggplotly\n        env$plot_ly <- plotly::plot_ly\n        env$add_trace <- plotly::add_trace\n        env$add_lines <- plotly::add_lines\n        env$add_markers <- plotly::add_markers\n        env$add_ribbons <- plotly::add_ribbons\n        env$layout <- plotly::layout\n        env$renderPlot <- shiny::renderPlot # For static ggplot\n        env$renderPlotly <- plotly::renderPlotly # For plotly/ggplotly\n        env$renderPrint <- shiny::renderPrint # For text output\n        env$renderUI <- shiny::renderUI # For flexible output\n        env$datatable <- DT::datatable # For table output\n        env$tagList <- shiny::tagList # For multiple UI elements\n        env$div <- shiny::div # For HTML containers\n        env$h3 <- shiny::h3 # For headings\n        env$h4 <- shiny::h4 # For headings\n        env$p <- shiny::p # For paragraphs\n        env$copy <- data.table::copy # For data.table copying\n        env$setDT <- data.table::setDT # For converting to data.table\n        \n        # Add code sharing functions\n        env$get_plotter_code <- get_plotter_code\n        env$get_importer_code <- get_importer_code\n        env$main_session_input <- main_session_input\n        \n        # Add modular template variables for the combined static template to use\n        env$ggplot_data_processing_template <- ggplot_data_processing_template\n        env$ggplot_base_setup_template <- ggplot_base_setup_template\n        env$ggplot_themes_styling_template <- ggplot_themes_styling_template\n        env$ggplot_statistical_overlays_template <- ggplot_statistical_overlays_template\n        env$ggplot_grid_axes_template <- ggplot_grid_axes_template\n        env$ggplot_faceting_final_template <- ggplot_faceting_final_template\n        \n        # IMPORTANT: Override with user's ace editor inputs when available\n        # This allows users to edit the modular templates in real-time\n        if (!is.null(r_code_plot_data_processing_reactive()) && nzchar(r_code_plot_data_processing_reactive())) {\n          env$ggplot_data_processing_template <- r_code_plot_data_processing_reactive()\n        }\n        if (!is.null(r_code_plot_base_setup_reactive()) && nzchar(r_code_plot_base_setup_reactive())) {\n          env$ggplot_base_setup_template <- r_code_plot_base_setup_reactive()\n        }\n        if (!is.null(r_code_plot_themes_styling_reactive()) && nzchar(r_code_plot_themes_styling_reactive())) {\n          env$ggplot_themes_styling_template <- r_code_plot_themes_styling_reactive()\n        }\n        if (!is.null(r_code_plot_statistical_overlays_reactive()) && nzchar(r_code_plot_statistical_overlays_reactive())) {\n          env$ggplot_statistical_overlays_template <- r_code_plot_statistical_overlays_reactive()\n        }\n        if (!is.null(r_code_plot_grid_axes_reactive()) && nzchar(r_code_plot_grid_axes_reactive())) {\n          env$ggplot_grid_axes_template <- r_code_plot_grid_axes_reactive()\n        }\n        if (!is.null(r_code_plot_faceting_final_reactive()) && nzchar(r_code_plot_faceting_final_reactive())) {\n          env$ggplot_faceting_final_template <- r_code_plot_faceting_final_reactive()\n        }\n        \n        # Combine all the code sections\n        combined_code <- paste(\n          \"# Text code section:\",\n          paste(\"text_code <- '\", gsub(\"'\", \"\\\\\\\\'\", r_code_plot_text_reactive()), \"'\", sep=\"\"),\n          \"\",\n          \"# Static code section:\",\n          paste(\"static_code <- '\", gsub(\"'\", \"\\\\\\\\'\", r_code_plot_static_reactive()), \"'\", sep=\"\"),\n          \"\",\n          \"# Interactive code section:\",\n          paste(\"interactive_code <- '\", gsub(\"'\", \"\\\\\\\\'\", r_code_plot_interactive_reactive()), \"'\", sep=\"\"),\n          \"\",\n          \"# Table code section:\",\n          paste(\"table_code <- '\", gsub(\"'\", \"\\\\\\\\'\", r_code_plot_table_reactive()), \"'\", sep=\"\"),\n          \"\",\n          \"# Final conditional code:\",\n          r_code_plot_final_reactive(),\n          sep = \"\\n\"\n        )\n        \n        plot_result <- eval(parse(text = combined_code), envir = env)\n        plot_object_reactive(plot_result)\n        showNotification(\"Plot generated successfully.\", type = \"message\")\n      })\n    })\n\n    # Flexible plot output using renderUI\n    output$plot_output <- renderUI({\n      req(plot_object_reactive())\n      \n      plot_obj <- plot_object_reactive()\n      \n      # Handle different types of output flexibly\n      if (inherits(plot_obj, \"htmlwidget\")) {\n        # Plotly or other HTML widgets\n        plot_obj\n      } else if (inherits(plot_obj, \"ggplot\")) {\n        # ggplot objects - render as plot\n        renderPlot({\n          plot_obj\n        }, height = 600)\n      } else if (inherits(plot_obj, \"datatables\")) {\n        # DataTable objects\n        plot_obj\n      } else if (is.list(plot_obj) && all(sapply(plot_obj, function(x) inherits(x, \"shiny.tag\") || inherits(x, \"shiny.tag.list\")))) {\n        # List of UI elements\n        tagList(plot_obj)\n      } else if (inherits(plot_obj, \"shiny.render.function\")) {\n        # Already a render function (renderPrint, etc.)\n        plot_obj\n      } else {\n        # Fallback: try to render as print output\n        renderPrint({\n          plot_obj\n        })\n      }\n    })\n\n    # Download handler for plots\n    output$download_output <- downloadHandler(\n      filename = function() {\n        plot_name <- if (!is.null(input$plot_name) && nzchar(input$plot_name)) {\n          gsub(\"[^a-zA-Z0-9_.-]\", \"_\", input$plot_name)\n        } else {\n          id\n        }\n        \n        if (input$plot_type == \"dynamic\") {\n          paste0(plot_name, \"_\", Sys.Date(), \".html\")\n        } else if (input$plot_type == \"static\") {\n          paste0(plot_name, \"_\", Sys.Date(), \".png\")\n        } else {\n          paste0(plot_name, \"_\", Sys.Date(), \".txt\")\n        }\n      },\n      content = function(file) {\n        req(plot_object_reactive())\n        \n        plot_obj <- plot_object_reactive()\n        \n        if (input$plot_type == \"dynamic\" && inherits(plot_obj, \"htmlwidget\")) {\n          htmlwidgets::saveWidget(plot_obj, file, selfcontained = TRUE)\n        } else if (input$plot_type == \"static\" && inherits(plot_obj, \"ggplot\")) {\n          ggsave(file, plot_obj, device = \"png\", width = 12, height = 8, dpi = 300)\n        } else {\n          # Fallback: save as text\n          writeLines(capture.output(print(plot_obj)), file)\n        }\n      }\n    )\n\n    # Return the plot reactive and rename trigger for parent access\n    list(\n      plot = reactive(plot_object_reactive()),\n      plot_rename_trigger = plot_rename_trigger\n    )\n  })\n}","type":"text"},{"name":"module_plotter_ui.R","content":"ui_plotter <- function(id) {\n  ns <- NS(id) # Ensure ns is defined for the main module ID\n  div(class = \"module-container\",\n    navset_card_pill(\n      id = ns(\"plotter_tabs\"),\n      # full_screen = TRUE, # Removed - using dynamic height instead\n      height = \"100%\",\n    \n      # Input Data Tab\n      nav_panel(\n        title = \"Input Data\",\n        icon = icon(\"database\"),\n        layout_sidebar(\n          sidebar = sidebar(\n            title = \"Plot Settings\",\n            width = 300,\n            class = \"p-2\",\n            \n            # Plot Name (auto-apply)\n            div(class = \"mb-3\",\n              h6(\"Plot Name\", class = \"text-muted mb-1 small\"),\n              textInput(\n                ns(\"plot_name\"),\n                NULL,\n                value = \"\",\n                placeholder = \"Custom plot name...\",\n                width = \"100%\"\n              ) |> tooltip(\"Enter a custom name for this plotter tab - applies automatically\")\n            )\n          ),\n          \n          # Two tables side by side\n          layout_columns(\n            col_widths = c(6, 6),\n            card(\n              card_header(\"Input Data (Raw from Combiner)\"),\n              ui_data_table_display(\n                ns(\"plot_data_table_input_data\"), \n                r_code_on_df = DT_head\n              )\n            ),\n            card(\n              card_header(\"Input Data Summary\"),\n              ui_data_table_display(\n                ns(\"plot_data_table_input_data_summary\"), \n                r_code_on_df = if (exists(\"r_code_combined_data_summary\")) r_code_combined_data_summary else \"# Default summary code\\nif (is.null(df) || nrow(df) == 0) {\\n  data.frame(Message = 'No data available') |> \\n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\\n} else {\\n  summary_df <- df[, .(\\n    Records = .N,\\n    Min_Value = min(value, na.rm = TRUE),\\n    Max_Value = max(value, na.rm = TRUE),\\n    Mean_Value = mean(value, na.rm = TRUE)\\n  ), by = .(Series = series)]\\n  \\n  datatable(summary_df, \\n    options = list(scrollX = TRUE, pageLength = 15), \\n    rownames = FALSE, class = 'compact stripe'\\n  )\\n}\"\n              )\n            )\n          )\n        )\n      ),\n      \n      # Data Processing Tab\n      nav_panel(\n        title = \"Processing Data\",\n        icon = icon(\"cogs\"),\n        layout_sidebar(\n          sidebar = sidebar(\n            title = \"Processing Controls\",\n            width = 350,\n            class = \"p-2\",\n            \n            # Data Processing Action\n            div(class = \"mb-3\",\n              actionButton(\n                ns(\"data_render\"), \n                \"Process Data\",\n                icon = icon(\"play\", lib = \"font-awesome\"),\n                class = \"btn-primary w-100\",\n                style = \"margin-bottom: 10px;\"\n              ) |> tooltip(\"Process the input data for this plot\"),\n              \n              # Processing Status\n              verbatimTextOutput(ns(\"data_status\"), placeholder = TRUE)\n            ),\n            \n            # Data Processing Settings\n            div(class = \"mb-3\",\n              h6(\"Processing Settings\", class = \"text-muted mb-2\"),\n              \n              # Data Sampling\n              numericInput(\n                ns(\"sample_n_plot\"),\n                \"Sample Data (0 = all)\",\n                value = 0,\n                min = 0,\n                step = 1000,\n                width = \"100%\"\n              ) |> tooltip(\"Limit number of data points for performance. 0 = use all data.\")\n            ),\n            \n            # Data Filtering \n            div(class = \"mb-3\",\n              h6(\"Data Filtering\", class = \"text-muted mb-2\"),\n              textInput(\n                ns(\"filter_in_plot\"),\n                \"Include Series (regex)\",\n                placeholder = \"e.g., temp.*|pressure\",\n                width = \"100%\"\n              ) |> tooltip(\"Regex pattern to include only matching series\"),\n              \n              textInput(\n                ns(\"filter_out_plot\"),\n                \"Exclude Series (regex)\", \n                placeholder = \"e.g., debug|test\",\n                width = \"100%\"\n              ) |> tooltip(\"Regex pattern to exclude matching series\"),\n              \n              textInput(\n                ns(\"rename_plot\"),\n                \"Rename Series (regex)\",\n                placeholder = \"e.g., s/old_name/new_name/g\",\n                width = \"100%\"\n              ) |> tooltip(\"Perl-style regex replacement for series names\")\n            ),\n            \n            # Source Selection\n            div(class = \"mb-3\",\n              h6(\"Source Selection\", class = \"text-muted mb-2\"),\n              uiOutput(ns(\"source_filter_checkboxes\"))\n            ),\n            \n            # Time Range Filtering\n            div(class = \"mb-3\",\n              h6(\"Time Range\", class = \"text-muted mb-2\"),\n              checkboxInput(\n                ns(\"filter_time_enabled\"),\n                \"Enable Time Filtering\",\n                value = FALSE\n              ),\n              \n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"filter_time_enabled\"), \"']\"),\n                dateInput(\n                  ns(\"filter_time_start_date\"),\n                  \"Start Date\",\n                  width = \"100%\"\n                ),\n                timeInput(\n                  ns(\"filter_time_start_time\"),\n                  \"Start Time\",\n                  value = strptime(\"00:00:00\", \"1970-01-01\")\n                ),\n                dateInput(\n                  ns(\"filter_time_end_date\"),\n                  \"End Date\", \n                  width = \"100%\"\n                ),\n                timeInput(\n                  ns(\"filter_time_end_time\"),\n                  \"End Time\",\n                  value = strptime(\"23:59:59\", \"%T\")\n                )\n              )\n            )\n          ),\n          \n          # Main content with right sidebar for ace editor\n          layout_sidebar(\n            sidebar = sidebar(\n              title = \"Custom Processing Code\",\n              width = 600,\n              position = \"right\",\n              aceEditor_pre(ns(\"r_code_plot_process\"), value = r_code_plot_process_template),\n              open = FALSE\n            ),\n            \n            # Processed data tables\n            layout_columns(\n              col_widths = c(6, 6),\n              card(\n                card_header(\"Processed Data\"),\n                ui_data_table_display(\n                  ns(\"plot_data_table_modified_data\"), \n                  r_code_on_df = DT_head\n                )\n              ),\n              card(\n                card_header(\"Processed Data Summary\"),\n                ui_data_table_display(\n                  ns(\"plot_data_table_modified_data_summary\"), \n                  r_code_on_df = if (exists(\"r_code_combined_data_summary\")) r_code_combined_data_summary else \"# Default summary code\\nif (is.null(df) || nrow(df) == 0) {\\n  data.frame(Message = 'No data available') |> \\n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\\n} else {\\n  summary_df <- df[, .(\\n    Records = .N,\\n    Min_Value = min(value, na.rm = TRUE),\\n    Max_Value = max(value, na.rm = TRUE),\\n    Mean_Value = mean(value, na.rm = TRUE)\\n  ), by = .(Series = series)]\\n  \\n  datatable(summary_df, \\n    options = list(scrollX = TRUE, pageLength = 15), \\n    rownames = FALSE, class = 'compact stripe'\\n  )\\n}\"\n                )\n              )\n            )\n          )\n        )\n      ),\n      \n      # Plotting Tab\n      nav_panel(\n        title = \"Plotting\",\n        icon = icon(\"chart-line\"),\n        layout_sidebar(\n          sidebar = sidebar(\n            title = \"Plot Controls\",\n            width = 350,\n            class = \"p-2\",\n            \n            # Main Action Row (compact)\n            div(class = \"mb-3\",\n              actionButton(\n                ns(\"plot_render\"), \n                \"Create Plot\",\n                icon = icon(\"chart-line\", lib = \"font-awesome\"), \n                class = \"btn-success w-100\",\n                style = \"margin-bottom: 10px;\"\n              ) |> tooltip(\"Generate the plot using current settings\"),\n              \n              # Plot Status\n              verbatimTextOutput(ns(\"plot_status\"), placeholder = TRUE)\n            ),\n            \n            # Output Type\n            div(class = \"mb-3\",\n              h6(\"Output Type\", class = \"text-muted mb-2\"),\n              radioButtons(\n                ns(\"plot_type\"),\n                NULL,\n                choices = list(\n                  \"Interactive (plotly)\" = \"interactive\",\n                  \"Static (ggplot2)\" = \"static\", \n                  \"Table (DT)\" = \"table\",\n                  \"Text Summary\" = \"text\"\n                ),\n                selected = \"interactive\",\n                inline = FALSE\n              ) |> tooltip(\"Choose the type of output to generate\")\n            ),\n            \n            # Plot Aesthetics (compact)\n            div(class = \"mb-3\",\n              h6(\"Plot Settings\", class = \"text-muted mb-2\"),\n              \n              # Plot titles and labels\n              textInput(\n                ns(\"plot_title\"),\n                \"Title\",\n                placeholder = \"Plot title...\",\n                width = \"100%\"\n              ),\n              \n              textInput(\n                ns(\"plot_caption\"),\n                \"Caption\",\n                placeholder = \"Plot caption/notes...\",\n                width = \"100%\"\n              ),\n              \n              div(class = \"row g-1\",\n                div(class = \"col-6\",\n                  selectInput(\n                    ns(\"plot_xlabel\"),\n                    \"X Label\",\n                    choices = list(\n                      \"Timestamp\" = \"Timestamp\",\n                      \"Duration Minutes\" = \"Duration Minutes\", \n                      \"Duration Hours\" = \"Duration Hours\",\n                      \"Duration Days\" = \"Duration Days\",\n                      \"Duration Seconds\" = \"Duration Seconds\"\n                    ),\n                    selected = \"Timestamp\",\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-6\",\n                  textInput(\n                    ns(\"plot_ylabel\"),\n                    \"Y Label\",\n                    placeholder = \"Y axis...\", \n                    width = \"100%\"\n                  )\n                )\n              )\n            ),\n            \n            # Plot Type & Aesthetics\n            div(class = \"mb-3\",\n              h6(\"Plot Type & Aesthetics\", class = \"text-muted mb-2\"),\n              selectInput(\n                ns(\"geom_type\"),\n                \"Plot Type\",\n                choices = list(\n                  \"Line\" = \"geom_line\",\n                  \"Point\" = \"geom_point\", \n                  \"Line + Point\" = \"geom_line_point\",\n                  \"Area\" = \"geom_area\",\n                  \"Smooth\" = \"geom_smooth\",\n                  \"Column\" = \"geom_col\"\n                ),\n                selected = \"geom_line\",\n                width = \"100%\"\n              ) |> tooltip(\"Choose the type of plot geometry\"),\n              \n              selectInput(\n                ns(\"plot_color\"),\n                \"Color by\",\n                choices = list(\"None\" = \"null\"),\n                selected = \"null\",\n                width = \"100%\"\n              ) |> tooltip(\"Group data by color using a column\"),\n              \n              selectInput(\n                ns(\"plot_linetype\"),\n                \"Line Type by\",\n                choices = list(\"None\" = \"null\"),\n                selected = \"null\",\n                width = \"100%\"\n              ) |> tooltip(\"Group data by line type using a column\")\n            ),\n            \n            # Visual Style\n            div(class = \"mb-3\",\n              h6(\"Visual Style\", class = \"text-muted mb-2\"),\n              div(class = \"row g-1\",\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"line_width\"),\n                    \"Line Size\",\n                    value = 1,\n                    min = 0.1,\n                    max = 5,\n                    step = 0.1,\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"point_size\"),\n                    \"Point Size\", \n                    value = 2,\n                    min = 0.5,\n                    max = 10,\n                    step = 0.5,\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"alpha\"),\n                    \"Transparency\",\n                    value = 1.0,\n                    min = 0.1,\n                    max = 1.0,\n                    step = 0.1,\n                    width = \"100%\"\n                  )\n                )\n              )\n            ),\n            \n            # Theme & Colors\n            div(class = \"mb-3\",\n              h6(\"Theme & Colors\", class = \"text-muted mb-2\"),\n              selectInput(\n                ns(\"plot_theme\"),\n                \"Theme\",\n                choices = list(\n                  \"Classic\" = \"theme_classic\",\n                  \"Minimal\" = \"theme_minimal\", \n                  \"Dark\" = \"theme_dark\",\n                  \"Light\" = \"theme_light\",\n                  \"BW\" = \"theme_bw\",\n                  \"Void\" = \"theme_void\"\n                ),\n                selected = \"theme_classic\",\n                width = \"100%\"\n              ),\n              selectInput(\n                ns(\"color_palette\"),\n                \"Color Palette\",\n                choices = list(\n                  \"Default\" = \"default\",\n                  \"Viridis\" = \"viridis\",\n                  \"Set1\" = \"Set1\",\n                  \"Set2\" = \"Set2\", \n                  \"Dark2\" = \"Dark2\",\n                  \"Paired\" = \"Paired\"\n                ),\n                selected = \"default\",\n                width = \"100%\"\n              )\n            ),\n            \n            # Axis Controls\n            div(class = \"mb-3\",\n              h6(\"Axis Controls\", class = \"text-muted mb-2\"),\n              div(class = \"row g-1\",\n                div(class = \"col-6\",\n                  selectInput(\n                    ns(\"x_trans\"),\n                    \"X Transform\",\n                    choices = list(\n                      \"Linear\" = \"identity\",\n                      \"Log\" = \"log\",\n                      \"Log10\" = \"log10\",\n                      \"Sqrt\" = \"sqrt\"\n                    ),\n                    selected = \"identity\",\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-6\",\n                  selectInput(\n                    ns(\"y_trans\"),\n                    \"Y Transform\", \n                    choices = list(\n                      \"Linear\" = \"identity\",\n                      \"Log\" = \"log\",\n                      \"Log10\" = \"log10\",\n                      \"Sqrt\" = \"sqrt\"\n                    ),\n                    selected = \"identity\",\n                    width = \"100%\"\n                  )\n                )\n              )\n            ),\n            \n            # Faceting\n            div(class = \"mb-3\",\n              h6(\"Faceting\", class = \"text-muted mb-2\"),\n              div(class = \"row g-1\",\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"plot_facet_start\"),\n                    \"Facet Start\",\n                    value = 1,\n                    min = 1,\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"plot_facet_end\"),\n                    \"Facet End\", \n                    value = 0,\n                    min = 0,\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"plot_facet_nrow\"),\n                    \"Facet Rows\",\n                    value = 2,\n                    min = 1,\n                    width = \"100%\"\n                  )\n                )\n              ) |> tooltip(\"Create subplots by extracting characters from series names\")\n            ),\n            \n            # Grid Lines\n            div(class = \"mb-3\",\n              h6(\"Grid Lines\", class = \"text-muted mb-2\"),\n              \n              # Vertical Grid Type Selection\n              div(class = \"mb-2\",\n                selectInput(\n                  ns(\"vertical_grid_type\"),\n                  \"Vertical Grid Type\",\n                  choices = list(\n                    \"Auto-detect\" = \"auto\",\n                    \"Numeric Values\" = \"numeric\", \n                    \"Timestamp\" = \"timestamp\"\n                  ),\n                  selected = \"auto\",\n                  width = \"100%\"\n                ) |> tooltip(\"Choose how to interpret X-axis data for vertical grids. Auto-detect uses data type, Numeric treats as numbers, Timestamp treats as time data.\")\n              ),\n              \n              # Major Vertical Grid\n              checkboxInput(ns(\"enable_major_vgrid\"), \"Major Vertical Grid\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_major_vgrid\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  numericInput(\n                    ns(\"major_vgrid_breaks\"),\n                    \"Grid Interval\",\n                    value = 10,\n                    min = 1,\n                    step = 1,\n                    width = \"100%\"\n                  ) |> tooltip(\"Interval between vertical grid lines. For numeric: spacing value. For timestamp: interval in minutes.\"),\n                  div(class = \"row g-1\",\n                    div(class = \"col-4\",\n                      selectInput(\n                        ns(\"major_vgrid_linetype\"),\n                        \"Line Type\",\n                        choices = list(\n                          \"Solid\" = \"solid\",\n                          \"Dashed\" = \"dashed\",\n                          \"Dotted\" = \"dotted\"\n                        ),\n                        selected = \"solid\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-4\",\n                      numericInput(\n                        ns(\"major_vgrid_linewidth\"),\n                        \"Width\",\n                        value = 0.5,\n                        min = 0.1,\n                        max = 2,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-4\",\n                      selectInput(\n                        ns(\"major_vgrid_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Grey\" = \"grey90\",\n                          \"Light Grey\" = \"grey95\",\n                          \"White\" = \"white\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"grey90\",\n                        width = \"100%\"\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Major Horizontal Grid\n              checkboxInput(ns(\"enable_major_hgrid\"), \"Major Horizontal Grid\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_major_hgrid\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  numericInput(\n                    ns(\"major_hgrid_breaks\"),\n                    \"Grid Interval\",\n                    value = 5,\n                    min = 0.1,\n                    step = 0.1,\n                    width = \"100%\"\n                  ) |> tooltip(\"Spacing between horizontal grid lines\"),\n                  div(class = \"row g-1\",\n                    div(class = \"col-4\",\n                      selectInput(\n                        ns(\"major_hgrid_linetype\"),\n                        \"Line Type\",\n                        choices = list(\n                          \"Solid\" = \"solid\",\n                          \"Dashed\" = \"dashed\",\n                          \"Dotted\" = \"dotted\"\n                        ),\n                        selected = \"solid\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-4\",\n                      numericInput(\n                        ns(\"major_hgrid_linewidth\"),\n                        \"Width\",\n                        value = 0.5,\n                        min = 0.1,\n                        max = 2,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-4\",\n                      selectInput(\n                        ns(\"major_hgrid_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Grey\" = \"grey90\",\n                          \"Light Grey\" = \"grey95\",\n                          \"White\" = \"white\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"grey90\",\n                        width = \"100%\"\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Minor Vertical Grid\n              checkboxInput(ns(\"enable_minor_vgrid\"), \"Minor Vertical Grid\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_minor_vgrid\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  numericInput(\n                    ns(\"minor_vgrid_breaks\"),\n                    \"Grid Interval\",\n                    value = 2,\n                    min = 0.1,\n                    step = 0.1,\n                    width = \"100%\"\n                  ) |> tooltip(\"Spacing between minor vertical grid lines\"),\n                  div(class = \"row g-1\",\n                    div(class = \"col-4\",\n                      selectInput(\n                        ns(\"minor_vgrid_linetype\"),\n                        \"Line Type\",\n                        choices = list(\n                          \"Solid\" = \"solid\",\n                          \"Dashed\" = \"dashed\",\n                          \"Dotted\" = \"dotted\"\n                        ),\n                        selected = \"solid\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-4\",\n                      numericInput(\n                        ns(\"minor_vgrid_linewidth\"),\n                        \"Width\",\n                        value = 0.25,\n                        min = 0.1,\n                        max = 1,\n                        step = 0.05,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-4\",\n                      selectInput(\n                        ns(\"minor_vgrid_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Light Grey\" = \"grey95\",\n                          \"Grey\" = \"grey90\",\n                          \"White\" = \"white\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"grey95\",\n                        width = \"100%\"\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Minor Horizontal Grid\n              checkboxInput(ns(\"enable_minor_hgrid\"), \"Minor Horizontal Grid\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_minor_hgrid\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  numericInput(\n                    ns(\"minor_hgrid_breaks\"),\n                    \"Grid Interval\",\n                    value = 1,\n                    min = 0.1,\n                    step = 0.1,\n                    width = \"100%\"\n                  ) |> tooltip(\"Spacing between minor horizontal grid lines\"),\n                  div(class = \"row g-1\",\n                    div(class = \"col-4\",\n                      selectInput(\n                        ns(\"minor_hgrid_linetype\"),\n                        \"Line Type\",\n                        choices = list(\n                          \"Solid\" = \"solid\",\n                          \"Dashed\" = \"dashed\",\n                          \"Dotted\" = \"dotted\"\n                        ),\n                        selected = \"solid\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-4\",\n                      numericInput(\n                        ns(\"minor_hgrid_linewidth\"),\n                        \"Width\",\n                        value = 0.25,\n                        min = 0.1,\n                        max = 1,\n                        step = 0.05,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-4\",\n                      selectInput(\n                        ns(\"minor_hgrid_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Light Grey\" = \"grey95\",\n                          \"Grey\" = \"grey90\",\n                          \"White\" = \"white\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"grey95\",\n                        width = \"100%\"\n                      )\n                    )\n                  )\n                )\n              )\n            ),\n            \n            # Axis Limits\n            div(class = \"mb-3\",\n              h6(\"Axis Limits\", class = \"text-muted mb-2\"),\n              \n              # Y Axis Limits with individual toggles\n              div(class = \"row g-1\",\n                div(class = \"col-6\",\n                  checkboxInput(ns(\"enable_y_start\"), \"Set Y Start\"),\n                  conditionalPanel(\n                    condition = paste0(\"input['\", ns(\"enable_y_start\"), \"']\"),\n                    div(class = \"ms-3 border-start ps-2\",\n                      numericInput(\n                        ns(\"y_start\"),\n                        \"Y Start\",\n                        value = 0,\n                        width = \"100%\"\n                      )\n                    )\n                  )\n                ),\n                div(class = \"col-6\",\n                  checkboxInput(ns(\"enable_y_end\"), \"Set Y End\"),\n                  conditionalPanel(\n                    condition = paste0(\"input['\", ns(\"enable_y_end\"), \"']\"),\n                    div(class = \"ms-3 border-start ps-2\",\n                      numericInput(\n                        ns(\"y_end\"),\n                        \"Y End\",\n                        value = 100,\n                        width = \"100%\"\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # X Axis Type Selection\n              selectInput(\n                ns(\"x_limit_type\"),\n                \"X-Axis Type\",\n                choices = list(\n                  \"Numeric Value\" = \"numeric\",\n                  \"Timestamp\" = \"timestamp\"\n                ),\n                selected = \"numeric\",\n                width = \"100%\"\n              ),\n              \n              # X Axis Limits with individual toggles\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"x_limit_type\"), \"'] == 'numeric'\"),\n                div(class = \"row g-1\",\n                  div(class = \"col-6\",\n                    checkboxInput(ns(\"enable_x_start_numeric\"), \"Set X Start\"),\n                    conditionalPanel(\n                      condition = paste0(\"input['\", ns(\"enable_x_start_numeric\"), \"']\"),\n                      div(class = \"ms-3 border-start ps-2\",\n                        numericInput(\n                          ns(\"x_start_numeric\"),\n                          \"X Start\",\n                          value = 0,\n                          width = \"100%\"\n                        )\n                      )\n                    )\n                  ),\n                  div(class = \"col-6\",\n                    checkboxInput(ns(\"enable_x_end_numeric\"), \"Set X End\"),\n                    conditionalPanel(\n                      condition = paste0(\"input['\", ns(\"enable_x_end_numeric\"), \"']\"),\n                      div(class = \"ms-3 border-start ps-2\",\n                        numericInput(\n                          ns(\"x_end_numeric\"),\n                          \"X End\",\n                          value = 100,\n                          width = \"100%\"\n                        )\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"x_limit_type\"), \"'] == 'timestamp'\"),\n                div(class = \"row g-1\",\n                  div(class = \"col-6\",\n                    checkboxInput(ns(\"enable_x_start_timestamp\"), \"Set X Start\"),\n                    conditionalPanel(\n                      condition = paste0(\"input['\", ns(\"enable_x_start_timestamp\"), \"']\"),\n                      div(class = \"ms-3 border-start ps-2\",\n                        dateInput(\n                          ns(\"x_start_date\"),\n                          \"Start Date\",\n                          width = \"100%\"\n                        ),\n                        timeInput(\n                          ns(\"x_start_time\"),\n                          \"Start Time\",\n                          value = strptime(\"00:00:00\", \"%T\")\n                        )\n                      )\n                    )\n                  ),\n                  div(class = \"col-6\",\n                    checkboxInput(ns(\"enable_x_end_timestamp\"), \"Set X End\"),\n                    conditionalPanel(\n                      condition = paste0(\"input['\", ns(\"enable_x_end_timestamp\"), \"']\"),\n                      div(class = \"ms-3 border-start ps-2\",\n                        dateInput(\n                          ns(\"x_end_date\"),\n                          \"End Date\",\n                          width = \"100%\"\n                        ),\n                        timeInput(\n                          ns(\"x_end_time\"),\n                          \"End Time\",\n                          value = strptime(\"23:59:59\", \"%T\")\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            ),\n            \n            # Font sizes\n            div(class = \"mb-3\",\n              h6(\"Font Sizes\", class = \"text-muted mb-2\"),\n              div(class = \"row g-1\",\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"title_font_size\"),\n                    \"Title\",\n                    value = 14,\n                    min = 8,\n                    max = 30,\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"xaxis_font_size\"),\n                    \"X-Axis\",\n                    value = 12,\n                    min = 8,\n                    max = 24,\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-4\",\n                  numericInput(\n                    ns(\"yaxis_font_size\"),\n                    \"Y-Axis\",\n                    value = 12,\n                    min = 8,\n                    max = 24,\n                    width = \"100%\"\n                  )\n                )\n              )\n            ),\n            \n            # Legend Controls\n            div(class = \"mb-3\",\n              h6(\"Legend\", class = \"text-muted mb-2\"),\n              div(class = \"row g-1\",\n                div(class = \"col-6\",\n                  selectInput(\n                    ns(\"legend_position\"),\n                    \"Position\",\n                    choices = list(\n                      \"Right\" = \"right\",\n                      \"Top\" = \"top\", \n                      \"Bottom\" = \"bottom\",\n                      \"Left\" = \"left\",\n                      \"None\" = \"none\"\n                    ),\n                    selected = \"right\",\n                    width = \"100%\"\n                  )\n                ),\n                div(class = \"col-6\",\n                  numericInput(\n                    ns(\"legend_font_size\"),\n                    \"Font Size\",\n                    value = 12,\n                    min = 8,\n                    max = 20,\n                    width = \"100%\"\n                  )\n                )\n              )\n            ),\n            \n            # Lines\n            div(class = \"mb-3\",\n              h6(\"Lines\", class = \"text-muted mb-2\"),\n              \n              # Trend Line\n              checkboxInput(\n                ns(\"add_smooth\"),\n                \"Trend Line\",\n                value = FALSE\n              ) |> tooltip(\"Add a smooth trend line to the plot\"),\n              \n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"add_smooth\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"smooth_name\"),\n                    \"Legend Name\",\n                    value = \"Trend\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  selectInput(\n                    ns(\"smooth_method\"),\n                    \"Method\",\n                    choices = list(\n                      \"Loess\" = \"loess\",\n                      \"Linear\" = \"lm\",\n                      \"GAM\" = \"gam\"\n                    ),\n                    selected = \"loess\",\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"smooth_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Solid\" = \"solid\",\n                          \"Dashed\" = \"dashed\", \n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"solid\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"smooth_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"smooth_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Red\" = \"red\",\n                          \"Blue\" = \"blue\",\n                          \"Green\" = \"green\",\n                          \"Purple\" = \"purple\",\n                          \"Orange\" = \"orange\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"red\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"smooth_legend\"), \"Legend\", value = TRUE)\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Horizontal Line 1\n              checkboxInput(ns(\"enable_hline_1\"), \"Horizontal Line 1\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_hline_1\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"hline_1_name\"),\n                    \"Legend Name\",\n                    value = \"H-Line 1\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  numericInput(\n                    ns(\"hline_1\"),\n                    \"Y Position\",\n                    value = 0,\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"hline_1_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Dashed\" = \"dashed\",\n                          \"Solid\" = \"solid\",\n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"dashed\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"hline_1_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"hline_1_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Red\" = \"red\",\n                          \"Blue\" = \"blue\",\n                          \"Green\" = \"green\",\n                          \"Purple\" = \"purple\",\n                          \"Orange\" = \"orange\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"red\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"hline_1_legend\"), \"Legend\", value = FALSE)\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Horizontal Line 2\n              checkboxInput(ns(\"enable_hline_2\"), \"Horizontal Line 2\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_hline_2\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"hline_2_name\"),\n                    \"Legend Name\",\n                    value = \"H-Line 2\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  numericInput(\n                    ns(\"hline_2\"),\n                    \"Y Position\",\n                    value = 0,\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"hline_2_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Dashed\" = \"dashed\",\n                          \"Solid\" = \"solid\",\n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"dashed\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"hline_2_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"hline_2_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Blue\" = \"blue\",\n                          \"Red\" = \"red\",\n                          \"Green\" = \"green\",\n                          \"Purple\" = \"purple\",\n                          \"Orange\" = \"orange\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"blue\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"hline_2_legend\"), \"Legend\", value = FALSE)\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Horizontal Line 3\n              checkboxInput(ns(\"enable_hline_3\"), \"Horizontal Line 3\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_hline_3\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"hline_3_name\"),\n                    \"Legend Name\",\n                    value = \"H-Line 3\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  numericInput(\n                    ns(\"hline_3\"),\n                    \"Y Position\",\n                    value = 0,\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"hline_3_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Dashed\" = \"dashed\",\n                          \"Solid\" = \"solid\",\n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"dashed\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"hline_3_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"hline_3_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Purple\" = \"purple\",\n                          \"Red\" = \"red\",\n                          \"Blue\" = \"blue\",\n                          \"Green\" = \"green\",\n                          \"Orange\" = \"orange\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"purple\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"hline_3_legend\"), \"Legend\", value = FALSE)\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Horizontal Line 4\n              checkboxInput(ns(\"enable_hline_4\"), \"Horizontal Line 4\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_hline_4\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"hline_4_name\"),\n                    \"Legend Name\",\n                    value = \"H-Line 4\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  numericInput(\n                    ns(\"hline_4\"),\n                    \"Y Position\",\n                    value = 0,\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"hline_4_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Dashed\" = \"dashed\",\n                          \"Solid\" = \"solid\",\n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"dashed\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"hline_4_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"hline_4_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Orange\" = \"orange\",\n                          \"Red\" = \"red\",\n                          \"Blue\" = \"blue\",\n                          \"Green\" = \"green\",\n                          \"Purple\" = \"purple\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"orange\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"hline_4_legend\"), \"Legend\", value = FALSE)\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Vertical Line 1\n              checkboxInput(ns(\"enable_vline_1\"), \"Vertical Line 1\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_vline_1\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"vline_1_name\"),\n                    \"Legend Name\",\n                    value = \"V-Line 1\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  numericInput(\n                    ns(\"vline_1\"),\n                    \"X Position\",\n                    value = 0,\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"vline_1_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Dashed\" = \"dashed\",\n                          \"Solid\" = \"solid\",\n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"dashed\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"vline_1_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"vline_1_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Red\" = \"red\",\n                          \"Blue\" = \"blue\",\n                          \"Green\" = \"green\",\n                          \"Purple\" = \"purple\",\n                          \"Orange\" = \"orange\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"red\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"vline_1_legend\"), \"Legend\", value = FALSE)\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Vertical Line 2\n              checkboxInput(ns(\"enable_vline_2\"), \"Vertical Line 2\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_vline_2\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"vline_2_name\"),\n                    \"Legend Name\",\n                    value = \"V-Line 2\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  numericInput(\n                    ns(\"vline_2\"),\n                    \"X Position\",\n                    value = 0,\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"vline_2_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Dashed\" = \"dashed\",\n                          \"Solid\" = \"solid\",\n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"dashed\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"vline_2_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"vline_2_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Blue\" = \"blue\",\n                          \"Red\" = \"red\",\n                          \"Green\" = \"green\",\n                          \"Purple\" = \"purple\",\n                          \"Orange\" = \"orange\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"blue\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"vline_2_legend\"), \"Legend\", value = FALSE)\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Vertical Line 3\n              checkboxInput(ns(\"enable_vline_3\"), \"Vertical Line 3\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_vline_3\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"vline_3_name\"),\n                    \"Legend Name\",\n                    value = \"V-Line 3\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  numericInput(\n                    ns(\"vline_3\"),\n                    \"X Position\",\n                    value = 0,\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"vline_3_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Dashed\" = \"dashed\",\n                          \"Solid\" = \"solid\",\n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"dashed\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"vline_3_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"vline_3_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Purple\" = \"purple\",\n                          \"Red\" = \"red\",\n                          \"Blue\" = \"blue\",\n                          \"Green\" = \"green\",\n                          \"Orange\" = \"orange\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"purple\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"vline_3_legend\"), \"Legend\", value = FALSE)\n                      )\n                    )\n                  )\n                )\n              ),\n              \n              # Vertical Line 4\n              checkboxInput(ns(\"enable_vline_4\"), \"Vertical Line 4\"),\n              conditionalPanel(\n                condition = paste0(\"input['\", ns(\"enable_vline_4\"), \"']\"),\n                div(class = \"ms-3 border-start ps-2\",\n                  textInput(\n                    ns(\"vline_4_name\"),\n                    \"Legend Name\",\n                    value = \"V-Line 4\",\n                    placeholder = \"Name for legend...\",\n                    width = \"100%\"\n                  ),\n                  numericInput(\n                    ns(\"vline_4\"),\n                    \"X Position\",\n                    value = 0,\n                    width = \"100%\"\n                  ),\n                  div(class = \"row g-1\",\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"vline_4_linetype\"),\n                        \"Type\",\n                        choices = list(\n                          \"Dashed\" = \"dashed\",\n                          \"Solid\" = \"solid\",\n                          \"Dotted\" = \"dotted\",\n                          \"Dot-dash\" = \"dotdash\"\n                        ),\n                        selected = \"dashed\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      numericInput(\n                        ns(\"vline_4_linewidth\"),\n                        \"Width\",\n                        value = 1,\n                        min = 0.1,\n                        max = 3,\n                        step = 0.1,\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      selectInput(\n                        ns(\"vline_4_color\"),\n                        \"Color\",\n                        choices = list(\n                          \"Orange\" = \"orange\",\n                          \"Red\" = \"red\",\n                          \"Blue\" = \"blue\",\n                          \"Green\" = \"green\",\n                          \"Purple\" = \"purple\",\n                          \"Black\" = \"black\"\n                        ),\n                        selected = \"orange\",\n                        width = \"100%\"\n                      )\n                    ),\n                    div(class = \"col-3\",\n                      div(style = \"margin-top: 25px;\",\n                        checkboxInput(ns(\"vline_4_legend\"), \"Legend\", value = FALSE)\n                      )\n                    )\n                  )\n                )\n              )\n            ),\n            \n            # Download\n            div(class = \"mt-auto\",\n              downloadButton(\n                ns(\"download_output\"), \n                \"Download Plot\",\n                icon = icon(\"download\"),\n                class = \"btn-outline-primary w-100\"\n              ) |> tooltip(\"Download the current plot as file\")\n            )\n          ),\n          \n          # Plot Display Content\n          layout_sidebar(\n            sidebar = sidebar(\n              title = \"Plotting R Code\",\n              width = 600,\n              position = \"right\",\n              \n              # Tabbed ace editors for different plot types\n              navset_card_pill(\n                nav_panel(\n                  \"Text\",\n                  icon = icon(\"file-text\"),\n                  aceEditor_pre(ns(\"r_code_plot_text\"), value = ggplot_text_template)\n                ),\n                nav_panel(\n                  \"Data Processing\",\n                  icon = icon(\"cogs\"),\n                  aceEditor_pre(ns(\"r_code_plot_data_processing\"), value = ggplot_data_processing_template)\n                ),\n                nav_panel(\n                  \"Base Setup\",\n                  icon = icon(\"layer-group\"),\n                  aceEditor_pre(ns(\"r_code_plot_base_setup\"), value = ggplot_base_setup_template)\n                ),\n                nav_panel(\n                  \"Themes & Style\",\n                  icon = icon(\"palette\"),\n                  aceEditor_pre(ns(\"r_code_plot_themes_styling\"), value = ggplot_themes_styling_template)\n                ),\n                nav_panel(\n                  \"Lines & Overlays\",\n                  icon = icon(\"chart-line\"),\n                  aceEditor_pre(ns(\"r_code_plot_statistical_overlays\"), value = ggplot_statistical_overlays_template)\n                ),\n                nav_panel(\n                  \"Grid & Axes\",\n                  icon = icon(\"border-all\"),\n                  aceEditor_pre(ns(\"r_code_plot_grid_axes\"), value = ggplot_grid_axes_template)\n                ),\n                nav_panel(\n                  \"Faceting & Final\",\n                  icon = icon(\"th\"),\n                  aceEditor_pre(ns(\"r_code_plot_faceting_final\"), value = ggplot_faceting_final_template)\n                ),\n                nav_panel(\n                  \"Combined Static\",\n                  icon = icon(\"image\"),\n                  aceEditor_pre(ns(\"r_code_plot_static\"), value = ggplot_static_template)\n                ),\n                nav_panel(\n                  \"Interactive\", \n                  icon = icon(\"chart-area\"),\n                  aceEditor_pre(ns(\"r_code_plot_interactive\"), value = ggplot_interactive_template)\n                ),\n                nav_panel(\n                  \"Table\",\n                  icon = icon(\"table\"),\n                  aceEditor_pre(ns(\"r_code_plot_table\"), value = ggplot_table_template)\n                ),\n                nav_panel(\n                  \"Final\",\n                  icon = icon(\"code\"),\n                  aceEditor_pre(ns(\"r_code_plot_final\"), value = ggplot_final_template)\n                )\n              ),\n              open = FALSE\n            ),\n            card(\n              full_screen = TRUE,\n              card_header(\"Generated Output\"),\n              uiOutput(ns(\"plot_output\"))\n            )\n          )\n        )\n      )\n    ) # Close navset_card_pill\n  ) # Close module-container div\n}","type":"text"},{"name":"server_global.R","content":"#' Data Plotter Server Function\r\n#'\r\n#' @param input Shiny input object\r\n#' @param output Shiny output object\r\n#' @param session Shiny session object\r\n#' @export\r\nserver_global <- function(input, output, session) {\r\n  options(shiny.maxRequestSize = 1000 * 1024^2) # 1GB\r\n  \r\n  # Initialize dark mode - only call this when session is available\r\n  tryCatch({\r\n    toggle_dark_mode(mode = \"dark\")\r\n  }, error = function(e) {\r\n    # Ignore errors if called outside of Shiny session\r\n    cat(\"Note: toggle_dark_mode skipped (not in Shiny session)\\n\")\r\n  })\r\n\r\n  # JSON-Based Template Save/Load Logic\r\n  safe_input_value <- function(val) {\r\n    if (is.null(val)) {\r\n      return(NULL)\r\n    } else if (is.list(val) && length(val) > 1) {\r\n      return(as.character(val))\r\n    } else if (inherits(val, c(\"Date\", \"POSIXct\", \"POSIXlt\"))) {\r\n      return(as.character(val))\r\n    } else if (is.logical(val) || is.numeric(val)) {\r\n      return(val)\r\n    } else {\r\n      return(as.character(val))\r\n    }\r\n  }\r\n\r\n  # Initialize download handler when session is available\r\n  tryCatch({\r\n    output$download_template <- downloadHandler(\r\n      filename = function() {\r\n        req(input$template_file_name)\r\n        paste0(tools::file_path_sans_ext(input$template_file_name), \".json\")\r\n      },\r\n      content = function(file) {\r\n        tryCatch({\r\n          all_inputs_list <- reactiveValuesToList(input)\r\n          \r\n          cat(\"=== JSON TEMPLATE SAVE ===\\n\")\r\n          cat(\"Total inputs captured:\", length(all_inputs_list), \"\\n\")\r\n          \r\n          # Get current module counts\r\n          current_importer_count <- isolate(importer_counter())\r\n          current_plotter_count <- isolate(plotter_counter())\r\n          \r\n          # Split inputs by category\r\n          general_inputs <- list()\r\n          importer_inputs <- list()\r\n          plotter_inputs <- list()\r\n          ace_inputs <- list()\r\n          \r\n          for (input_name in names(all_inputs_list)) {\r\n            val <- safe_input_value(all_inputs_list[[input_name]])\r\n            \r\n            if (grepl(\"r_code\", input_name)) {\r\n              ace_inputs[[input_name]] <- val\r\n            } else if (grepl(\"data_import_module_[0-9]+\", input_name)) {\r\n              importer_inputs[[input_name]] <- val\r\n            } else if (grepl(\"plotter_[0-9]+\", input_name)) {\r\n              plotter_inputs[[input_name]] <- val\r\n            } else {\r\n              general_inputs[[input_name]] <- val\r\n            }\r\n          }\r\n          \r\n          # Create structured template\r\n          template_data <- list(\r\n            metadata = list(\r\n              template_version = \"2.0\",\r\n              created_date = as.character(Sys.time()),\r\n              importer_count = current_importer_count,\r\n              plotter_count = current_plotter_count,\r\n              total_inputs = length(all_inputs_list)\r\n            ),\r\n            modules = list(\r\n              importers = current_importer_count,\r\n              plotters = current_plotter_count\r\n            ),\r\n            inputs = list(\r\n              general = general_inputs,\r\n              importers = importer_inputs,\r\n              plotters = plotter_inputs,\r\n              ace_editors = ace_inputs\r\n            )\r\n          )\r\n          \r\n          # Write JSON file\r\n          jsonlite::write_json(template_data, file, pretty = TRUE, auto_unbox = TRUE)\r\n          \r\n          cat(\"Saved:\", length(general_inputs), \"general,\", length(importer_inputs), \"importer,\", \r\n              length(plotter_inputs), \"plotter,\", length(ace_inputs), \"ace inputs\\n\")\r\n          \r\n          showNotification(paste(\"Template saved:\", current_importer_count, \"importers,\", \r\n                                 current_plotter_count, \"plotters\"), type = \"message\")\r\n          \r\n        }, error = function(e) {\r\n          showNotification(paste(\"Error saving template:\", e$message), type = \"error\", duration = 10)\r\n          # Create minimal JSON file to prevent download failure\r\n          minimal_template <- list(\r\n            metadata = list(template_version = \"2.0\", error = e$message),\r\n            inputs = list()\r\n          )\r\n          jsonlite::write_json(minimal_template, file, pretty = TRUE, auto_unbox = TRUE)\r\n        })\r\n      }\r\n    )\r\n  }, error = function(e) {\r\n    # Ignore errors if called outside of Shiny session\r\n    cat(\"Note: downloadHandler skipped (not in Shiny session)\\n\")\r\n  })\r\n\r\n  observeEvent(input$template_upload, {\r\n    req(input$template_upload)\r\n    tryCatch({\r\n      # Load JSON template\r\n      template_data <- jsonlite::fromJSON(input$template_upload$datapath, simplifyVector = FALSE)\r\n      \r\n      cat(\"=== JSON TEMPLATE LOAD ===\\n\")\r\n      cat(\"Template version:\", if(!is.null(template_data$metadata$template_version)) template_data$metadata$template_version else \"unknown\", \"\\n\")\r\n      \r\n      # Validate template structure\r\n      if (is.null(template_data$metadata) || is.null(template_data$inputs)) {\r\n        showNotification(\"Invalid JSON template file structure\", type = \"error\", duration = 10)\r\n        return()\r\n      }\r\n      \r\n      # Extract module requirements\r\n      importer_count_needed <- if(!is.null(template_data$modules$importers)) as.integer(template_data$modules$importers) else 1\r\n      plotter_count_needed <- if(!is.null(template_data$modules$plotters)) as.integer(template_data$modules$plotters) else 0\r\n      \r\n      # Ensure valid counts\r\n      importer_count_needed <- max(1, importer_count_needed)\r\n      plotter_count_needed <- max(0, plotter_count_needed)\r\n      \r\n      cat(\"Modules needed - Importers:\", importer_count_needed, \"Plotters:\", plotter_count_needed, \"\\n\")\r\n      \r\n      # Get current counts\r\n      current_importer_count <- isolate(importer_counter())\r\n      current_plotter_count <- isolate(plotter_counter())\r\n      \r\n      cat(\"Current modules - Importers:\", current_importer_count, \"Plotters:\", current_plotter_count, \"\\n\")\r\n      \r\n      # STEP 1: Create required importer modules\r\n      if (current_importer_count < importer_count_needed) {\r\n        tabs_to_create <- importer_count_needed - current_importer_count\r\n        cat(\"Creating\", tabs_to_create, \"additional importer tabs\\n\")\r\n        \r\n        for (i in 1:tabs_to_create) {\r\n          current_count <- isolate(importer_counter()) + 1\r\n          importer_counter(current_count)\r\n          import_id <- paste0(\"data_import_module_\", current_count)\r\n\r\n          nav_insert(\r\n            id = \"mainmenu\",\r\n            target = \"Combined Data\",\r\n            position = \"before\",\r\n            nav = nav_panel(\r\n              title = paste(\"Import\", current_count),\r\n              ui_data_importer(import_id)\r\n            ),\r\n            session = session\r\n          )\r\n          \r\n          # Initialize server module\r\n          importer_module_output <- server_data_import(import_id, global_files)\r\n          current_instances <- importer_instances()\r\n          current_instances[[import_id]] <- importer_module_output\r\n          importer_instances(current_instances)\r\n          \r\n          # Observe tab rename trigger from this importer module\r\n          observeEvent(importer_module_output$tab_rename_trigger(), {\r\n            req(importer_module_output$tab_rename_trigger())\r\n            \r\n            rename_data <- importer_module_output$tab_rename_trigger()\r\n            cat(\"Importer tab rename triggered:\", rename_data$newName, \"\\n\")\r\n            \r\n            # Send message to JavaScript to update the tab\r\n            session$sendCustomMessage(\"updateNavTabTitle\", list(\r\n              moduleId = rename_data$moduleId,\r\n              newTitle = rename_data$newName,\r\n              oldTitle = rename_data$currentTitle\r\n            ))\r\n          })\r\n          \r\n          cat(\"Created importer:\", import_id, \"\\n\")\r\n        }\r\n      }\r\n      \r\n      # STEP 2: Create required plotter modules\r\n      if (current_plotter_count < plotter_count_needed) {\r\n        tabs_to_create <- plotter_count_needed - current_plotter_count\r\n        cat(\"Creating\", tabs_to_create, \"additional plotter tabs\\n\")\r\n        \r\n        for (i in 1:tabs_to_create) {\r\n          current_count <- isolate(plotter_counter()) + 1\r\n          plotter_counter(current_count)\r\n          plot_id <- paste0(\"plotter_\", current_count)\r\n\r\n          nav_insert(\r\n            id = \"mainmenu\",\r\n            target = \"Analysis\",\r\n            position = \"before\",\r\n            nav = nav_panel(\r\n              title = plot_id,\r\n              ui_plotter(plot_id)\r\n            ),\r\n            session = session\r\n          )\r\n          \r\n          # Initialize server module\r\n          plotter_module_output <- server_plotter(plot_id, data_combiner$df, input)\r\n          current_instances <- plotter_instances()\r\n          current_instances[[plot_id]] <- plotter_module_output\r\n          plotter_instances(current_instances)\r\n          \r\n          # Observe plot rename trigger from this plotter module\r\n          observeEvent(plotter_module_output$plot_rename_trigger(), {\r\n            req(plotter_module_output$plot_rename_trigger())\r\n            \r\n            rename_data <- plotter_module_output$plot_rename_trigger()\r\n            cat(\"Plotter tab rename triggered:\", rename_data$newName, \"\\n\")\r\n            \r\n            # Send message to JavaScript to update the tab\r\n            session$sendCustomMessage(\"updateNavTabTitle\", list(\r\n              moduleId = rename_data$moduleId,\r\n              newTitle = rename_data$newName,\r\n              oldTitle = rename_data$currentTitle\r\n            ))\r\n          })\r\n          \r\n          cat(\"Created plotter:\", plot_id, \"\\n\")\r\n        }\r\n      }\r\n      \r\n      # STEP 3: Apply inputs in order (modules are now ready)\r\n      cat(\"Applying template inputs...\\n\")\r\n      \r\n      # Helper function to safely update inputs\r\n      safe_update_input <- function(input_id, value) {\r\n        if (is.null(value)) return(FALSE)\r\n        \r\n        tryCatch({\r\n          current_val <- isolate(input[[input_id]])\r\n          \r\n          if (is.null(current_val)) {\r\n            cat(\"  Input\", input_id, \"not found, skipping\\n\")\r\n            return(FALSE)\r\n          }\r\n          \r\n          # Convert value based on current input type\r\n          if (is.logical(current_val)) {\r\n            updateCheckboxInput(session, input_id, value = as.logical(value))\r\n          } else if (is.numeric(current_val)) {\r\n            updateNumericInput(session, input_id, value = as.numeric(value))\r\n          } else if (inherits(current_val, \"Date\")) {\r\n            updateDateInput(session, input_id, value = as.Date(value))\r\n          } else if (is.character(value) && length(value) > 1) {\r\n            # Multiple values for selectize\r\n            updateSelectizeInput(session, input_id, selected = value)\r\n          } else {\r\n            # Try select first, then text\r\n            tryCatch({\r\n              updateSelectInput(session, input_id, selected = as.character(value))\r\n            }, error = function(e) {\r\n              updateTextInput(session, input_id, value = as.character(value))\r\n            })\r\n          }\r\n          \r\n          cat(\"  Updated\", input_id, \"=\", paste(value, collapse=\",\"), \"\\n\")\r\n          return(TRUE)\r\n        }, error = function(e) {\r\n          cat(\"  Failed to update\", input_id, \":\", e$message, \"\\n\")\r\n          return(FALSE)\r\n        })\r\n      }\r\n      \r\n      # Apply general inputs first\r\n      if (!is.null(template_data$inputs$general)) {\r\n        cat(\"Applying\", length(template_data$inputs$general), \"general inputs\\n\")\r\n        for (input_id in names(template_data$inputs$general)) {\r\n          safe_update_input(input_id, template_data$inputs$general[[input_id]])\r\n        }\r\n      }\r\n      \r\n      # Apply importer inputs\r\n      if (!is.null(template_data$inputs$importers)) {\r\n        cat(\"Applying\", length(template_data$inputs$importers), \"importer inputs\\n\")\r\n        for (input_id in names(template_data$inputs$importers)) {\r\n          safe_update_input(input_id, template_data$inputs$importers[[input_id]])\r\n        }\r\n      }\r\n      \r\n      # Apply ace editor inputs\r\n      if (!is.null(template_data$inputs$ace_editors)) {\r\n        cat(\"Applying\", length(template_data$inputs$ace_editors), \"ace editor inputs\\n\")\r\n        for (ace_id in names(template_data$inputs$ace_editors)) {\r\n          ace_value <- template_data$inputs$ace_editors[[ace_id]]\r\n          if (!is.null(ace_value) && nzchar(ace_value)) {\r\n            tryCatch({\r\n              updateAceEditor(session, ace_id, value = as.character(ace_value))\r\n              cat(\"  Updated ace editor:\", ace_id, \"\\n\")\r\n            }, error = function(e) {\r\n              cat(\"  Failed to update ace editor\", ace_id, \":\", e$message, \"\\n\")\r\n            })\r\n          }\r\n        }\r\n      }\r\n      \r\n      # Apply plotter inputs (these should work now that modules exist)\r\n      if (!is.null(template_data$inputs$plotters)) {\r\n        cat(\"Applying\", length(template_data$inputs$plotters), \"plotter inputs\\n\")\r\n        successful_count <- 0\r\n        \r\n        for (input_id in names(template_data$inputs$plotters)) {\r\n          if (safe_update_input(input_id, template_data$inputs$plotters[[input_id]])) {\r\n            successful_count <- successful_count + 1\r\n          }\r\n        }\r\n        \r\n        cat(\"Successfully applied\", successful_count, \"out of\", length(template_data$inputs$plotters), \"plotter inputs\\n\")\r\n      }\r\n      \r\n      showNotification(paste(\"Template loaded successfully:\", importer_count_needed, \"importers,\", \r\n                             plotter_count_needed, \"plotters\"), type = \"message\")\r\n      \r\n    }, error = function(e) {\r\n      showNotification(paste(\"Failed to load template:\", e$message), type = \"error\", duration = 10)\r\n      cat(\"Template load error:\", e$message, \"\\n\")\r\n    })\r\n  })\r\n\r\n  # Global File Management for Input Data Tab\r\n  global_files <- reactiveVal(list())\r\n  \r\n  # File upload handler for individual files\r\n  observeEvent(input$global_file_upload, {\r\n    req(input$global_file_upload)\r\n    \r\n    current_files <- global_files()\r\n    new_files <- input$global_file_upload\r\n    \r\n    for (i in 1:nrow(new_files)) {\r\n      file_name <- new_files$name[i]\r\n      file_path <- new_files$datapath[i]\r\n      \r\n      # Check if file already exists\r\n      if (file_name %in% names(current_files) && !input$overwrite_files) {\r\n        showNotification(\r\n          paste(\"File\", file_name, \"already exists. Enable overwrite to replace it.\"),\r\n          type = \"warning\"\r\n        )\r\n        next\r\n      }\r\n      \r\n      # Store file info\r\n      current_files[[file_name]] <- list(\r\n        name = file_name,\r\n        path = file_path,\r\n        size = file.info(file_path)$size,\r\n        uploaded = Sys.time(),\r\n        type = tools::file_ext(file_name),\r\n        upload_type = \"individual\"\r\n      )\r\n    }\r\n    \r\n    global_files(current_files)\r\n    showNotification(paste(\"Uploaded\", nrow(new_files), \"individual file(s)\"), type = \"message\")\r\n  })\r\n  \r\n  # Reactive values to track batched folder upload\r\n  folder_upload_state <- reactiveValues(\r\n    total_files_expected = 0,\r\n    files_processed = 0,\r\n    files_skipped = 0,\r\n    files_filtered = 0,\r\n    upload_in_progress = FALSE,\r\n    batches_received = 0,\r\n    total_batches = 0\r\n  )\r\n  \r\n  # Batched folder upload handler - receives file data from JavaScript in chunks\r\n  observeEvent(input$global_folder_upload_files_batch, {\r\n    req(input$global_folder_upload_files_batch)\r\n    \r\n    batch_data <- input$global_folder_upload_files_batch\r\n    batch_number <- batch_data$batchNumber\r\n    is_last_batch <- batch_data$isLastBatch\r\n    total_batches <- batch_data$totalBatches\r\n    \r\n    cat(\"=== FOLDER UPLOAD BATCH\", batch_number + 1, \"of\", total_batches, \"RECEIVED ===\\n\")\r\n    cat(\"Number of files in this batch:\", length(batch_data$files), \"\\n\")\r\n    cat(\"Is last batch:\", is_last_batch, \"\\n\")\r\n    \r\n    # Initialize or update upload state\r\n    if (batch_number == 0) {\r\n      folder_upload_state$upload_in_progress <- TRUE\r\n      folder_upload_state$total_batches <- total_batches\r\n      folder_upload_state$batches_received <- 0\r\n      cat(\"Starting new folder upload session\\n\")\r\n    }\r\n    \r\n    folder_upload_state$batches_received <- folder_upload_state$batches_received + 1\r\n    \r\n    current_files <- global_files()\r\n    batch_files_processed <- 0\r\n    batch_files_skipped <- 0\r\n    \r\n    # Process each file in this batch\r\n    for (file_info in batch_data$files) {\r\n      file_name <- file_info$name\r\n      data_url <- file_info$dataURL\r\n      original_path <- file_info$originalPath\r\n      \r\n      cat(\"Processing folder file:\", file_name, \"(original:\", original_path, \")\\n\")\r\n      \r\n      # Check if file already exists\r\n      if (file_name %in% names(current_files) && !input$overwrite_files) {\r\n        cat(\"File already exists, skipping:\", file_name, \"\\n\")\r\n        batch_files_skipped <- batch_files_skipped + 1\r\n        next\r\n      }\r\n      \r\n      # Decode the data URL and save to temp file\r\n      tryCatch({\r\n        # Remove data URL prefix\r\n        data_part <- sub(\"^data:[^,]*,\", \"\", data_url)\r\n        \r\n        # Decode base64\r\n        file_content <- base64enc::base64decode(data_part)\r\n        \r\n        # Create temporary file\r\n        temp_file <- tempfile(fileext = paste0(\".\", tools::file_ext(file_name)))\r\n        writeBin(file_content, temp_file)\r\n        \r\n        # Store file info\r\n        current_files[[file_name]] <- list(\r\n          name = file_name,\r\n          path = temp_file,\r\n          size = length(file_content),\r\n          uploaded = Sys.time(),\r\n          type = tools::file_ext(file_name),\r\n          upload_type = \"folder\",\r\n          original_path = original_path\r\n        )\r\n        \r\n        batch_files_processed <- batch_files_processed + 1\r\n        cat(\"Successfully processed:\", file_name, \"\\n\")\r\n        \r\n      }, error = function(e) {\r\n        cat(\"Error processing file\", file_name, \":\", e$message, \"\\n\")\r\n        showNotification(\r\n          paste(\"Error processing\", file_name, \":\", e$message),\r\n          type = \"error\"\r\n        )\r\n      })\r\n    }\r\n    \r\n    # Update cumulative counters\r\n    folder_upload_state$files_processed <- folder_upload_state$files_processed + batch_files_processed\r\n    folder_upload_state$files_skipped <- folder_upload_state$files_skipped + batch_files_skipped\r\n    \r\n    global_files(current_files)\r\n    \r\n    # Show progress notification\r\n    if (!is_last_batch) {\r\n      showNotification(\r\n        paste(\"Processed batch\", batch_number + 1, \"of\", total_batches, \r\n              \"(\", batch_files_processed, \"files in this batch)\"),\r\n        type = \"message\", duration = 2\r\n      )\r\n    } else {\r\n      # Final batch - show summary\r\n      folder_upload_state$upload_in_progress <- FALSE\r\n      \r\n      summary_msg <- paste(\"Folder upload complete:\", \r\n                           folder_upload_state$files_processed, \"files processed\")\r\n      if (folder_upload_state$files_skipped > 0) {\r\n        summary_msg <- paste0(summary_msg, \", \", folder_upload_state$files_skipped, \r\n                             \" files skipped (already exist)\")\r\n      }\r\n      \r\n      showNotification(summary_msg, type = \"message\", duration = 5)\r\n      cat(\"Folder upload complete:\", folder_upload_state$files_processed, \"processed,\", \r\n          folder_upload_state$files_skipped, \"skipped across\", total_batches, \"batches\\n\")\r\n    }\r\n    \r\n    cat(\"Batch\", batch_number + 1, \"complete:\", batch_files_processed, \"processed,\", \r\n        batch_files_skipped, \"skipped\\n\")\r\n  })\r\n  \r\n  # Remove selected files\r\n  observeEvent(input$remove_selected_files, {\r\n    req(input$global_file_list_rows_selected)\r\n    \r\n    current_files <- global_files()\r\n    selected_indices <- input$global_file_list_rows_selected\r\n    file_names <- names(current_files)\r\n    \r\n    if (length(selected_indices) > 0 && length(file_names) >= max(selected_indices)) {\r\n      files_to_remove <- file_names[selected_indices]\r\n      for (file_name in files_to_remove) {\r\n        current_files[[file_name]] <- NULL\r\n      }\r\n      global_files(current_files)\r\n      showNotification(paste(\"Removed\", length(files_to_remove), \"file(s)\"), type = \"message\")\r\n    }\r\n  })\r\n  \r\n  # Clear all files\r\n  observeEvent(input$clear_all_files, {\r\n    global_files(list())\r\n    showNotification(\"All files cleared\", type = \"message\")\r\n  })\r\n  \r\n  # File list display\r\n  tryCatch({\r\n    output$global_file_list <- DT::renderDT({\r\n      current_files <- global_files()\r\n      \r\n      if (length(current_files) == 0) {\r\n        data.frame(\r\n          Name = character(0),\r\n          Type = character(0),\r\n          Size = character(0),\r\n          Source = character(0),\r\n          Original_Path = character(0),\r\n          Uploaded = character(0)\r\n        )\r\n      } else {\r\n        file_df <- data.frame(\r\n          Name = names(current_files),\r\n          Type = sapply(current_files, function(x) x$type),\r\n          Size = sapply(current_files, function(x) {\r\n            size_mb <- round(x$size / 1024^2, 2)\r\n            paste(size_mb, \"MB\")\r\n          }),\r\n          Source = sapply(current_files, function(x) {\r\n            if (!is.null(x$upload_type)) {\r\n              if (x$upload_type == \"folder\") \"📁 Folder\" else \"📄 Individual\"\r\n            } else {\r\n              \"📄 Individual\"  # Default for existing files\r\n            }\r\n          }),\r\n          Original_Path = sapply(current_files, function(x) {\r\n            if (!is.null(x$original_path)) {\r\n              x$original_path\r\n            } else {\r\n              x$name  # Fallback to file name\r\n            }\r\n          }),\r\n          Uploaded = sapply(current_files, function(x) {\r\n            format(x$uploaded, \"%Y-%m-%d %H:%M:%S\")\r\n          }),\r\n          stringsAsFactors = FALSE\r\n        )\r\n        \r\n        DT::datatable(\r\n          file_df,\r\n          options = list(\r\n            pageLength = 15,\r\n            scrollX = TRUE,\r\n            searching = TRUE,\r\n            ordering = TRUE,\r\n            columnDefs = list(\r\n              list(width = '200px', targets = 0),  # Name column\r\n              list(width = '300px', targets = 4)   # Original_Path column\r\n            )\r\n          ),\r\n          selection = \"multiple\",\r\n          rownames = FALSE\r\n        )\r\n      }\r\n    })\r\n  }, error = function(e) {\r\n    cat(\"Note: global_file_list output skipped (not in Shiny session)\\n\")\r\n  })\r\n  \r\n  # File statistics\r\n  tryCatch({\r\n    output$file_stats <- renderText({\r\n      current_files <- global_files()\r\n      \r\n      if (length(current_files) == 0) {\r\n        \"No files uploaded\"\r\n      } else {\r\n        total_size <- sum(sapply(current_files, function(x) x$size))\r\n        total_size_mb <- round(total_size / 1024^2, 2)\r\n        \r\n        file_types <- table(sapply(current_files, function(x) x$type))\r\n        type_summary <- paste(names(file_types), \":\", file_types, collapse = \", \")\r\n        \r\n        paste(\r\n          \"Total files:\", length(current_files), \"\\n\",\r\n          \"Total size:\", total_size_mb, \"MB\\n\",\r\n          \"File types:\", type_summary\r\n        )\r\n      }\r\n    })\r\n  }, error = function(e) {\r\n    cat(\"Note: file_stats output skipped (not in Shiny session)\\n\")\r\n  })\r\n\r\n  # Dynamic Plotter Management\r\n  plotter_instances <- reactiveVal(list())\r\n  plotter_counter <- reactiveVal(0)\r\n\r\n  # Dynamic Data Import Management\r\n  importer_instances <- reactiveVal(list())\r\n  importer_counter <- reactiveVal(0)\r\n  \r\n  # Store custom tab names for importers\r\n  importer_tab_names <- reactiveVal(list())\r\n  # Also store current displayed titles to help with repeated renames\r\n  importer_current_titles <- reactiveVal(list())\r\n\r\n  # Data Import and Combination Logic\r\n  # Create reactive list of data frames from all active importers\r\n  list_of_df_reactives_for_combiner <- reactive({\r\n    current_importers <- importer_instances()\r\n    if (length(current_importers) == 0) {\r\n      return(list())\r\n    }\r\n    \r\n    # Extract the 'df' reactive from each importer instance\r\n    df_reactives <- lapply(current_importers, function(instance) {\r\n      if (!is.null(instance) && \"df\" %in% names(instance)) {\r\n        return(instance$df)\r\n      }\r\n      return(NULL)\r\n    })\r\n    \r\n    # Filter out any NULL values\r\n    Filter(Negate(is.null), df_reactives)\r\n  })\r\n  \r\n  # Initialize data combiner module\r\n  data_combiner <- tryCatch({\r\n    server_data_combiner(\r\n      \"combiner\", \r\n      list_of_df_reactives_for_combiner\r\n    )\r\n  }, error = function(e) {\r\n    cat(\"Note: data_combiner module skipped (not in Shiny session)\\n\")\r\n    # Return a dummy reactive for testing\r\n    reactive({ NULL })\r\n  })\r\n\r\n  # Dynamic Data Import Creation\r\n  observeEvent(input$insert_importer, {\r\n    current_count <- isolate(importer_counter()) + 1\r\n    importer_counter(current_count)\r\n    import_id <- paste0(\"data_import_module_\", current_count)\r\n\r\n    # Check if there's a custom name for this tab\r\n    current_names <- importer_tab_names()\r\n    tab_title <- if (!is.null(current_names[[import_id]])) {\r\n      current_names[[import_id]]\r\n    } else {\r\n      paste(\"Import\", current_count)\r\n    }\r\n\r\n    nav_insert(\r\n      id = \"mainmenu\",\r\n      target = \"Combined Data\",\r\n      position = \"before\",\r\n      nav = nav_panel(\r\n        title = tab_title,\r\n        ui_data_importer(import_id)\r\n      ),\r\n      session = session\r\n    )\r\n    \r\n    # Call the server module for the new importer, passing global files\r\n    importer_module_output <- server_data_import(import_id, global_files)\r\n    \r\n    # Store the module's output\r\n    current_instances <- importer_instances()\r\n    current_instances[[import_id]] <- importer_module_output\r\n    importer_instances(current_instances)\r\n    \r\n    # Observe tab rename trigger from this importer module\r\n    observeEvent(importer_module_output$tab_rename_trigger(), {\r\n      req(importer_module_output$tab_rename_trigger())\r\n      \r\n      rename_data <- importer_module_output$tab_rename_trigger()\r\n      cat(\"Manual importer tab rename triggered:\", rename_data$newName, \"\\n\")\r\n      \r\n      # Send message to JavaScript to update the tab\r\n      session$sendCustomMessage(\"updateNavTabTitle\", list(\r\n        moduleId = rename_data$moduleId,\r\n        newTitle = rename_data$newName,\r\n        oldTitle = rename_data$currentTitle\r\n      ))\r\n    })\r\n    \r\n    showNotification(\r\n      paste(\"Added data import tab:\", current_count), \r\n      type = \"message\"\r\n    )\r\n  })\r\n\r\n  # Initialize with one default data import tab\r\n  observeEvent(session$clientData, {\r\n    if (isolate(importer_counter()) == 0) {\r\n      # Trigger the insert_importer logic programmatically\r\n      current_count <- 1\r\n      importer_counter(current_count)\r\n      import_id <- paste0(\"data_import_module_\", current_count)\r\n\r\n      # Check for custom name\r\n      current_names <- importer_tab_names()\r\n      tab_title <- if (!is.null(current_names[[import_id]])) {\r\n        current_names[[import_id]]\r\n      } else {\r\n        paste(\"Import\", current_count)\r\n      }\r\n\r\n      nav_insert(\r\n        id = \"mainmenu\",\r\n        target = \"Combined Data\",\r\n        position = \"before\",\r\n        nav = nav_panel(\r\n          title = tab_title,\r\n          ui_data_importer(import_id)\r\n        ),\r\n        session = session\r\n      )\r\n      \r\n      # Call the server module for the initial importer, passing global files\r\n      importer_module_output <- server_data_import(import_id, global_files)\r\n      \r\n      # Store the module's output\r\n      current_instances <- list()\r\n      current_instances[[import_id]] <- importer_module_output\r\n      importer_instances(current_instances)\r\n      \r\n      # Observe tab rename trigger from this default importer module\r\n      observeEvent(importer_module_output$tab_rename_trigger(), {\r\n        req(importer_module_output$tab_rename_trigger())\r\n        \r\n        rename_data <- importer_module_output$tab_rename_trigger()\r\n        cat(\"Default importer tab rename triggered:\", rename_data$newName, \"\\n\")\r\n        \r\n        # Send message to JavaScript to update the tab\r\n        session$sendCustomMessage(\"updateNavTabTitle\", list(\r\n          moduleId = rename_data$moduleId,\r\n          newTitle = rename_data$newName,\r\n          oldTitle = rename_data$currentTitle\r\n        ))\r\n      })\r\n    }\r\n  }, once = TRUE)\r\n\r\n  # Dynamic Plotter Creation\r\n  observeEvent(input$insert_plot, {\r\n    current_count <- isolate(plotter_counter()) + 1\r\n    plotter_counter(current_count)\r\n    plot_id <- paste0(\"plotter_\", current_count)\r\n\r\n    nav_insert(\r\n      id = \"mainmenu\",\r\n      target = \"Analysis\",\r\n      position = \"before\",\r\n      nav = nav_panel(\r\n        title = plot_id,\r\n        ui_plotter(plot_id)\r\n      ),\r\n      session = session\r\n    )\r\n    \r\n    # Call the server module for the new plotter\r\n    plotter_module_output <- server_plotter(plot_id, data_combiner$df, input)\r\n    \r\n    # Store the module's output\r\n    current_instances <- plotter_instances()\r\n    current_instances[[plot_id]] <- plotter_module_output\r\n    plotter_instances(current_instances)\r\n    \r\n    # Observe plot rename trigger from this plotter module\r\n    observeEvent(plotter_module_output$plot_rename_trigger(), {\r\n      req(plotter_module_output$plot_rename_trigger())\r\n      \r\n      rename_data <- plotter_module_output$plot_rename_trigger()\r\n      cat(\"Manual plotter tab rename triggered:\", rename_data$newName, \"\\n\")\r\n      \r\n      # Send message to JavaScript to update the tab\r\n      session$sendCustomMessage(\"updateNavTabTitle\", list(\r\n        moduleId = rename_data$moduleId,\r\n        newTitle = rename_data$newName,\r\n        oldTitle = rename_data$currentTitle\r\n      ))\r\n    })\r\n    \r\n    showNotification(paste(\"Added plotter tab:\", plot_id), type = \"message\")\r\n  })\r\n\r\n  # Helper & Downloader R Code Execution\r\n  ace_server_functions(\"helper_input\")\r\n  observeEvent(input$helper_input, {\r\n    output$helper_output <- renderUI({\r\n      spsComps::shinyCatch({\r\n        eval(\r\n          parse(text = input$helper_input), \r\n          envir = new.env(parent = globalenv())\r\n        )\r\n      })\r\n    })\r\n  }, ignoreInit = FALSE, ignoreNULL = FALSE)\r\n\r\n  ace_server_functions(\"downloader_input\")\r\n  observeEvent(input$downloader_input, {\r\n    output$downloader_output <- renderUI({\r\n      spsComps::shinyCatch({\r\n        # Prepare the list of plot reactives for the downloader code\r\n        plots_to_download_map <- lapply(plotter_instances(), function(instance) {\r\n          if (!is.null(instance) && \"plot\" %in% names(instance) && \r\n              is.function(instance$plot)) {\r\n            return(instance$plot)\r\n          }\r\n          return(NULL)\r\n        })\r\n        plots_to_download_map <- Filter(Negate(is.null), plots_to_download_map)\r\n\r\n        # Environment for downloader code\r\n        downloader_env <- new.env(parent = globalenv())\r\n        downloader_env$dynamic_plots_map <- plots_to_download_map\r\n\r\n        eval(parse(text = input$downloader_input), envir = downloader_env)\r\n      })\r\n    })\r\n  }, ignoreInit = FALSE, ignoreNULL = FALSE)\r\n}","type":"text"},{"name":"template_combined_data_sample.R","content":"# Combined Data Sample Template\r\n\r\nr_code_combined_data_sample <- \"# R code for Combined Data Sample table.\r\n# df: The combined data.table.\r\nif (is.null(df)) {\r\n  # No data case\r\n  data.frame(\r\n    Message = 'No data available yet. Upload files and process them in Data Import tabs.'\r\n  ) |> datatable(options = list(dom = 't', ordering = FALSE), rownames = FALSE, class = 'compact')\r\n} else if (is.data.table(df) && nrow(df) > 0) {\r\n  sample_size <- min(nrow(df), 100) # Show up to 100 rows\r\n  datatable(df[sample(.N, sample_size)], \r\n                options = list(scrollX = TRUE, scrollY = '400px', pageLength = 10, searching = TRUE), \r\n                rownames = FALSE, \r\n                filter='top', \r\n                class='compact stripe')\r\n} else if (is.data.frame(df) && nrow(df) > 0) {\r\n  # Handle case where df is data.frame but not data.table\r\n  setDT(df)\r\n  sample_size <- min(nrow(df), 100)\r\n  datatable(df[sample(.N, sample_size)], \r\n                options = list(scrollX = TRUE, scrollY = '400px', pageLength = 10, searching = TRUE), \r\n                rownames = FALSE, \r\n                filter='top', \r\n                class='compact stripe')\r\n} else {\r\n  data.frame(\r\n    Message = 'Data processed but empty. Check processing settings.'\r\n  ) |> datatable(options = list(dom = 't', ordering = FALSE), rownames = FALSE, class = 'compact')\r\n}\r\n\"","type":"text"},{"name":"template_combined_data_summary.R","content":"# Combined Data Summary Template\r\n\r\nr_code_combined_data_summary <- \"# R code for Combined Data Summary table.\r\n# df: The combined data.table.\r\n# Expects 'value' and 'series' columns.\r\nif (is.null(df)) {\r\n  # No data case\r\n  data.frame(\r\n    Message = 'No data available yet. Please:',\r\n    Steps = c(\r\n      '1. Upload files in a Data Import tab',\r\n      '2. Configure pre/post-processing settings',\r\n      '3. Click \\\"Process & Combine All Files in This Importer\\\"',\r\n      '4. Data will appear here automatically'\r\n    )\r\n  ) |> datatable(options = list(dom = 't', ordering = FALSE), rownames = FALSE, class = 'compact')\r\n} else if (is.data.table(df) && nrow(df) > 0 && all(c('value', 'series') %in% names(df))) {\r\n  # Expected case with proper data structure\r\n  summary_dt <- df[, .(\r\n    Min = round(min(value, na.rm = TRUE), 3),\r\n    Mean = round(mean(value, na.rm = TRUE), 3),\r\n    Median = round(median(value, na.rm = TRUE), 3),\r\n    Max = round(max(value, na.rm = TRUE), 3),\r\n    SD = round(sd(value, na.rm = TRUE), 3),\r\n    Count = .N,\r\n    Missing_Values = sum(is.na(value))\r\n  ), by = .(series)][order(series)]\r\n  datatable(summary_dt, options = list(scrollX = TRUE, pageLength = 10), rownames = FALSE, filter='top', class='compact stripe')\r\n} else if (!is.null(df) && (is.data.frame(df) || is.data.table(df)) && nrow(df) > 0) {\r\n  # Fallback if expected columns are not present but we have some data\r\n  tryCatch({\r\n    # Suppress the specific dplyr warning from skimr\r\n    suppressWarnings(skim(df)) |> renderPrint() # Using renderPrint for skim output\r\n  }, error = function(e) {\r\n    # If skimr fails, show basic info\r\n    data.frame(\r\n      Info = c('Data available but structure unexpected', 'Column names:', paste(names(df), collapse = ', '), paste('Rows:', nrow(df)), paste('Columns:', ncol(df)))\r\n    ) |> datatable(options = list(dom = 't', ordering = FALSE), rownames = FALSE, class = 'compact')\r\n  })\r\n} else {\r\n  # Empty data case\r\n  data.frame(\r\n    Message = c('Data imported but empty after processing.', 'Check processing settings and data files.')\r\n  ) |> datatable(options = list(dom = 't', ordering = FALSE), rownames = FALSE, class = 'compact')\r\n}\r\n\"","type":"text"},{"name":"template_combined_template.R","content":"# Combined Template (for backward compatibility)\r\n# This builds the combined template from the separate parts\r\n\r\n# ggplot_template <- paste(\r\n#   \"# Combined plotting code - built from separate templates\",\r\n#   \"# Text code:\",\r\n#   \"text_code <- '\", gsub(\"'\", \"\\\\\\\\'\", ggplot_text_template), \"'\",\r\n#   \"\",\r\n#   \"# Static code:\", \r\n#   \"static_code <- '\", gsub(\"'\", \"\\\\\\\\'\", ggplot_static_template), \"'\",\r\n#   \"\",\r\n#   \"# Interactive code:\",\r\n#   \"interactive_code <- '\", gsub(\"'\", \"\\\\\\\\'\", ggplot_interactive_template), \"'\",\r\n#   \"\",\r\n#   \"# Table code:\",\r\n#   \"table_code <- '\", gsub(\"'\", \"\\\\\\\\'\", ggplot_table_template), \"'\",\r\n#   \"\",\r\n#   \"# Final conditional code:\",\r\n#   ggplot_final_template,\r\n#   sep = \"\\n\"\r\n# )","type":"text"},{"name":"template_data_import_postprocessing.R","content":"# Data Import Post-processing Template\r\n# For Data Import Post-processing (ui_data_importer)\r\n\r\nr_code_data_processing <- \"\r\n# Available variables:\r\n# - df: The data.table from the pre-processing step for the current file.\r\n# - input_filter_in_1, input_filter_out_1, input_rename_1, input_date_format: Values from UI controls.\r\n# - showNotification(message, type): Function.\r\n# - filter_in(), filter_out(), rname(): Helper functions.\r\n# Required output: A data.table.\r\n\r\n# Ensure df is a data.table\r\nsetDT(df)\r\n\r\n# Rename the first column to 'timestamp' if it's not already named so.\r\n# This is a common operation but make it conditional.\r\nif (ncol(df) > 0 && names(df)[1] != 'timestamp') {\r\n  setnames(df, old = names(df)[1], new = 'timestamp', skip_absent=TRUE)\r\n}\r\n\r\n# Identify potential measurement variables (assuming 'timestamp' and 'file_name_source' are ID vars)\r\nid_vars <- c('timestamp', 'file_name_source')\r\nmeasure_vars <- setdiff(names(df), id_vars)\r\n\r\nif (length(measure_vars) == 0) {\r\n  showNotification('No measurement variables found after identifying id_vars. Check column names.', type='warning')\r\n  return(df) # Or NULL if this is an error state\r\n}\r\n\r\n# Convert all potential measure_vars to numeric. Handle errors gracefully.\r\nfor (m_var in measure_vars) {\r\n  if (m_var %in% names(df)) {\r\n    # Try conversion, keep original on failure or make NA\r\n    original_class <- class(df[[m_var]])[1]\r\n    df[, (m_var) := suppressWarnings(as.numeric(get(m_var)))]\r\n    if (all(is.na(df[[m_var]])) && original_class != 'numeric') {\r\n        # showNotification(paste('Column', m_var, 'could not be fully converted to numeric. Check data.'), type='warning')\r\n    }\r\n  }\r\n}\r\n\r\n# Melt data to long format\r\ndf_long <- melt(df, \r\n                id.vars = id_vars, \r\n                measure.vars = measure_vars, \r\n                variable.name = 'series', \r\n                value.name = 'value',\r\n                na.rm = TRUE) # Remove rows where 'value' became NA after melt (e.g. from failed as.numeric)\r\n\r\nif (nrow(df_long) == 0) {\r\n    showNotification('Data became empty after melting. Check numeric conversions and series.', type='warning')\r\n    return(data.table()) # Return empty DT\r\n}\r\n\r\n\r\n# Parse timestamp using the format from UI. Be robust.\r\n# input_date_format is available. Default 'ymd HMS'\r\nif ('timestamp' %in% names(df_long)) {\r\n  current_timestamps <- df_long[['timestamp']]\r\n  if (!is.POSIXct(current_timestamps)) { # Only parse if not already POSIXct\r\n    parsed_ts <- tryCatch({\r\n      lubridate::parse_date_time(as.character(current_timestamps), orders = input_date_format, quiet = TRUE)\r\n    }, error = function(e) NULL)\r\n    \r\n    if (!is.null(parsed_ts) && !all(is.na(parsed_ts))) {\r\n      df_long[, timestamp := parsed_ts]\r\n    } else {\r\n      # Attempt with fasttime as a fallback for common formats if lubridate fails broadly\r\n      parsed_ts_ft <- tryCatch({ fasttime::fastPOSIXct(as.character(current_timestamps)) }, error = function(e) NULL)\r\n      if(!is.null(parsed_ts_ft) && !all(is.na(parsed_ts_ft))) {\r\n         df_long[, timestamp := parsed_ts_ft]\r\n         showNotification('Used fallback timestamp parser for some values.', type='message')\r\n      } else {\r\n         showNotification(paste('Failed to parse timestamps with format:', input_date_format, '. Check format and data.'), type='warning')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n# Apply filters (these helpers are available in the eval environment)\r\nif (exists('input_filter_in_1') && nzchar(input_filter_in_1)) {\r\n  df_long <- filter_in(df_long, 'series', input_filter_in_1)\r\n}\r\nif (exists('input_filter_out_1') && nzchar(input_filter_out_1)) {\r\n  df_long <- filter_out(df_long, 'series', input_filter_out_1)\r\n}\r\nif (exists('input_rename_1') && nzchar(input_rename_1)) {\r\n  df_long <- rname(df_long, 'series', input_rename_1)\r\n}\r\n\r\n# Extract 'dut' (Device Under Test) identifier from file_name_source as an example\r\n# This pattern '2212\\\\d*' might be specific to your filenames.\r\nif ('file_name_source' %in% names(df_long)) {\r\n    df_long[, dut := stringr::str_extract(file_name_source, '2212[^_]*')] # Example: 2212 followed by digits until an underscore\r\n}\r\n\r\n# showNotification(paste('Post-processing complete for data from:', df_long[1, file_name_source]), type='message')\r\ndf_long # Return the final processed data.table for this file\r\n\"","type":"text"},{"name":"template_data_import_preprocessing.R","content":"# Data Import Pre-processing Template\r\n# For Data Import Pre-processing (ui_data_importer)\r\n\r\nr_code_data_pre_process <- \"# R code to read and initially process a single file.\r\n# Available variables:\r\n# - file_path: Full path to the uploaded file.\r\n# - file_name: Original name of the file.\r\n# - n_every: Value from 'Read every Nth row' input (0 or 1 means all).\r\n# - skip_rows: Value from 'Skip N rows at start' input.\r\n# - showNotification(message, type): Function to display messages.\r\n# Required output: A data.table or data.frame. Return NULL on error.\r\n\r\n# Example:\r\n# showNotification(paste('Processing:', file_name), type='message')\r\n\r\n# Determine file extension\r\next <- tools::file_ext(tolower(file_name)) # Use tolower for consistency\r\n\r\n# Define read functions in a list for clarity\r\nread_functions <- list(\r\n  'csv' = function(fp, sr) data.table::fread(fp, skip = sr),\r\n  'csv.gz' = function(fp, sr) data.table::fread(cmd = paste('gunzip -c', shQuote(fp)), skip = sr), # More robust for .csv.gz\r\n  'gz' = function(fp, sr) data.table::fread(cmd = paste('gunzip -c', shQuote(fp)), skip = sr), # Assumes text content after gunzip\r\n  'xlsx' = function(fp, sr) data.table::as.data.table(readxl::read_excel(fp, skip = sr)),\r\n  'fst' = function(fp, sr) data.table::setDT(fst::read_fst(fp)), # FST doesn't typically have skip\r\n  'parquet' = function(fp, sr) data.table::setDT(nanoparquet::read_parquet(fp)) # Parquet doesn't typically have skip\r\n)\r\n\r\ndf <- NULL # Initialize df\r\n\r\nif (ext %in% names(read_functions)) {\r\n  df <- tryCatch({\r\n    read_functions[[ext]](file_path, skip_rows)\r\n  }, error = function(e) {\r\n    showNotification(paste('Error reading', file_name, ':', e$message), type = 'error')\r\n    return(NULL)\r\n  })\r\n} else if (ext == 'tdms') {\r\n  showNotification('TDMS files are not directly supported. Please convert to a supported format (e.g., CSV, Parquet) first.', type = 'error', duration=10)\r\n  return(NULL)\r\n} else {\r\n  showNotification(paste0('Unsupported file type: .', ext, '. Please use CSV, XLSX, FST, or Parquet.'), type = 'warning', duration=10)\r\n  return(NULL)\r\n}\r\n\r\nif (is.null(df) || !is.data.frame(df)) {\r\n  # showNotification(paste('Failed to read or convert', file_name, 'to a data frame.'), type = 'error')\r\n  return(NULL)\r\n}\r\n\r\n# Ensure it's a data.table\r\ndata.table::setDT(df)\r\n\r\n# Check row count\r\nif (nrow(df) == 0) {\r\n  showNotification(paste('File', file_name, 'is empty or resulted in zero rows after reading.'), type = 'warning')\r\n  return(NULL) # Or return df if empty data.tables are acceptable downstream\r\n}\r\n\r\n# Downsample if n_every is greater than 1 (0 or 1 means read all relevant rows already)\r\n# The 'n_every' input is now 'Read every Nth row (0=all)'\r\n# So if n_every > 1, we sample. If n_every is 0 or 1, we take all.\r\nif (exists('n_every') && is.numeric(n_every) && n_every > 1 && nrow(df) > n_every) {\r\n  df <- df[seq(1, .N, by = as.integer(n_every))]\r\n  showNotification(paste('Downsampled', file_name, 'to every', n_every, 'th row.'), type='message')\r\n}\r\n\r\n# Add file_name column for tracking provenance\r\ndf[, file_name_source := file_name] # Use a distinct name to avoid conflict if 'file_name' is a data column\r\n\r\ndf # Return the processed data.table\r\n\"","type":"text"},{"name":"template_data_table_display.R","content":"# Data Table Display Template\r\n# For Data Table Display (ui_data_table_display)\r\n\r\nDT_head <- \"# R code to display a table.\r\n# df: The input data.table.\r\n# datatable() is commonly used.\r\n# Example:\r\n# datatable(head(df, 100), options = list(scrollX = TRUE, pageLength = 5), rownames = FALSE, filter = 'top', class='compact stripe')\r\nif (is.data.frame(df) || is.data.table(df)) {\r\n  datatable(head(df, 100), \r\n                options = list(scrollX = TRUE, scrollY = '300px', pageLength = 10, searching = TRUE, lengthMenu = c(10, 25, 50, 100)), \r\n                rownames = FALSE, \r\n                filter = 'none', # 'top' can be slow for wide tables\r\n                class='compact stripe hover cell-border', \r\n                width='100%',\r\n                escape = FALSE) # escape=FALSE if you have HTML in cells, be careful with XSS\r\n} else {\r\n  df # If not a data frame (e.g., summary output from skimr)\r\n}\r\n\"","type":"text"},{"name":"template_downloader_code.R","content":"# Downloader Code Template\r\n# For Downloader Tab (Refactored)\r\n\r\ndownloader_code_refactored <- \"# Batch Downloader - Select and Download Multiple Plots\r\n# This creates a user-friendly interface for selecting which plots to download\r\n\r\nlibrary(shiny)\r\nlibrary(DT)\r\n\r\n# Get available plots\r\navailable_plots <- names(dynamic_plots_map)\r\n\r\nif (length(available_plots) == 0) {\r\n  # No plots available\r\n  div(class = 'alert alert-warning',\r\n    h4('No Active Plots Found'),\r\n    p('Create some plots first, then return here to download them.')\r\n  )\r\n} else {\r\n  # Create selection interface\r\n  div(\r\n    h4('Select Plots to Download'),\r\n    p(class = 'text-muted', 'Choose which plots you want to include in the ZIP file:'),\r\n    \r\n    # Plot selection checkboxes\r\n    div(class = 'mb-3',\r\n      lapply(available_plots, function(plot_id) {\r\n        # Get a friendly name for the plot\r\n        friendly_name <- gsub('_', ' ', plot_id)\r\n        friendly_name <- tools::toTitleCase(friendly_name)\r\n        \r\n        div(class = 'form-check',\r\n          tags$input(\r\n            type = 'checkbox',\r\n            class = 'form-check-input',\r\n            id = paste0('select_plot_', plot_id),\r\n            value = plot_id,\r\n            checked = 'checked'  # Default to selected\r\n          ),\r\n          tags$label(\r\n            class = 'form-check-label',\r\n            `for` = paste0('select_plot_', plot_id),\r\n            friendly_name\r\n          )\r\n        )\r\n      })\r\n    ),\r\n    \r\n    # Select/Deselect All buttons\r\n    div(class = 'mb-3',\r\n      actionButton('select_all_plots', 'Select All', class = 'btn btn-sm btn-outline-primary me-2'),\r\n      actionButton('deselect_all_plots', 'Deselect All', class = 'btn btn-sm btn-outline-secondary')\r\n    ),\r\n    \r\n         # Download options\r\n     div(class = 'mb-3',\r\n       h5('Download Options'),\r\n       p(class = 'text-muted small', 'Plots will be saved in their native format: Interactive plots as HTML, Static plots as PNG, Text outputs as TXT files.'),\r\n       div(class = 'row',\r\n         div(class = 'col-md-6',\r\n           numericInput('download_dpi', 'DPI for PNG files',\r\n             value = 300, min = 72, max = 600, step = 50\r\n           )\r\n         ),\r\n         div(class = 'col-md-6',\r\n           numericInput('download_width', 'Plot Width (inches)',\r\n             value = 10, min = 4, max = 20, step = 1\r\n           )\r\n         )\r\n       ),\r\n       div(class = 'row',\r\n         div(class = 'col-md-6',\r\n           numericInput('download_height', 'Plot Height (inches)',\r\n             value = 7, min = 3, max = 15, step = 1\r\n           )\r\n         )\r\n       )\r\n     ),\r\n    \r\n    # Download button\r\n    div(class = 'text-center',\r\n      downloadButton('batch_download_zip', \r\n        'Download Selected Plots as ZIP',\r\n        class = 'btn btn-success btn-lg',\r\n        icon = icon('download')\r\n      )\r\n    )\r\n  )\r\n}\r\n\"","type":"text"},{"name":"template_final_conditional.R","content":"# Final Conditional Template\r\n# This code runs after all the above templates and selects the appropriate output\r\n\r\nggplot_final_template <- \"# Final conditional code to select output type\r\n# This code runs after all the above templates and selects the appropriate output\r\n# Available: df (processed data), input (UI inputs)\r\n\r\nif (is.null(df) || nrow(df) == 0) {\r\n  # No data case\r\n  renderUI({\r\n    div(class = 'text-center p-4',\r\n      h4('No Data Available', class = 'text-muted'),\r\n      p('Please process data in the Processing Data tab first.')\r\n    )\r\n  })\r\n} else if (!is.null(input$plot_type)) {\r\n  # Select output based on plot type\r\n  if (input$plot_type == 'text') {\r\n    # Execute text template code and render as print\r\n    text_output <- eval(parse(text = text_code))\r\n    renderPrint({ text_output })\r\n  } else if (input$plot_type == 'static') {\r\n    # Execute static template code and render as plot\r\n    static_plot <- eval(parse(text = static_code))\r\n    renderPlot({ static_plot }, height = 600)\r\n  } else if (input$plot_type == 'interactive') {\r\n    # Execute interactive template code and return plotly object directly\r\n    interactive_plot <- eval(parse(text = interactive_code))\r\n    renderUI({ interactive_plot })\r\n  } else if (input$plot_type == 'table') {\r\n    # Execute table template code and render as DT\r\n    table_output <- eval(parse(text = table_code))\r\n    table_output # Return DT object directly\r\n  } else {\r\n    # Fallback\r\n    renderUI({\r\n      div(class = 'text-center p-4',\r\n        h4('Unknown Plot Type', class = 'text-muted'),\r\n        p('Please select a valid plot type: Text, Static, Interactive, or Table.')\r\n      )\r\n    })\r\n  }\r\n} else {\r\n  # No plot type selected\r\n  renderUI({\r\n    div(class = 'text-center p-4',\r\n      h4('Select Plot Type', class = 'text-muted'),\r\n      p('Choose Text, Static, Interactive, or Table from the plot controls.')\r\n    )\r\n  })\r\n}\r\n\"","type":"text"},{"name":"template_helper_code.R","content":"# Helper Code Template\r\n# For R Code Helper Tab\r\n\r\nhelper_code_template <- \"# R Code Helper\r\n# Type R code here to execute it.\r\n# Example: List installed packages\r\n# installed.packages()[, 'Package'] |> head(20) |> paste(collapse = '\\\\n') |> cat()\r\n\r\n# Example: Get help on a function\r\n# help('lm') # This will open help in RStudio, not directly in Shiny UI\r\n\r\n# Example: Show vignette (if HTML can be rendered)\r\n# vignette_path <- system.file('doc', 'grid.html', package = 'grid')\r\n# if (file.exists(vignette_path)) {\r\n#   htmltools::HTML(readLines(vignette_path))\r\n# } else {\r\n#   'Vignette not found.'\r\n# }\r\n\r\n# Example: Basic calculation\r\n# data.frame(x = 1:5, y = (1:5)^2) |> datatable()\r\n\r\n# Available in this environment:\r\n# - 'input' (main Shiny app's input)\r\n# - 'output' (main Shiny app's output - use with caution)\r\n\r\n# Get current working directory\r\ngetwd()\r\n\"","type":"text"},{"name":"template_interactive_plot.R","content":"# Interactive Plot Template (Plotly)\r\n\r\n# This is a condensed version of the interactive template\r\nggplot_interactive_template <- r\"---(\r\n# Interactive plot code (plotly)\r\n# Available: df (processed data), input (UI inputs)  \r\n# Return: htmltools tagList object\r\n\r\n# Ensure required libraries are available\r\nlibrary(plotly)\r\nlibrary(data.table)\r\nlibrary(htmltools)\r\n\r\n# Handle X-axis transformation\r\nplot_df <- copy(df) # Work on a copy\r\n\r\nif ('timestamp' %in% names(plot_df)) {\r\n  min_ts <- min(plot_df$timestamp, na.rm = TRUE)\r\n  \r\n  # Transform X-axis based on input selection\r\n  if (!is.null(input$plot_xlabel)) {\r\n    if (input$plot_xlabel == 'Duration Minutes') {\r\n      plot_df[, x_axis := as.numeric(difftime(timestamp, min_ts, units = 'mins'))]\r\n      x_label <- 'Duration (Minutes)'\r\n    } else if (input$plot_xlabel == 'Duration Hours') {\r\n      plot_df[, x_axis := as.numeric(difftime(timestamp, min_ts, units = 'hours'))]\r\n      x_label <- 'Duration (Hours)'\r\n    } else if (input$plot_xlabel == 'Duration Days') {\r\n      plot_df[, x_axis := as.numeric(difftime(timestamp, min_ts, units = 'days'))]\r\n      x_label <- 'Duration (Days)'\r\n    } else if (input$plot_xlabel == 'Duration Seconds') {\r\n      plot_df[, x_axis := as.numeric(difftime(timestamp, min_ts, units = 'secs'))]\r\n      x_label <- 'Duration (Seconds)'\r\n    } else {\r\n      # Default to timestamp\r\n      plot_df[, x_axis := timestamp]\r\n      x_label <- input$plot_xlabel\r\n    }\r\n  } else {\r\n    plot_df[, x_axis := timestamp]\r\n    x_label <- 'Timestamp'\r\n  }\r\n} else {\r\n  # No timestamp column\r\n  plot_df[, x_axis := .I] # Use row index\r\n  x_label <- 'Index'\r\n}\r\n\r\n# Create base plotly plot with transformed x-axis\r\nif (!is.null(input$plot_color) && input$plot_color != 'null' && input$plot_color %in% names(plot_df)) {\r\n  # With color grouping\r\n  p <- plot_ly(plot_df, x = ~x_axis, y = ~value, \r\n               color = as.formula(paste('~', input$plot_color)),\r\n               type = 'scatter', mode = 'lines',\r\n               hovertemplate = paste('<b>%{fullData.name}<\/b><br>',\r\n                                     x_label, ': %{x}<br>',\r\n                                     'Value: %{y}<extra><\/extra>'))\r\n} else {\r\n  # Without color grouping\r\n  p <- plot_ly(plot_df, x = ~x_axis, y = ~value, \r\n               type = 'scatter', mode = 'lines',\r\n               hovertemplate = paste(x_label, ': %{x}<br>',\r\n                                     'Value: %{y}<extra><\/extra>'))\r\n}\r\n\r\n# Get font sizes\r\ntitle_size <- if(!is.null(input$title_font_size)) input$title_font_size else 14\r\nxaxis_size <- if(!is.null(input$xaxis_font_size)) input$xaxis_font_size else 12\r\nyaxis_size <- if(!is.null(input$yaxis_font_size)) input$yaxis_font_size else 12\r\n\r\n# Add best fit line if specified\r\nif (!is.null(input$add_smooth) && input$add_smooth == TRUE) {\r\n  tryCatch({\r\n    smooth_fit <- loess(value ~ x_axis, data = plot_df)\r\n    p <- p |> add_trace(\r\n      type = 'scatter', mode = 'lines',\r\n      x = plot_df$x_axis, y = fitted(smooth_fit),\r\n      line = list(color = 'rgba(255,0,0,0.5)', dash = 'dot'),\r\n      name = 'Trend Line', showlegend = TRUE\r\n    )\r\n  }, error = function(e) {\r\n    lm_fit <- lm(value ~ x_axis, data = plot_df)\r\n    p <- p |> add_trace(\r\n      type = 'scatter', mode = 'lines',\r\n      x = plot_df$x_axis, y = fitted(lm_fit),\r\n      line = list(color = 'rgba(255,0,0,0.5)', dash = 'dot'),\r\n      name = 'Linear Trend', showlegend = TRUE\r\n    )\r\n  })\r\n}\r\n\r\n# Add reference lines\r\nshapes_list <- list()\r\nif (!is.null(input$hline_1) && !is.na(input$hline_1)) {\r\n  shapes_list[[length(shapes_list) + 1]] <- list(type = 'line', x0 = 0, x1 = 1, xref = \"paper\", y0 = input$hline_1, y1 = input$hline_1, line = list(color = 'red', dash = 'dash'))\r\n}\r\nif (!is.null(input$hline_2) && !is.na(input$hline_2)) {\r\n  shapes_list[[length(shapes_list) + 1]] <- list(type = 'line', x0 = 0, x1 = 1, xref = \"paper\", y0 = input$hline_2, y1 = input$hline_2, line = list(color = 'blue', dash = 'dash'))\r\n}\r\nif (!is.null(input$hline_3) && !is.na(input$hline_3)) {\r\n  shapes_list[[length(shapes_list) + 1]] <- list(type = 'line', x0 = 0, x1 = 1, xref = \"paper\", y0 = input$hline_3, y1 = input$hline_3, line = list(color = 'purple', dash = 'dash'))\r\n}\r\nif (!is.null(input$hline_4) && !is.na(input$hline_4)) {\r\n  shapes_list[[length(shapes_list) + 1]] <- list(type = 'line', x0 = 0, x1 = 1, xref = \"paper\", y0 = input$hline_4, y1 = input$hline_4, line = list(color = 'orange', dash = 'dash'))\r\n}\r\nif (!is.null(input$vline_1) && !is.na(input$vline_1)) {\r\n  shapes_list[[length(shapes_list) + 1]] <- list(type = 'line', x0 = input$vline_1, x1 = input$vline_1, y0 = 0, y1 = 1, yref = \"paper\", line = list(color = 'red', dash = 'dash'))\r\n}\r\nif (!is.null(input$vline_2) && !is.na(input$vline_2)) {\r\n  shapes_list[[length(shapes_list) + 1]] <- list(type = 'line', x0 = input$vline_2, x1 = input$vline_2, y0 = 0, y1 = 1, yref = \"paper\", line = list(color = 'blue', dash = 'dash'))\r\n}\r\nif (!is.null(input$vline_3) && !is.na(input$vline_3)) {\r\n  shapes_list[[length(shapes_list) + 1]] <- list(type = 'line', x0 = input$vline_3, x1 = input$vline_3, y0 = 0, y1 = 1, yref = \"paper\", line = list(color = 'purple', dash = 'dash'))\r\n}\r\nif (!is.null(input$vline_4) && !is.na(input$vline_4)) {\r\n  shapes_list[[length(shapes_list) + 1]] <- list(type = 'line', x0 = input$vline_4, x1 = input$vline_4, y0 = 0, y1 = 1, yref = \"paper\", line = list(color = 'orange', dash = 'dash'))\r\n}\r\n\r\n# Add layout and labels\r\np <- p |> layout(\r\n  title = list(text = if(!is.null(input$plot_title) && nzchar(input$plot_title)) input$plot_title else 'Interactive Plot', font = list(size = title_size)),\r\n  xaxis = list(title = list(text = x_label, font = list(size = xaxis_size)), tickfont = list(size = xaxis_size * 0.9)),\r\n  yaxis = list(title = list(text = if(!is.null(input$plot_ylabel)) input$plot_ylabel else 'Y Axis', font = list(size = yaxis_size)), tickfont = list(size = yaxis_size * 0.9)),\r\n  hovermode = 'x unified',\r\n  legend = list(orientation = 'h', y = -0.2),\r\n  shapes = shapes_list,\r\n  annotations = list(\r\n    list(\r\n      x = 1, y = 0, xref = 'paper', yref = 'paper',\r\n      text = if(!is.null(input$plot_caption) && nzchar(input$plot_caption)) input$plot_caption else '',\r\n      showarrow = FALSE, xanchor = 'right', yanchor = 'bottom',\r\n      font = list(size = 10, color = 'grey')\r\n    )\r\n  )\r\n)\r\n\r\n# JavaScript for dynamic subtitles and table\r\njs_code <- r\"(\r\nfunction(el, x) {\r\n  if (typeof el._originalDataNames === 'undefined') {\r\n    el._originalDataNames = el.data.map(trace => trace.name);\r\n  }\r\n  const tableContainer = document.getElementById('dynamic-stats-table-container');\r\n  function updateDynamicElements(eventdata) {\r\n    let new_names = [];\r\n    let full_view = (eventdata && eventdata['xaxis.autorange']) || !eventdata;\r\n    let tableHtml = '<table id=\\\"dynamic-stats-table\\\"><thead><tr><th>Trace Name<\/th><th>Min<\/th><th>Max<\/th><\/tr><\/thead><tbody>';\r\n    for (let i = 0; i < el.data.length; i++) {\r\n      let trace = el.data[i];\r\n      let original_name = el._originalDataNames[i];\r\n      if (!original_name || trace.mode !== 'lines') {\r\n        new_names.push(original_name);\r\n        continue;\r\n      }\r\n      let x_range;\r\n      if(full_view){\r\n        x_range = [Math.min(...trace.x), Math.max(...trace.x)];\r\n      } else {\r\n        x_range = [eventdata['xaxis.range[0]'], eventdata['xaxis.range[1]']];\r\n      }\r\n      let visible_y = [];\r\n      for (let j = 0; j < trace.x.length; j++) {\r\n        if (trace.x[j] >= x_range[0] && trace.x[j] <= x_range[1]) {\r\n          visible_y.push(trace.y[j]);\r\n        }\r\n      }\r\n      if (visible_y.length > 0) {\r\n        let min_val = Math.min(...visible_y).toFixed(2);\r\n        let max_val = Math.max(...visible_y).toFixed(2);\r\n        new_names.push(original_name + ' (Min: ' + min_val + ', Max: ' + max_val + ')');\r\n        tableHtml += '<tr><td>' + original_name + '<\/td><td>' + min_val + '<\/td><td>' + max_val + '<\/td><\/tr>';\r\n      } else {\r\n        new_names.push(original_name + ' (No data in view)');\r\n        tableHtml += '<tr><td>' + original_name + '<\/td><td colspan=\\\"2\\\">No data in view<\/td><\/tr>';\r\n      }\r\n    }\r\n    tableHtml += '<\/tbody><\/table>';\r\n    Plotly.restyle(el, {name: new_names});\r\n    if(tableContainer) {\r\n       tableContainer.innerHTML = '<h4>Visible Data Summary<\/h4>' + tableHtml;\r\n    }\r\n  }\r\n  updateDynamicElements(null);\r\n  el.on('plotly_relayout', updateDynamicElements);\r\n}\r\n)\"\r\n\r\n# Attach the JavaScript to the plot object\r\np <- p |> htmlwidgets::onRender(js_code)\r\n\r\n# Create a placeholder for the table and add styling\r\nstats_table_div <- div(\r\n  id = \"dynamic-stats-table-container\",\r\n  h4(\"Visible Data Summary\"),\r\n  tags$style(HTML(\"\r\n    #dynamic-stats-table { border-collapse: collapse; width: 50%; margin-top: 10px; font-family: sans-serif; font-size: 14px; }\r\n    #dynamic-stats-table th, #dynamic-stats-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }\r\n    #dynamic-stats-table th { background-color: #f2f2f2; }\r\n  \"))\r\n)\r\n\r\n# Combine the plot and the table placeholder into a single output\r\nfinal_output <- navset_card_pill(\r\nnav_panel(title = \"plot\", p),\r\nnav_panel(title = \"table\", stats_table_div),\r\n)\r\n\r\n# Return the final combined object\r\nfinal_output\r\n)---\"\r\n\r\n# NOTE: The complete interactive template includes:\r\n# - Font size controls\r\n# - Best fit lines\r\n# - Reference lines (H-lines and V-lines)\r\n# - Dynamic JavaScript for subtitle updates\r\n# - Statistics table generation\r\n# - Tab-based layout with plot and table views\r\n# For the complete implementation, please refer to the original r_code_.R file","type":"text"},{"name":"template_plot_base_setup.R","content":"# Base Plot Setup Module for Static Plots\r\n\r\nggplot_base_setup_template <- \"# Base Plot Setup \r\n# Available: plot_df (processed data), input (UI inputs), x_label\r\n# Purpose: Create base plot with aesthetics and geometry\r\n\r\n# Build aesthetic mapping\r\naes_mapping <- aes(x = x_axis, y = value)\r\n\r\n# Add color mapping if specified\r\nif (!is.null(input$plot_color) && input$plot_color != 'null' && input$plot_color %in% names(plot_df)) {\r\n  aes_mapping$colour <- as.name(input$plot_color)\r\n}\r\n\r\n# Add line type mapping if specified  \r\nif (!is.null(input$plot_linetype) && input$plot_linetype != 'null' && input$plot_linetype %in% names(plot_df)) {\r\n  aes_mapping$linetype <- as.name(input$plot_linetype)\r\n}\r\n\r\n# Get size and alpha values\r\nline_width <- if(!is.null(input$line_width)) input$line_width else 1\r\npoint_size <- if(!is.null(input$point_size)) input$point_size else 2\r\nalpha_val <- if(!is.null(input$alpha)) input$alpha else 1.0\r\n\r\n# Create plot with combined aesthetics\r\np <- ggplot(plot_df, aes_mapping)\r\n\r\n# Choose geometry based on geom_type input\r\ngeom_type <- if(!is.null(input$geom_type)) input$geom_type else 'geom_line'\r\n\r\nif (geom_type == 'geom_line') {\r\n  p <- p + geom_line(linewidth = line_width, alpha = alpha_val)\r\n} else if (geom_type == 'geom_point') {\r\n  p <- p + geom_point(size = point_size, alpha = alpha_val)\r\n} else if (geom_type == 'geom_line_point') {\r\n  p <- p + geom_line(linewidth = line_width, alpha = alpha_val) + \r\n           geom_point(size = point_size, alpha = alpha_val)\r\n} else if (geom_type == 'geom_area') {\r\n  p <- p + geom_area(alpha = alpha_val * 0.7)\r\n} else if (geom_type == 'geom_smooth') {\r\n  p <- p + geom_smooth(method = 'loess', se = TRUE, alpha = alpha_val * 0.3, linewidth = line_width)\r\n} else if (geom_type == 'geom_col') {\r\n  p <- p + geom_col(alpha = alpha_val)\r\n} else {\r\n  # Default fallback\r\n  p <- p + geom_line(linewidth = line_width, alpha = alpha_val)\r\n}\r\n\r\np # Return base plot\r\n\"","type":"text"},{"name":"template_plot_data_processing.R","content":"# Plot-specific Data Processing Template\r\n# For Plot-specific Data Processing (ui_plotter)\r\n\r\nr_code_plot_process_template <- \"# R code to process the COMBINED data specifically for THIS plot.\r\n# Available variables:\r\n# - df: The data.table of combined data from all importers.\r\n# - input: Reactive list of UI inputs for THIS plotter (e.g., input$sample_n_plot, input$filter_in_plot).\r\n# - filter_in(), filter_out(), rname(): Helper functions.\r\n# Required output: A data.table for plotting.\r\n\r\n# Ensure df is a data.table\r\nsetDT(df)\r\n\r\n# Sample data if sample_n_plot is set (0 means use all data)\r\nif (!is.null(input$sample_n_plot) && input$sample_n_plot > 0 && input$sample_n_plot < 1) {\r\n  if (nrow(df) * input$sample_n_plot >= 1) { # Ensure sample size is at least 1\r\n    df <- df[sample(.N, floor(input$sample_n_plot * .N))]\r\n  }\r\n}\r\n\r\n# Filter series for this plot\r\nif (!is.null(input$filter_in_files_plot) && nzchar(input$filter_in_files_plot)) {\r\n  df <- filter_in(df, 'file_name_source', input$filter_in_files_plot)\r\n}\r\n\r\nif (!is.null(input$filter_out_files_plot) && nzchar(input$filter_out_files_plot)) {\r\n  df <- filter_out(df, 'file_name_source', input$filter_out_files_plot)\r\n}\r\n\r\n# Filter series for this plot\r\nif (!is.null(input$filter_in_plot) && nzchar(input$filter_in_plot)) {\r\n  df <- filter_in(df, 'series', input$filter_in_plot)\r\n}\r\nif (!is.null(input$filter_out_plot) && nzchar(input$filter_out_plot)) {\r\n  df <- filter_out(df, 'series', input$filter_out_plot)\r\n}\r\n\r\n# Rename series for this plot\r\nif (!is.null(input$rename_plot) && nzchar(input$rename_plot)) {\r\n  df <- rname(df, 'series', input$rename_plot)\r\n}\r\n\r\n# Source filtering - filter by selected importer sources\r\nif ('source_importer_id' %in% names(df)) {\r\n    # Get all unique sources in the data\r\n    unique_sources <- unique(df$source_importer_id)\r\n    \r\n    # Check which sources are selected via checkboxes\r\n    selected_sources <- c()\r\n    for (source_id in unique_sources) {\r\n        checkbox_id <- paste0('source_', source_id)\r\n        if (!is.null(input[[checkbox_id]]) && input[[checkbox_id]]) {\r\n            selected_sources <- c(selected_sources, source_id)\r\n        }\r\n    }\r\n    \r\n    # Filter data by selected sources\r\n    if (length(selected_sources) > 0) {\r\n        df <- df[source_importer_id %in% selected_sources]\r\n    }\r\n    # If no sources selected, keep all data (no filtering)\r\n}\r\n\r\n# Time-based filtering using separate start/end date and time inputs\r\nif (input$filter_time_enabled) {\r\n  if ('timestamp' %in% names(df)) {\r\n      # Build start datetime\r\n      if (!is.null(input$filter_time_start_date) && !is.null(input$filter_time_start_time)) {\r\n          start_datetime <- as.POSIXct(paste(\r\n              as.character(input$filter_time_start_date), \r\n              format(input$filter_time_start_time, '%H:%M:%S')\r\n          ))\r\n        \r\n          if (!is.na(start_datetime)) {\r\n              df <- df[timestamp >= start_datetime]\r\n          }\r\n      }\r\n    \r\n      # Build end datetime\r\n      if (!is.null(input$filter_time_end_date) && !is.null(input$filter_time_end_time)) {\r\n          end_datetime <- as.POSIXct(paste(\r\n              as.character(input$filter_time_end_date), \r\n              format(input$filter_time_end_time, '%H:%M:%S')\r\n          ))\r\n        \r\n          if (!is.na(end_datetime)) {\r\n              df <- df[timestamp <= end_datetime]\r\n          }\r\n      }\r\n  }\r\n}\r\n\r\n# Extract 'dut' if not already present or if needed differently for this plot\r\n# This might be redundant if done in main processing, but allows plot-specific override.\r\nif (!'dut' %in% names(df) && 'file_name_source' %in% names(df)) {\r\n    df[, dut := stringr::str_extract(file_name_source, '2212[^_]*')]\r\n}\r\n\r\ndf # Return the data processed for this specific plot\r\n\"","type":"text"},{"name":"template_plot_faceting_final.R","content":"# Faceting & Final Module for Static Plots\r\n\r\nggplot_faceting_final_template <- \"# Faceting & Final Assembly\r\n# Available: p (complete plot), plot_df, input (UI inputs), xlim_values, ylim_values  \r\n# Purpose: Add faceting, resolve coord_cartesian vs free scales, apply final legend\r\n\r\n# Check if faceting is being used\r\nhas_faceting <- !is.null(input$plot_facet_end) && input$plot_facet_end > 0 && 'series' %in% names(plot_df)\r\n\r\n# Apply hard boundaries using coord_cartesian for precise plot edges\r\n# Note: coord_cartesian conflicts with facet free scales, so we only apply it when not faceting\r\nif ((!is.null(xlim_values) || !is.null(ylim_values)) && !has_faceting) {\r\n  p <- p + coord_cartesian(xlim = xlim_values, ylim = ylim_values, expand = FALSE)\r\n} else if (!is.null(xlim_values) || !is.null(ylim_values)) {\r\n  # For faceted plots, use scale limits instead of coord_cartesian to preserve free scales\r\n  if (!is.null(xlim_values)) {\r\n    p <- p + scale_x_continuous(limits = xlim_values, expand = c(0, 0))\r\n  }\r\n  if (!is.null(ylim_values)) {\r\n    p <- p + scale_y_continuous(limits = ylim_values, expand = c(0, 0))\r\n  }\r\n}\r\n\r\n# Line legends are now handled in the Statistical Overlays template\r\n# No additional legend processing needed here\r\n\r\n# Add faceting if specified\r\nif (has_faceting) {\r\n  facet_start <- if(input$plot_facet_start > 0) input$plot_facet_start else 1\r\n  plot_df$facet_var <- str_sub(plot_df$series, facet_start, input$plot_facet_end)\r\n  p <- p + facet_wrap(~facet_var, nrow = input$plot_facet_nrow, scales = 'free_y')\r\n}\r\n\r\np # Return final ggplot object\r\n\"","type":"text"},{"name":"template_plot_grid_axes.R","content":"# Grid & Axes Module for Static Plots\r\n# This is a condensed version of the grid & axes template\r\n\r\nggplot_grid_axes_template <- \"# Grid & Axes Controls\r\n# Available: p (plot with overlays), plot_df, input (UI inputs)\r\n# Purpose: Apply grid controls, axis transformations, and limits\r\n\r\n# transformations\r\nx_trans <- if(!is.null(input$x_trans)) input$x_trans else 'identity'\r\ny_trans <- if(!is.null(input$y_trans)) input$y_trans else 'identity'\r\n\r\n# major grid spacing\r\nmaj_x_by  <- if(!is.null(input$major_vgrid_breaks)) input$major_vgrid_breaks else 10\r\nmaj_y_by  <- if(!is.null(input$major_hgrid_breaks)) input$major_hgrid_breaks else 5\r\n\r\n# number of minor intervals BETWEEN each pair of majors\r\nnmin_x    <- if(!is.null(input$minor_vgrid_breaks)) input$minor_vgrid_breaks else 3\r\nnmin_y    <- if(!is.null(input$minor_hgrid_breaks)) input$minor_hgrid_breaks else 3\r\n\r\n# major grid line styles\r\nmaj_x_col <- if(!is.null(input$major_vgrid_color)) input$major_vgrid_color else 'grey80'\r\nmaj_y_col <- if(!is.null(input$major_hgrid_color)) input$major_hgrid_color else 'grey80'\r\nmaj_x_lw  <- if(!is.null(input$major_vgrid_linewidth)) input$major_vgrid_linewidth else 0.5\r\nmaj_y_lw  <- if(!is.null(input$major_hgrid_linewidth)) input$major_hgrid_linewidth else 0.5\r\nmaj_x_lt  <- if(!is.null(input$major_vgrid_linetype)) input$major_vgrid_linetype else 'solid'\r\nmaj_y_lt  <- if(!is.null(input$major_hgrid_linetype)) input$major_hgrid_linetype else 'solid'\r\n\r\n# minor grid line styles\r\nmin_x_col <- if(!is.null(input$minor_vgrid_color)) input$minor_vgrid_color else 'grey95'\r\nmin_y_col <- if(!is.null(input$minor_hgrid_color)) input$minor_hgrid_color else 'grey95'\r\nmin_x_lw  <- if(!is.null(input$minor_vgrid_linewidth)) input$minor_vgrid_linewidth else 0.25\r\nmin_y_lw  <- if(!is.null(input$minor_hgrid_linewidth)) input$minor_hgrid_linewidth else 0.25\r\nmin_x_lt  <- if(!is.null(input$minor_vgrid_linetype)) input$minor_vgrid_linetype else 'dashed'\r\nmin_y_lt  <- if(!is.null(input$minor_hgrid_linetype)) input$minor_hgrid_linetype else 'dashed'\r\n\r\n# grid enable flags\r\nenable_maj_x <- !is.null(input$enable_major_vgrid) && input$enable_major_vgrid == TRUE\r\nenable_maj_y <- !is.null(input$enable_major_hgrid) && input$enable_major_hgrid == TRUE\r\nenable_min_x <- !is.null(input$enable_minor_vgrid) && input$enable_minor_vgrid == TRUE\r\nenable_min_y <- !is.null(input$enable_minor_hgrid) && input$enable_minor_hgrid == TRUE\r\n\r\n# axis hard limits\r\ny_start_enabled <- !is.null(input$enable_y_start) && input$enable_y_start == TRUE\r\ny_end_enabled <- !is.null(input$enable_y_end) && input$enable_y_end == TRUE\r\n\r\nif (y_start_enabled || y_end_enabled) {\r\n  y_data_range <- range(plot_df$value, na.rm = TRUE)\r\n  y_start <- if(y_start_enabled && !is.null(input$y_start)) input$y_start else y_data_range[1]\r\n  y_end <- if(y_end_enabled && !is.null(input$y_end)) input$y_end else y_data_range[2]\r\n  ylim_values <- c(y_start, y_end)\r\n} else {\r\n  ylim_values <- NULL\r\n}\r\n\r\n# X axis limits (support both numeric and timestamp)\r\nx_limit_type <- if(!is.null(input$x_limit_type)) input$x_limit_type else 'numeric'\r\n\r\nif (x_limit_type == 'numeric') {\r\n  x_start_enabled <- !is.null(input$enable_x_start_numeric) && input$enable_x_start_numeric == TRUE\r\n  x_end_enabled <- !is.null(input$enable_x_end_numeric) && input$enable_x_end_numeric == TRUE\r\n  \r\n  if (x_start_enabled || x_end_enabled) {\r\n    x_data_range <- range(plot_df$x_axis, na.rm = TRUE)\r\n    x_start <- if(x_start_enabled && !is.null(input$x_start_numeric)) input$x_start_numeric else x_data_range[1]\r\n    x_end <- if(x_end_enabled && !is.null(input$x_end_numeric)) input$x_end_numeric else x_data_range[2]\r\n    xlim_values <- c(x_start, x_end)\r\n  } else {\r\n    xlim_values <- NULL\r\n  }\r\n} else if (x_limit_type == 'timestamp') {\r\n  x_start_enabled <- !is.null(input$enable_x_start_timestamp) && input$enable_x_start_timestamp == TRUE\r\n  x_end_enabled <- !is.null(input$enable_x_end_timestamp) && input$enable_x_end_timestamp == TRUE\r\n  \r\n  if (x_start_enabled || x_end_enabled) {\r\n    x_data_range <- range(plot_df$x_axis, na.rm = TRUE)\r\n    \r\n    x_start <- if(x_start_enabled && !is.null(input$x_start_date) && !is.null(input$x_start_time)) {\r\n      as.POSIXct(paste(\r\n        as.character(input$x_start_date), \r\n        format(input$x_start_time, '%H:%M:%S')\r\n      ))\r\n    } else {\r\n      x_data_range[1]\r\n    }\r\n    \r\n    x_end <- if(x_end_enabled && !is.null(input$x_end_date) && !is.null(input$x_end_time)) {\r\n      as.POSIXct(paste(\r\n        as.character(input$x_end_date), \r\n        format(input$x_end_time, '%H:%M:%S')\r\n      ))\r\n    } else {\r\n      x_data_range[2]\r\n    }\r\n    \r\n    xlim_values <- c(x_start, x_end)\r\n  } else {\r\n    xlim_values <- NULL\r\n  }\r\n} else {\r\n  xlim_values <- NULL\r\n}\r\n\r\n# -----------------------------------------------------------------------------\r\n# 2. Helper to compute minor breaks from majors + a count\r\n# -----------------------------------------------------------------------------\r\nmake_minor_breaks <- function(majors, n_between) {\r\n  if (length(majors) < 2 || n_between < 1) return(numeric(0))\r\n  \r\n  minors <- c()\r\n  for (i in seq_len(length(majors) - 1)) {\r\n    a <- majors[i]\r\n    b <- majors[i + 1]\r\n    \r\n    if (inherits(a, c('POSIXct', 'POSIXt', 'Date'))) {\r\n      # For time data - handle POSIXct properly\r\n      time_diff_seconds <- as.numeric(difftime(b, a, units = 'secs'))\r\n      step_seconds <- time_diff_seconds / (n_between + 1)\r\n      \r\n      # Create minor time points\r\n      for (j in 1:n_between) {\r\n        minor_time <- a + (j * step_seconds)\r\n        minors <- c(minors, as.numeric(minor_time))\r\n      }\r\n    } else {\r\n      # For numeric data\r\n      step <- (b - a) / (n_between + 1)\r\n      minor_vals <- seq(a + step, b - step, length.out = n_between)\r\n      minors <- c(minors, minor_vals)\r\n    }\r\n  }\r\n  \r\n  # Convert back to original class\r\n  if (length(majors) > 0 && inherits(majors[1], c('POSIXct', 'POSIXt'))) {\r\n    minors <- as.POSIXct(minors, origin = '1970-01-01', tz = attr(majors[1], 'tzone'))\r\n  } else if (length(majors) > 0 && inherits(majors[1], 'Date')) {\r\n    minors <- as.Date(minors, origin = '1970-01-01')\r\n  }\r\n  \r\n  return(minors)\r\n}\r\n\r\n# -----------------------------------------------------------------------------\r\n# 3. Compute major breaks based on data type\r\n# -----------------------------------------------------------------------------\r\nx_breaks <- NULL\r\ny_breaks <- NULL\r\nx_minor_breaks <- NULL\r\ny_minor_breaks <- NULL\r\n\r\n# Get vertical grid type setting (user choice: 'auto', 'numeric', 'timestamp')\r\nvertical_grid_type <- if(!is.null(input$vertical_grid_type)) input$vertical_grid_type else 'auto'\r\n\r\n# X-axis breaks (handle timestamps and numeric based on user choice)\r\nif (enable_maj_x) {\r\n  # Determine how to treat x-axis data based on user selection\r\n  use_timestamp_mode <- (vertical_grid_type == 'timestamp') || \r\n                       (vertical_grid_type == 'auto' && inherits(plot_df$x_axis, c('POSIXct', 'POSIXt', 'Date')))\r\n  \r\n  if (use_timestamp_mode) {\r\n    # For timestamp data, maj_x_by is interpreted as minutes\r\n    x_data_range <- range(plot_df$x_axis, na.rm = TRUE)\r\n    \r\n    # Create breaks at exact minute intervals for consistent spacing\r\n    interval_seconds <- maj_x_by * 60  # Convert minutes to seconds\r\n    \r\n    # Round start time down to nearest interval and end time up to nearest interval\r\n    start_time <- x_data_range[1]\r\n    end_time <- x_data_range[2]\r\n    \r\n    # Create sequence with exact time intervals\r\n    x_breaks <- seq(from = start_time, to = end_time, by = interval_seconds)\r\n    \r\n    # Ensure we have at least 2 breaks for the grid to work\r\n    if (length(x_breaks) < 2) {\r\n      # If interval is too large, create at least start and end\r\n      x_breaks <- seq(from = start_time, to = end_time, length.out = 3)\r\n    }\r\n  } else {\r\n    # For numeric data (force convert if needed)\r\n    x_numeric_data <- as.numeric(plot_df$x_axis)\r\n    x_data_range <- range(x_numeric_data, na.rm = TRUE)\r\n    x_breaks <- seq(\r\n      from = floor(x_data_range[1] / maj_x_by) * maj_x_by,\r\n      to = ceiling(x_data_range[2] / maj_x_by) * maj_x_by,\r\n      by = maj_x_by\r\n    )\r\n  }\r\n  \r\n  # Calculate minor breaks if enabled\r\n  if (enable_min_x && !is.null(x_breaks)) {\r\n    x_minor_breaks <- make_minor_breaks(x_breaks, nmin_x)\r\n  }\r\n}\r\n\r\n# Y-axis breaks (always numeric in this case)\r\nif (enable_maj_y && is.numeric(plot_df$value)) {\r\n  y_data_range <- range(plot_df$value, na.rm = TRUE)\r\n  y_breaks <- seq(\r\n    from = floor(y_data_range[1] / maj_y_by) * maj_y_by,\r\n    to = ceiling(y_data_range[2] / maj_y_by) * maj_y_by,\r\n    by = maj_y_by\r\n  )\r\n  \r\n  # Calculate minor breaks if enabled\r\n  if (enable_min_y && !is.null(y_breaks)) {\r\n    y_minor_breaks <- make_minor_breaks(y_breaks, nmin_y)\r\n  }\r\n}\r\n\r\n# -----------------------------------------------------------------------------\r\n# 4. Apply scales with custom breaks (trans only works with continuous scales)\r\n# -----------------------------------------------------------------------------\r\nif (!is.null(x_breaks)) {\r\n  # Determine which scale function to use\r\n  use_timestamp_mode <- (vertical_grid_type == 'timestamp') || \r\n                       (vertical_grid_type == 'auto' && inherits(plot_df$x_axis, c('POSIXct', 'POSIXt', 'Date')))\r\n  \r\n  if (use_timestamp_mode) {\r\n    if (inherits(plot_df$x_axis, c('POSIXct', 'POSIXt'))) {\r\n      p <- p + scale_x_datetime(\r\n        breaks = x_breaks,\r\n        minor_breaks = x_minor_breaks\r\n      )\r\n    } else if (inherits(plot_df$x_axis, 'Date')) {\r\n      p <- p + scale_x_date(\r\n        breaks = x_breaks,\r\n        minor_breaks = x_minor_breaks\r\n      )\r\n    }\r\n  } else {\r\n    # Use continuous scale with transformation support\r\n    p <- p + scale_x_continuous(\r\n      trans = x_trans,\r\n      breaks = x_breaks,\r\n      minor_breaks = x_minor_breaks\r\n    )\r\n  }\r\n} else {\r\n  # No custom breaks - apply appropriate scale\r\n  use_timestamp_mode <- (vertical_grid_type == 'timestamp') || \r\n                       (vertical_grid_type == 'auto' && inherits(plot_df$x_axis, c('POSIXct', 'POSIXt', 'Date')))\r\n  \r\n  if (use_timestamp_mode) {\r\n    if (inherits(plot_df$x_axis, c('POSIXct', 'POSIXt'))) {\r\n      p <- p + scale_x_datetime()\r\n    } else if (inherits(plot_df$x_axis, 'Date')) {\r\n      p <- p + scale_x_date()\r\n    }\r\n  } else {\r\n    p <- p + scale_x_continuous(trans = x_trans)\r\n  }\r\n}\r\n\r\nif (!is.null(y_breaks)) {\r\n  p <- p + scale_y_continuous(\r\n    trans = y_trans,\r\n    breaks = y_breaks,\r\n    minor_breaks = y_minor_breaks\r\n  )\r\n} else {\r\n  p <- p + scale_y_continuous(trans = y_trans)\r\n}\r\n\r\n# -----------------------------------------------------------------------------\r\n# 5. Apply grid line theming\r\n# -----------------------------------------------------------------------------\r\ntheme_updates <- list()\r\n\r\n# Major grid lines\r\nif (enable_maj_x) {\r\n  theme_updates$panel.grid.major.x <- element_line(\r\n    color = maj_x_col,\r\n    linewidth = maj_x_lw,\r\n    linetype = maj_x_lt\r\n  )\r\n} else {\r\n  theme_updates$panel.grid.major.x <- element_blank()\r\n}\r\n\r\nif (enable_maj_y) {\r\n  theme_updates$panel.grid.major.y <- element_line(\r\n    color = maj_y_col,\r\n    linewidth = maj_y_lw,\r\n    linetype = maj_y_lt\r\n  )\r\n} else {\r\n  theme_updates$panel.grid.major.y <- element_blank()\r\n}\r\n\r\n# Minor grid lines\r\nif (enable_min_x) {\r\n  theme_updates$panel.grid.minor.x <- element_line(\r\n    color = min_x_col,\r\n    linewidth = min_x_lw,\r\n    linetype = min_x_lt\r\n  )\r\n} else {\r\n  theme_updates$panel.grid.minor.x <- element_blank()\r\n}\r\n\r\nif (enable_min_y) {\r\n  theme_updates$panel.grid.minor.y <- element_line(\r\n    color = min_y_col,\r\n    linewidth = min_y_lw,\r\n    linetype = min_y_lt\r\n  )\r\n} else {\r\n  theme_updates$panel.grid.minor.y <- element_blank()\r\n}\r\n\r\n# Apply all theme updates at once\r\np <- p + do.call(theme, theme_updates)\r\n\r\n# Store limits for use in final template\r\nassign('xlim_values', xlim_values, envir = .GlobalEnv) \r\nassign('ylim_values', ylim_values, envir = .GlobalEnv)\r\n\r\np # Return plot with grid and axis controls\r\n\"\r\n\r\n# NOTE: The complete grid & axes template is very extensive (lines 810-1125)\r\n# It includes detailed implementations for:\r\n# - Complex break calculations for both numeric and timestamp data\r\n# - Minor break generation functions\r\n# - Grid line styling with full control over colors, linetypes, linewidths\r\n# - Timestamp vs numeric handling for vertical grids\r\n# - X and Y axis limit controls with both numeric and timestamp support\r\n# For the complete implementation, please refer to the original r_code_.R file","type":"text"},{"name":"template_plot_pre_processing.R","content":"# Data Processing Module for Static Plots\r\n# Modular Static Plot Templates (ggplot2) - Data Processing\r\n\r\nggplot_data_processing_template <- \"# Data Processing for Static Plot\r\n# Available: df (processed data), input (UI inputs)\r\n# Purpose: Handle X-axis transformations and basic data setup\r\n\r\nlibrary(ggplot2)\r\nlibrary(stringr)\r\nlibrary(RColorBrewer)\r\n\r\n# Handle X-axis transformation\r\nplot_df <- copy(df) # Work on a copy to avoid modifying original data\r\n\r\nif ('timestamp' %in% names(plot_df)) {\r\n  min_ts <- min(plot_df$timestamp, na.rm = TRUE)\r\n  \r\n  # Transform X-axis based on input selection\r\n  if (!is.null(input$plot_xlabel)) {\r\n    if (input$plot_xlabel == 'Duration Minutes') {\r\n      plot_df[, x_axis := as.numeric(difftime(timestamp, min_ts, units = 'mins'))]\r\n      x_label <- 'Duration (Minutes)'\r\n    } else if (input$plot_xlabel == 'Duration Hours') {\r\n      plot_df[, x_axis := as.numeric(difftime(timestamp, min_ts, units = 'hours'))]\r\n      x_label <- 'Duration (Hours)'\r\n    } else if (input$plot_xlabel == 'Duration Days') {\r\n      plot_df[, x_axis := as.numeric(difftime(timestamp, min_ts, units = 'days'))]\r\n      x_label <- 'Duration (Days)'\r\n    } else if (input$plot_xlabel == 'Duration Seconds') {\r\n      plot_df[, x_axis := as.numeric(difftime(timestamp, min_ts, units = 'secs'))]\r\n      x_label <- 'Duration (Seconds)'\r\n    } else {\r\n      # Default to timestamp or custom label\r\n      plot_df[, x_axis := timestamp]\r\n      x_label <- input$plot_xlabel\r\n    }\r\n  } else {\r\n    plot_df[, x_axis := timestamp]\r\n    x_label <- 'Timestamp'\r\n  }\r\n} else {\r\n  # No timestamp column, use first numeric column or create index\r\n  if (ncol(plot_df) > 0) {\r\n    plot_df[, x_axis := .I] # Use row index\r\n    x_label <- 'Index'\r\n  }\r\n}\r\n\r\nplot_df # Return processed data\r\n\"","type":"text"},{"name":"template_plot_statistical_overlays.R","content":"# Statistical Overlays Module for Static Plots\r\n# This file contains the statistical overlays template (lines ~471-807 in original)\r\n\r\n\r\nggplot_statistical_overlays_template <- \"# Statistical Overlays & Lines\r\n# Available: p (styled plot), plot_df, input (UI inputs)\r\n# Purpose: Add trend lines, mean/median lines, reference lines\r\n\r\n# Collect line legend information for the new linetype-based approach\r\nline_legend_names <- c()\r\nline_legend_colors <- c()\r\nline_legend_linetypes <- c()\r\n\r\n# Add statistical overlays with enhanced controls\r\nif (!is.null(input$add_smooth) && input$add_smooth == TRUE) {\r\n  smooth_method <- if(!is.null(input$smooth_method)) input$smooth_method else 'loess'\r\n  smooth_linetype <- if(!is.null(input$smooth_linetype)) input$smooth_linetype else 'solid'\r\n  smooth_linewidth <- if(!is.null(input$smooth_linewidth)) input$smooth_linewidth else 1\r\n  smooth_color <- if(!is.null(input$smooth_color)) input$smooth_color else 'red'\r\n  smooth_legend <- if(!is.null(input$smooth_legend)) input$smooth_legend else TRUE\r\n  smooth_name <- if(!is.null(input$smooth_name) && nzchar(input$smooth_name)) input$smooth_name else 'Trend'\r\n  \r\n  if (smooth_legend) {\r\n    # Try to extract equation from smooth fit for legend name\r\n    tryCatch({\r\n      if (smooth_method == 'lm') {\r\n        # For linear model, extract coefficients\r\n        temp_model <- lm(value ~ x_axis, data = plot_df)\r\n        coef_vals <- coef(temp_model)\r\n        if (length(coef_vals) >= 2) {\r\n          equation <- paste0('y = ', round(coef_vals[2], 3), 'x + ', round(coef_vals[1], 3))\r\n          smooth_name_with_eq <- paste0(smooth_name, ' (', equation, ')')\r\n        } else {\r\n          smooth_name_with_eq <- smooth_name\r\n        }\r\n      } else {\r\n        # For other methods, just use the method name\r\n        smooth_name_with_eq <- paste0(smooth_name, ' (', smooth_method, ')')\r\n      }\r\n    }, error = function(e) {\r\n      smooth_name_with_eq <- smooth_name\r\n    })\r\n    \r\n    line_legend_names <- c(line_legend_names, smooth_name_with_eq)\r\n    line_legend_colors <- c(line_legend_colors, smooth_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, smooth_linetype)\r\n    \r\n    # Add trend line with linetype mapping for legend\r\n    p <- p + geom_smooth(\r\n      aes(linetype = smooth_name_with_eq),\r\n      method = smooth_method, \r\n      se = TRUE, \r\n      alpha = 0.3, \r\n      linewidth = smooth_linewidth,\r\n      color = smooth_color,\r\n      show.legend = TRUE\r\n    )\r\n  } else {\r\n    # Add trend line with no legend\r\n    p <- p + geom_smooth(\r\n      method = smooth_method, \r\n      se = TRUE, \r\n      alpha = 0.3, \r\n      linetype = smooth_linetype,\r\n      linewidth = smooth_linewidth,\r\n      color = smooth_color,\r\n      show.legend = FALSE\r\n    )\r\n  }\r\n}\r\n\r\n# Mean and Median Lines - REMOVED\r\n\r\n# Enhanced reference lines with full control\r\nif (!is.null(input$enable_hline_1) && input$enable_hline_1 == TRUE && !is.null(input$hline_1)) {\r\n  hline_1_linetype <- if(!is.null(input$hline_1_linetype)) input$hline_1_linetype else 'dashed'\r\n  hline_1_linewidth <- if(!is.null(input$hline_1_linewidth)) input$hline_1_linewidth else 1\r\n  hline_1_color <- if(!is.null(input$hline_1_color)) input$hline_1_color else 'red'\r\n  hline_1_legend <- if(!is.null(input$hline_1_legend)) input$hline_1_legend else FALSE\r\n  hline_1_name <- if(!is.null(input$hline_1_name) && nzchar(input$hline_1_name)) input$hline_1_name else 'H-Line 1'\r\n  \r\n  if (hline_1_legend) {\r\n    line_legend_names <- c(line_legend_names, hline_1_name)\r\n    line_legend_colors <- c(line_legend_colors, hline_1_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, hline_1_linetype)\r\n    \r\n    # Add line with linetype mapping for legend\r\n    p <- p + geom_hline(\r\n      aes(yintercept = input$hline_1, linetype = hline_1_name),\r\n      linewidth = hline_1_linewidth,\r\n      color = hline_1_color,\r\n      alpha = 0.7\r\n    )\r\n  } else {\r\n    # Add line with no legend\r\n    p <- p + geom_hline(\r\n      yintercept = input$hline_1,\r\n      linetype = hline_1_linetype,\r\n      linewidth = hline_1_linewidth,\r\n      color = hline_1_color,\r\n      alpha = 0.7\r\n    )\r\n  }\r\n}\r\n\r\nif (!is.null(input$enable_hline_2) && input$enable_hline_2 == TRUE && !is.null(input$hline_2)) {\r\n  hline_2_linetype <- if(!is.null(input$hline_2_linetype)) input$hline_2_linetype else 'dashed'\r\n  hline_2_linewidth <- if(!is.null(input$hline_2_linewidth)) input$hline_2_linewidth else 1\r\n  hline_2_color <- if(!is.null(input$hline_2_color)) input$hline_2_color else 'blue'\r\n  hline_2_legend <- if(!is.null(input$hline_2_legend)) input$hline_2_legend else FALSE\r\n  hline_2_name <- if(!is.null(input$hline_2_name) && nzchar(input$hline_2_name)) input$hline_2_name else 'H-Line 2'\r\n  \r\n  if (hline_2_legend) {\r\n    line_legend_names <- c(line_legend_names, hline_2_name)\r\n    line_legend_colors <- c(line_legend_colors, hline_2_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, hline_2_linetype)\r\n    \r\n    # Add line with linetype mapping for legend\r\n    p <- p + geom_hline(\r\n      aes(yintercept = input$hline_2, linetype = hline_2_name),\r\n      linewidth = hline_2_linewidth,\r\n      color = hline_2_color,\r\n      alpha = 0.7\r\n    )\r\n  } else {\r\n    # Add line with no legend\r\n    p <- p + geom_hline(\r\n      yintercept = input$hline_2,\r\n      linetype = hline_2_linetype,\r\n      linewidth = hline_2_linewidth,\r\n      color = hline_2_color,\r\n      alpha = 0.7\r\n    )\r\n  }\r\n}\r\n\r\nif (!is.null(input$enable_hline_3) && input$enable_hline_3 == TRUE && !is.null(input$hline_3)) {\r\n  hline_3_linetype <- if(!is.null(input$hline_3_linetype)) input$hline_3_linetype else 'dashed'\r\n  hline_3_linewidth <- if(!is.null(input$hline_3_linewidth)) input$hline_3_linewidth else 1\r\n  hline_3_color <- if(!is.null(input$hline_3_color)) input$hline_3_color else 'purple'\r\n  hline_3_legend <- if(!is.null(input$hline_3_legend)) input$hline_3_legend else FALSE\r\n  hline_3_name <- if(!is.null(input$hline_3_name) && nzchar(input$hline_3_name)) input$hline_3_name else 'H-Line 3'\r\n  \r\n  if (hline_3_legend) {\r\n    line_legend_names <- c(line_legend_names, hline_3_name)\r\n    line_legend_colors <- c(line_legend_colors, hline_3_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, hline_3_linetype)\r\n    \r\n    # Add line with linetype mapping for legend\r\n    p <- p + geom_hline(\r\n      aes(yintercept = input$hline_3, linetype = hline_3_name),\r\n      linewidth = hline_3_linewidth,\r\n      color = hline_3_color,\r\n      alpha = 0.7\r\n    )\r\n  } else {\r\n    # Add line with no legend\r\n    p <- p + geom_hline(\r\n      yintercept = input$hline_3,\r\n      linetype = hline_3_linetype,\r\n      linewidth = hline_3_linewidth,\r\n      color = hline_3_color,\r\n      alpha = 0.7\r\n    )\r\n  }\r\n}\r\n\r\nif (!is.null(input$enable_hline_4) && input$enable_hline_4 == TRUE && !is.null(input$hline_4)) {\r\n  hline_4_linetype <- if(!is.null(input$hline_4_linetype)) input$hline_4_linetype else 'dashed'\r\n  hline_4_linewidth <- if(!is.null(input$hline_4_linewidth)) input$hline_4_linewidth else 1\r\n  hline_4_color <- if(!is.null(input$hline_4_color)) input$hline_4_color else 'orange'\r\n  hline_4_legend <- if(!is.null(input$hline_4_legend)) input$hline_4_legend else FALSE\r\n  hline_4_name <- if(!is.null(input$hline_4_name) && nzchar(input$hline_4_name)) input$hline_4_name else 'H-Line 4'\r\n  \r\n  if (hline_4_legend) {\r\n    line_legend_names <- c(line_legend_names, hline_4_name)\r\n    line_legend_colors <- c(line_legend_colors, hline_4_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, hline_4_linetype)\r\n    \r\n    # Add line with linetype mapping for legend\r\n    p <- p + geom_hline(\r\n      aes(yintercept = input$hline_4, linetype = hline_4_name),\r\n      linewidth = hline_4_linewidth,\r\n      color = hline_4_color,\r\n      alpha = 0.7\r\n    )\r\n  } else {\r\n    # Add line with no legend\r\n    p <- p + geom_hline(\r\n      yintercept = input$hline_4,\r\n      linetype = hline_4_linetype,\r\n      linewidth = hline_4_linewidth,\r\n      color = hline_4_color,\r\n      alpha = 0.7\r\n    )\r\n  }\r\n}\r\n\r\n# Enhanced vertical reference lines\r\nif (!is.null(input$enable_vline_1) && input$enable_vline_1 == TRUE && !is.null(input$vline_1)) {\r\n  vline_1_linetype <- if(!is.null(input$vline_1_linetype)) input$vline_1_linetype else 'dashed'\r\n  vline_1_linewidth <- if(!is.null(input$vline_1_linewidth)) input$vline_1_linewidth else 1\r\n  vline_1_color <- if(!is.null(input$vline_1_color)) input$vline_1_color else 'red'\r\n  vline_1_legend <- if(!is.null(input$vline_1_legend)) input$vline_1_legend else FALSE\r\n  vline_1_name <- if(!is.null(input$vline_1_name) && nzchar(input$vline_1_name)) input$vline_1_name else 'V-Line 1'\r\n  \r\n  if (vline_1_legend) {\r\n    line_legend_names <- c(line_legend_names, vline_1_name)\r\n    line_legend_colors <- c(line_legend_colors, vline_1_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, vline_1_linetype)\r\n    \r\n    # Add line with linetype mapping for legend\r\n    p <- p + geom_vline(\r\n      aes(xintercept = input$vline_1, linetype = vline_1_name),\r\n      linewidth = vline_1_linewidth,\r\n      color = vline_1_color,\r\n      alpha = 0.7\r\n    )\r\n  } else {\r\n    # Add line with no legend\r\n    p <- p + geom_vline(\r\n      xintercept = input$vline_1,\r\n      linetype = vline_1_linetype,\r\n      linewidth = vline_1_linewidth,\r\n      color = vline_1_color,\r\n      alpha = 0.7\r\n    )\r\n  }\r\n}\r\n\r\nif (!is.null(input$enable_vline_2) && input$enable_vline_2 == TRUE && !is.null(input$vline_2)) {\r\n  vline_2_linetype <- if(!is.null(input$vline_2_linetype)) input$vline_2_linetype else 'dashed'\r\n  vline_2_linewidth <- if(!is.null(input$vline_2_linewidth)) input$vline_2_linewidth else 1\r\n  vline_2_color <- if(!is.null(input$vline_2_color)) input$vline_2_color else 'blue'\r\n  vline_2_legend <- if(!is.null(input$vline_2_legend)) input$vline_2_legend else FALSE\r\n  vline_2_name <- if(!is.null(input$vline_2_name) && nzchar(input$vline_2_name)) input$vline_2_name else 'V-Line 2'\r\n  \r\n  if (vline_2_legend) {\r\n    line_legend_names <- c(line_legend_names, vline_2_name)\r\n    line_legend_colors <- c(line_legend_colors, vline_2_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, vline_2_linetype)\r\n    \r\n    # Add line with linetype mapping for legend\r\n    p <- p + geom_vline(\r\n      aes(xintercept = input$vline_2, linetype = vline_2_name),\r\n      linewidth = vline_2_linewidth,\r\n      color = vline_2_color,\r\n      alpha = 0.7\r\n    )\r\n  } else {\r\n    # Add line with no legend\r\n    p <- p + geom_vline(\r\n      xintercept = input$vline_2,\r\n      linetype = vline_2_linetype,\r\n      linewidth = vline_2_linewidth,\r\n      color = vline_2_color,\r\n      alpha = 0.7\r\n    )\r\n  }\r\n}\r\n\r\nif (!is.null(input$enable_vline_3) && input$enable_vline_3 == TRUE && !is.null(input$vline_3)) {\r\n  vline_3_linetype <- if(!is.null(input$vline_3_linetype)) input$vline_3_linetype else 'dashed'\r\n  vline_3_linewidth <- if(!is.null(input$vline_3_linewidth)) input$vline_3_linewidth else 1\r\n  vline_3_color <- if(!is.null(input$vline_3_color)) input$vline_3_color else 'purple'\r\n  vline_3_legend <- if(!is.null(input$vline_3_legend)) input$vline_3_legend else FALSE\r\n  vline_3_name <- if(!is.null(input$vline_3_name) && nzchar(input$vline_3_name)) input$vline_3_name else 'V-Line 3'\r\n  \r\n  if (vline_3_legend) {\r\n    line_legend_names <- c(line_legend_names, vline_3_name)\r\n    line_legend_colors <- c(line_legend_colors, vline_3_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, vline_3_linetype)\r\n    \r\n    # Add line with linetype mapping for legend\r\n    p <- p + geom_vline(\r\n      aes(xintercept = input$vline_3, linetype = vline_3_name),\r\n      linewidth = vline_3_linewidth,\r\n      color = vline_3_color,\r\n      alpha = 0.7\r\n    )\r\n  } else {\r\n    # Add line with no legend\r\n    p <- p + geom_vline(\r\n      xintercept = input$vline_3,\r\n      linetype = vline_3_linetype,\r\n      linewidth = vline_3_linewidth,\r\n      color = vline_3_color,\r\n      alpha = 0.7\r\n    )\r\n  }\r\n}\r\n\r\nif (!is.null(input$enable_vline_4) && input$enable_vline_4 == TRUE && !is.null(input$vline_4)) {\r\n  vline_4_linetype <- if(!is.null(input$vline_4_linetype)) input$vline_4_linetype else 'dashed'\r\n  vline_4_linewidth <- if(!is.null(input$vline_4_linewidth)) input$vline_4_linewidth else 1\r\n  vline_4_color <- if(!is.null(input$vline_4_color)) input$vline_4_color else 'orange'\r\n  vline_4_legend <- if(!is.null(input$vline_4_legend)) input$vline_4_legend else FALSE\r\n  vline_4_name <- if(!is.null(input$vline_4_name) && nzchar(input$vline_4_name)) input$vline_4_name else 'V-Line 4'\r\n  \r\n  if (vline_4_legend) {\r\n    line_legend_names <- c(line_legend_names, vline_4_name)\r\n    line_legend_colors <- c(line_legend_colors, vline_4_color)\r\n    line_legend_linetypes <- c(line_legend_linetypes, vline_4_linetype)\r\n    \r\n    # Add line with linetype mapping for legend\r\n    p <- p + geom_vline(\r\n      aes(xintercept = input$vline_4, linetype = vline_4_name),\r\n      linewidth = vline_4_linewidth,\r\n      color = vline_4_color,\r\n      alpha = 0.7\r\n    )\r\n  } else {\r\n    # Add line with no legend\r\n    p <- p + geom_vline(\r\n      xintercept = input$vline_4,\r\n      linetype = vline_4_linetype,\r\n      linewidth = vline_4_linewidth,\r\n      color = vline_4_color,\r\n      alpha = 0.7\r\n    )\r\n  }\r\n}\r\n\r\n# Apply the new linetype-based legend system that preserves main plot legend\r\nif (length(line_legend_names) > 0) {\r\n  # Create named vectors for the scale\r\n  legend_linetype_values <- setNames(line_legend_linetypes, line_legend_names)\r\n  \r\n  # Add the linetype scale with color override for the legend\r\n  p <- p + scale_linetype_manual(\r\n    name = 'Lines', \r\n    values = legend_linetype_values,\r\n    guide = guide_legend(\r\n      override.aes = list(color = line_legend_colors),\r\n      order = 2  # Place lines legend after main legend\r\n    )\r\n  )\r\n}\r\n\r\np # Return plot with overlays\r\n\"\r\n\r\n\r\n# NOTE: The complete statistical_overlays template from the original file is quite long\r\n# It includes detailed implementations for 4 horizontal lines and 4 vertical lines\r\n# Each with individual controls for linetype, color, linewidth, legend settings, etc.\r\n# For the complete implementation, refer to lines 471-807 in the original r_code_.R file","type":"text"},{"name":"template_plot_themes_styling.R","content":"# Themes & Styling Module for Static Plots\r\n\r\nggplot_themes_styling_template <- \"# Themes & Styling\r\n# Available: p (base plot), plot_df, input (UI inputs), x_label\r\n# Purpose: Apply themes, colors, fonts, and legend settings\r\n\r\n# Apply theme\r\ntheme_choice <- if(!is.null(input$plot_theme)) input$plot_theme else 'theme_classic'\r\nif (theme_choice == 'theme_classic') {\r\n  p <- p + theme_classic()\r\n} else if (theme_choice == 'theme_minimal') {\r\n  p <- p + theme_minimal()\r\n} else if (theme_choice == 'theme_dark') {\r\n  p <- p + theme_dark()\r\n} else if (theme_choice == 'theme_light') {\r\n  p <- p + theme_light()\r\n} else if (theme_choice == 'theme_bw') {\r\n  p <- p + theme_bw()\r\n} else if (theme_choice == 'theme_void') {\r\n  p <- p + theme_void()\r\n} else {\r\n  p <- p + theme_classic()\r\n}\r\n\r\n# Apply color palette\r\nif (!is.null(input$plot_color) && input$plot_color != 'null' && input$plot_color %in% names(plot_df)) {\r\n  color_palette <- if(!is.null(input$color_palette)) input$color_palette else 'default'\r\n  \r\n  if (color_palette == 'viridis') {\r\n    p <- p + scale_color_viridis_d()\r\n  } else if (color_palette %in% c('Set1', 'Set2', 'Dark2', 'Paired')) {\r\n    p <- p + scale_color_brewer(type = 'qual', palette = color_palette)\r\n  }\r\n  # Default palette is handled automatically by ggplot\r\n}\r\n\r\n# Get font sizes\r\ntitle_size <- if(!is.null(input$title_font_size)) input$title_font_size else 14\r\nxaxis_size <- if(!is.null(input$xaxis_font_size)) input$xaxis_font_size else 12\r\nyaxis_size <- if(!is.null(input$yaxis_font_size)) input$yaxis_font_size else 12\r\nlegend_size <- if(!is.null(input$legend_font_size)) input$legend_font_size else 12\r\n\r\n# Apply legend settings\r\nlegend_pos <- if(!is.null(input$legend_position)) input$legend_position else 'right'\r\n\r\n# Customize theme with all settings\r\np <- p + theme(\r\n  plot.title = element_text(hjust = 0.5, size = title_size),\r\n  axis.title.x = element_text(size = xaxis_size),\r\n  axis.title.y = element_text(size = yaxis_size),\r\n  axis.text.x = element_text(size = xaxis_size * 0.9),\r\n  axis.text.y = element_text(size = yaxis_size * 0.9),\r\n  legend.position = legend_pos,\r\n  legend.text = element_text(size = legend_size),\r\n  legend.title = element_text(size = legend_size)\r\n)\r\n\r\n# Add labels and title\r\nplot_labs <- labs(\r\n  title = if(!is.null(input$plot_title) && nzchar(input$plot_title)) input$plot_title else 'Plot Title',\r\n  x = x_label,\r\n  y = if(!is.null(input$plot_ylabel)) input$plot_ylabel else 'Y Axis',\r\n  caption = if(!is.null(input$plot_caption) && nzchar(input$plot_caption)) input$plot_caption else NULL\r\n)\r\n\r\n# Add proper legend labels\r\nif (!is.null(input$plot_color) && input$plot_color != 'null' && input$plot_color %in% names(plot_df)) {\r\n  plot_labs$colour <- input$plot_color\r\n}\r\nif (!is.null(input$plot_linetype) && input$plot_linetype != 'null' && input$plot_linetype %in% names(plot_df)) {\r\n  plot_labs$linetype <- input$plot_linetype\r\n}\r\n\r\np <- p + plot_labs\r\n\r\np # Return styled plot\r\n\"","type":"text"},{"name":"template_static_plot.R","content":"# Combined Static Plot Template\r\n# This template combines all modular templates for a complete static plot\r\n\r\nggplot_static_template <- \"# Combined Static Plot Template\r\n# This template combines all 6 modular templates for a complete static plot\r\n# Available: df (processed data), input (UI inputs)\r\n# Return: ggplot object\r\n\r\n# Step 1: Data Processing\r\neval(parse(text = ggplot_data_processing_template))\r\n# Result: plot_df, x_label\r\n\r\n# Step 2: Base Plot Setup  \r\neval(parse(text = ggplot_base_setup_template))\r\n# Result: p (base plot)\r\n\r\n# Step 3: Themes & Styling\r\neval(parse(text = ggplot_themes_styling_template))\r\n# Result: p (styled plot)\r\n\r\n# Step 4: Statistical Overlays\r\neval(parse(text = ggplot_statistical_overlays_template))\r\n# Result: p (plot with overlays)\r\n\r\n# Step 5: Grid & Axes\r\neval(parse(text = ggplot_grid_axes_template))\r\n# Result: p (plot with grid/axes), xlim_values, ylim_values\r\n\r\n# Step 6: Faceting & Final\r\neval(parse(text = ggplot_faceting_final_template))\r\n# Result: p (final ggplot object)\r\n\r\np # Return final plot\r\n\"","type":"text"},{"name":"template_table_output.R","content":"# Table Output Template\r\n\r\nggplot_table_template <- \"# Table output code\r\n# Available: df (processed data), input (UI inputs)\r\n# Return: DT::datatable object\r\n\r\n# Create summary table based on processed data\r\nif (is.null(df) || nrow(df) == 0) {\r\n  # No data case\r\n  data.frame(Message = 'No processed data available') |> \r\n    datatable(options = list(dom = 't'), rownames = FALSE, class = 'compact')\r\n} else {\r\n  # Create comprehensive summary table\r\n  if ('series' %in% names(df) && 'value' %in% names(df)) {\r\n    # Group by series and create summary statistics\r\n    summary_table <- df[, .(\r\n      Count = .N,\r\n      Mean = round(mean(value, na.rm = TRUE), 4),\r\n      Median = round(median(value, na.rm = TRUE), 4),\r\n      Min = round(min(value, na.rm = TRUE), 4),\r\n      Max = round(max(value, na.rm = TRUE), 4),\r\n      Std_Dev = round(sd(value, na.rm = TRUE), 4),\r\n      Missing = sum(is.na(value)),\r\n      First_Value = round(first(value), 4),\r\n      Last_Value = round(last(value), 4)\r\n    ), by = series][order(-Count)]\r\n    \r\n    # Add date range if timestamp available\r\n    if ('timestamp' %in% names(df)) {\r\n      date_ranges <- df[, .(\r\n        Start_Time = format(min(timestamp, na.rm = TRUE), '%Y-%m-%d %H:%M:%S'),\r\n        End_Time = format(max(timestamp, na.rm = TRUE), '%Y-%m-%d %H:%M:%S'),\r\n        Duration_Hours = round(as.numeric(difftime(max(timestamp, na.rm = TRUE), \r\n                                                  min(timestamp, na.rm = TRUE), \r\n                                                  units = 'hours')), 2)\r\n      ), by = series]\r\n      \r\n      summary_table <- merge(summary_table, date_ranges, by = 'series')\r\n    }\r\n    \r\n  } else {\r\n    # Fallback: basic data summary\r\n    summary_table <- data.frame(\r\n      Column = names(df),\r\n      Type = sapply(df, function(x) class(x)[1]),\r\n      Count = sapply(df, function(x) sum(!is.na(x))),\r\n      Missing = sapply(df, function(x) sum(is.na(x))),\r\n      Sample_Values = sapply(df, function(x) {\r\n        if (is.numeric(x)) {\r\n          paste(round(head(x[!is.na(x)], 3), 3), collapse = ', ')\r\n        } else {\r\n          paste(head(x[!is.na(x)], 3), collapse = ', ')\r\n        }\r\n      }),\r\n      stringsAsFactors = FALSE\r\n    )\r\n  }\r\n  \r\n  # Create interactive datatable\r\n  datatable(\r\n    summary_table,\r\n    options = list(\r\n      scrollX = TRUE,\r\n      pageLength = 15,\r\n      searching = TRUE,\r\n      lengthMenu = c(10, 15, 25, 50),\r\n      columnDefs = list(list(className = 'dt-center', targets = '_all'))\r\n    ),\r\n    rownames = FALSE,\r\n    filter = 'top',\r\n    class = 'compact stripe hover',\r\n    caption = if(!is.null(input$plot_title) && nzchar(input$plot_title)) \r\n                paste('Data Summary:', input$plot_title) else 'Data Summary Table'\r\n  ) |> formatStyle(\r\n    columns = names(summary_table),\r\n    fontSize = '12px'\r\n  )\r\n}\r\n\"","type":"text"},{"name":"template_text_output.R","content":"# Text Output Template\r\n# Separate Ace Editor Templates for Plotting\r\n\r\nggplot_text_template <- \"# Text output code\r\n# Available: df (processed data), input (UI inputs)\r\n# Return: Any printable R output (summary, table, custom text, etc.)\r\n\r\n# Example text outputs:\r\nlist(\r\n  'Data Summary' = summary(df),\r\n  'Row Count' = nrow(df),\r\n  'Column Names' = names(df),\r\n  'Unique Series' = if('series' %in% names(df)) unique(df$series) else 'No series column',\r\n  'Date Range' = if('timestamp' %in% names(df)) {\r\n    paste('From:', min(df$timestamp, na.rm=TRUE), 'To:', max(df$timestamp, na.rm=TRUE))\r\n  } else 'No timestamp column',\r\n  'Sample Data' = head(df, 10)\r\n)\r\n\"","type":"text"},{"name":"ui_global.R","content":"ui_global <- function() {\n\n\n\n\n\npage_navbar(\n  theme = bs_theme(bootswatch = \"minty\", version = 5),\n  title = \"Data Plotter v1.1\",\n  id = \"mainmenu\",\n\n  # Input Data Management Tab\n  nav_panel(\n    title = \"Input Data\",\n    icon = icon(\"upload\"),\n    layout_sidebar(\n      sidebar = sidebar(\n        title = \"File Management\",\n        width = 400,\n        class = \"p-3\",\n        \n        # File Upload Section\n        div(class = \"mb-3\",\n          h5(\"Upload Files\"),\n          \n          # File upload buttons in tabs or side by side\n          navset_pill(\n            nav_panel(\n              \"Files\",\n              icon = icon(\"file\"),\n              fileInput(\n                \"global_file_upload\",\n                \"Select Individual Files\",\n                multiple = TRUE,\n                buttonLabel = list(icon(\"upload\"), \"Browse Files\"),\n                placeholder = \"No files selected\",\n                width = \"100%\"\n              ) |> tooltip(\"Upload individual data files: CSV, Excel (.xlsx), FST, Parquet, or compressed (.csv.gz)\")\n            ),\n            nav_panel(\n              \"Folder\",\n              icon = icon(\"folder\"),\n              div(\n                # Custom folder input with webkitdirectory\n                tags$input(\n                  id = \"global_folder_upload\",\n                  type = \"file\",\n                  webkitdirectory = NA,\n                  multiple = TRUE,\n                  style = \"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 8px;\"\n                ),\n                \n                # Progress bar for folder upload\n                div(id = \"folder_upload_progress_container\", style = \"display: none; margin-bottom: 8px;\",\n                  div(class = \"d-flex justify-content-between align-items-center mb-1\",\n                    tags$small(\"Processing files...\", class = \"text-muted\"),\n                    tags$small(id = \"folder_upload_progress_text\", \"0 / 0\", class = \"text-muted\")\n                  ),\n                  div(class = \"progress\", style = \"height: 8px;\",\n                    div(id = \"folder_upload_progress_bar\", class = \"progress-bar bg-primary\", \n                        role = \"progressbar\", style = \"width: 0%\", \n                        `aria-valuenow` = \"0\", `aria-valuemin` = \"0\", `aria-valuemax` = \"100\")\n                  )\n                ),\n                \n                # File type filter\n                div(class = \"mb-2\",\n                  h6(\"File Type Filters\", class = \"text-muted mb-1 small\"),\n                  textInput(\n                    \"folder_ignore_extensions\",\n                    NULL,\n                    value = \"txt,log,tmp,bak,old,~\",\n                    placeholder = \"txt,log,tmp,bak...\",\n                    width = \"100%\"\n                  ) |> tooltip(\"Comma-separated list of file extensions to ignore (without dots). Leave empty to upload all files.\"),\n                  textInput(\n                    \"folder_allow_extensions\",\n                    NULL,\n                    value = \"csv,xlsx,xls,fst,parquet,gz\",\n                    placeholder = \"csv,xlsx,fst,parquet...\",\n                    width = \"100%\"\n                  ) |> tooltip(\"Comma-separated list of file extensions to ALLOW (without dots). Leave empty to allow all files (except ignored ones).\")\n                ),\n                \n                # Filename filters\n                div(class = \"mb-2\",\n                  h6(\"Filename Filters\", class = \"text-muted mb-1 small\"),\n                  textInput(\n                    \"folder_content_include\",\n                    NULL,\n                    value = \"\",\n                    placeholder = \"Include filenames containing (comma-separated)...\",\n                    width = \"100%\"\n                  ) |> tooltip(\"Only upload files whose filename contains any of these comma-separated strings. Leave empty to skip filename filtering.\"),\n                  textInput(\n                    \"folder_content_exclude\",\n                    NULL,\n                    value = \"\",\n                    placeholder = \"Exclude filenames containing (comma-separated)...\",\n                    width = \"100%\"\n                  ) |> tooltip(\"Exclude files whose filename contains any of these comma-separated strings. Applied after include filter.\")\n                ),\n                \n                p(class = \"text-muted small\", \"Select a folder to upload all files within it. Files will be named as: folder-subfolder-filename\")\n              ) |> tooltip(\"Upload entire folders - files will be automatically named with folder structure\")\n            )\n          ),\n          \n          checkboxInput(\n            \"overwrite_files\",\n            \"Allow file overwrite\",\n            value = FALSE\n          ) |> tooltip(\"If checked, uploading files with the same name will replace existing files\")\n        ),\n        \n        # File Actions\n        div(class = \"mb-3\",\n          h5(\"File Actions\"),\n          actionButton(\n            \"remove_selected_files\",\n            \"Remove Selected\",\n            icon = icon(\"trash\"),\n            class = \"btn-danger w-100 mb-2\"\n          ) |> tooltip(\"Remove selected files from the list\"),\n          \n          actionButton(\n            \"clear_all_files\",\n            \"Clear All Files\",\n            icon = icon(\"trash-alt\"),\n            class = \"btn-outline-danger w-100\"\n          ) |> tooltip(\"Remove all uploaded files\")\n        ),\n        \n        # File Statistics\n        div(class = \"mb-3\",\n          h5(\"Statistics\"),\n          verbatimTextOutput(\"file_stats\")\n        )\n      ),\n      \n      # Main content - file list\n      div(class = \"p-3\",\n        h4(\"Uploaded Files\"),\n        p(class = \"text-muted\", \"Manage your uploaded files here. These files will be available in all Data Import tabs.\"),\n        DT::DTOutput(\"global_file_list\")\n      )\n    )\n  ),\n\n  # Dynamic data import tabs will be inserted here\n  nav_panel(\n    title = \"Combined Data\", \n    icon = icon(\"database\"),\n    ui_data_combiner(\"combiner\")\n  ),\n  \n  # Placeholder for where plots are inserted before\n  nav_panel(\n    title = \"Analysis\", \n    icon = icon(\"chart-area\"),\n    div(class = \"text-center p-5\",\n      icon(\"chart-line\", class = \"fa-3x text-muted mb-3\"),\n      h4(\"No Plotters Created Yet\"),\n      p(class = \"text-muted\", \"Click 'Add Plotter' to create your first plot.\"),\n      p(class = \"text-muted small\", \"Plotters will appear as tabs before this one.\")\n    )\n  ),\n\n  nav_spacer(),\n  \n  # Utility Tools Menu\n  nav_menu(\n    title = \"Tools\",\n    icon = icon(\"tools\"),\n    align = \"right\",\n    nav_panel(\n      title = \"R Code Helper\",\n      icon = icon(\"code\"),\n      layout_sidebar(\n        sidebar = sidebar(\n          title = \"R Code Sandbox\",\n          position = \"left\",\n          width = 500,\n          p(class = \"text-muted small\", \"Test R code in a safe environment\"),\n          aceEditor_pre(\"helper_input\", value = helper_code_template)\n        ),\n        div(class = \"p-3\",\n          h5(\"Code Output\"),\n          uiOutput(\"helper_output\")\n        )\n      )\n    ),\n    nav_panel(\n      title = \"Batch Download\",\n      icon = icon(\"download\"),\n      layout_sidebar(\n        sidebar = sidebar(\n          title = \"Download Configuration\",\n          position = \"left\",\n          width = 500,\n          p(class = \"text-muted small\", \"Configure batch download of all plots\"),\n          aceEditor_pre(\"downloader_input\", value = downloader_code_refactored)\n        ),\n        div(class = \"p-3\",\n          h5(\"Download Interface\"),\n          uiOutput(\"downloader_output\")\n        )\n      )\n    )\n  ),\n  \n  # Templates Menu\n  nav_menu(\n    title = \"Templates\",\n    icon = icon(\"bookmark\"),\n    align = \"right\",\n    nav_item(\n      div(class = \"px-3 py-2\",\n        h6(\"Load Template\"),\n        fileInput(\n          \"template_upload\", \n          \"Upload Template\",\n          accept = \".json\", \n          width = \"100%\",\n          buttonLabel = list(icon(\"upload\"), \"Browse\")\n        ) |> tooltip(\"Load a previously saved JSON template configuration\")\n      )\n    ),\n    nav_item(hr()),\n    nav_item(\n      div(class = \"px-3 py-2\",\n        h6(\"Save Template\"),\n        textInput(\n          \"template_file_name\", \n          \"Filename\", \n          value = paste0(\"template_\", Sys.Date()),\n          placeholder = \"Enter template name...\"\n        ),\n        downloadButton(\n          \"download_template\", \n          \"Download Template\",\n          icon = icon(\"download\"),\n          class = \"btn-outline-primary\",\n          width = \"100%\"\n        ) |> tooltip(\"Save current app settings as a JSON template\")\n      )\n    )\n  ),\n  \n  # Theme Toggle\n  nav_item(\n    input_dark_mode(mode = \"light\") |> \n      tooltip(\"Toggle light/dark theme\")\n  ),\n  \n  # Add Data Import\n  nav_item(\n    div(class = \"px-3 py-2\",\n      action_input_tip(\n        \"insert_importer\", \n        \"Add Data Import Tab\",\n        icon = icon(\"file-import\"), \n        class = \"btn-info\",\n        width = \"100%\",\n        tip = \"Create a new data import tab for uploading and processing files\"\n      )\n    )\n  ),\n  nav_item(\n    div(class = \"px-3 py-2\",\n      action_input_tip(\n        \"insert_plot\", \n        \"Add Plotter Tab\",\n        icon = icon(\"chart-area\"), \n        class = \"btn-success\",\n        width = \"100%\",\n        tip = \"Create a new plotter for visualizing your combined data\"\n      )\n    )\n  ),\n  \n  # Add JavaScript and CSS\n  tags$script(HTML(r\"---(\n    console.log('Tab renaming JavaScript loaded');\n    \n    // Dynamic navbar height calculation and module sizing\n    function updateModuleHeights() {\n      // Calculate the actual navbar height\n      const navbar = document.querySelector('.navbar');\n      const navbarHeight = navbar ? navbar.offsetHeight : 56; // fallback to typical bootstrap navbar height\n      \n      // Add some padding for safety (e.g., for borders, margins)\n      const padding = 50;\n      const totalOffset = navbarHeight + padding;\n      \n      // Set CSS custom property for dynamic height\n      document.documentElement.style.setProperty('--navbar-height', navbarHeight + 'px');\n      document.documentElement.style.setProperty('--module-height', `calc(100vh - ${totalOffset}px)`);\n      \n      console.log('Navbar height detected:', navbarHeight + 'px');\n      console.log('Module height set to:', `calc(100vh - ${totalOffset}px)`);\n      \n      // Apply to all module containers\n      const moduleSelectors = [\n        '[data-bs-toggle=\\\"pill\\\"]', // navset_card_pill containers\n        '.layout-sidebar',            // layout_sidebar containers\n        '.card-tabs',                 // card tab containers\n        '.module-container'           // custom module containers\n      ];\n      \n      moduleSelectors.forEach(selector => {\n        const elements = document.querySelectorAll(selector);\n        elements.forEach(el => {\n          // Only apply to top-level module containers, not nested ones\n          if (!el.closest('.tab-pane') && !el.closest('.sidebar')) {\n            el.style.height = `calc(100vh - ${totalOffset}px)`;\n            el.style.maxHeight = `calc(100vh - ${totalOffset}px)`;\n            el.style.overflow = 'hidden';\n          }\n        });\n      });\n    }\n    \n    // Run on page load\n    document.addEventListener('DOMContentLoaded', function() {\n      updateModuleHeights();\n    });\n    \n    // Run when window resizes\n    window.addEventListener('resize', updateModuleHeights);\n    \n    // Run when new tabs are added (using MutationObserver)\n    // Throttle the height update function to prevent excessive calls\n    let heightUpdateTimeout = null;\n    function throttledUpdateModuleHeights() {\n      if (heightUpdateTimeout) {\n        clearTimeout(heightUpdateTimeout);\n      }\n      heightUpdateTimeout = setTimeout(updateModuleHeights, 150);\n    }\n\n    const observer = new MutationObserver(function(mutations) {\n      let shouldUpdate = false;\n      \n      mutations.forEach(function(mutation) {\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n          // Only trigger for significant DOM changes, not every hover/input change\n          const hasNewNavPanel = Array.from(mutation.addedNodes).some(node => \n            node.nodeType === 1 && (\n              node.classList?.contains('nav-item') || \n              node.classList?.contains('tab-pane') ||\n              node.querySelector?.('.nav-item') ||\n              node.querySelector?.('.module-container')\n            )\n          );\n          \n          if (hasNewNavPanel) {\n            shouldUpdate = true;\n          }\n        }\n      });\n      \n      if (shouldUpdate) {\n        throttledUpdateModuleHeights();\n      }\n    });\n    \n    // Observe the navbar and main content for changes\n    const targetElements = [\n      document.querySelector('.navbar'),\n      document.querySelector('#mainmenu'),\n      document.body\n    ].filter(Boolean);\n    \n    targetElements.forEach(target => {\n      if (target) {\n        observer.observe(target, { \n          childList: true, \n          subtree: true \n        });\n      }\n    });\n    \n    // Store tab mappings to help with repeated renames\n    window.tabMappings = window.tabMappings || {};\n    \n    // Handle custom message for selecting/deselecting all plots\n    Shiny.addCustomMessageHandler('selectAllPlots', function(data) {\n      var checkboxes = document.querySelectorAll('input[id^=\\\"select_plot_\\\"]');\n      checkboxes.forEach(function(checkbox) {\n        checkbox.checked = data.select;\n      });\n    });\n    \n    // Folder upload handler\n    $(document).ready(function() {\n      console.log('Setting up folder upload handler');\n      \n      // Handle folder selection\n      $(document).on('change', '#global_folder_upload', function(e) {\n        console.log('Folder upload change detected');\n        var files = e.target.files;\n        console.log('Number of files selected:', files.length);\n        \n        if (files.length > 0) {\n          // Show progress bar\n          $('#folder_upload_progress_container').show();\n          $('#folder_upload_progress_bar').css('width', '0%').attr('aria-valuenow', 0);\n          $('#folder_upload_progress_text').text('0 / ' + files.length);\n          // Get file type filters from Shiny inputs\n          var ignoreExtensions = [];\n          var allowExtensions = [];\n          var filenameIncludeStrings = [];\n          var filenameExcludeStrings = [];\n          \n          // Read the filter inputs\n          var ignoreInput = $('#folder_ignore_extensions').val();\n          var allowInput = $('#folder_allow_extensions').val();\n          var filenameIncludeInput = $('#folder_content_include').val();\n          var filenameExcludeInput = $('#folder_content_exclude').val();\n          \n          if (ignoreInput && ignoreInput.trim() !== '') {\n            ignoreExtensions = ignoreInput.toLowerCase().split(',').map(function(ext) {\n              return ext.trim().replace(/^\\\\./, ''); // Remove leading dot if present\n            });\n          }\n          \n          if (allowInput && allowInput.trim() !== '') {\n            allowExtensions = allowInput.toLowerCase().split(',').map(function(ext) {\n              return ext.trim().replace(/^\\\\./, ''); // Remove leading dot if present\n            });\n          }\n          \n          if (filenameIncludeInput && filenameIncludeInput.trim() !== '') {\n            filenameIncludeStrings = filenameIncludeInput.split(',').map(function(str) {\n              return str.trim().toLowerCase();\n            }).filter(function(str) {\n              return str.length > 0;\n            });\n          }\n          \n          if (filenameExcludeInput && filenameExcludeInput.trim() !== '') {\n            filenameExcludeStrings = filenameExcludeInput.split(',').map(function(str) {\n              return str.trim().toLowerCase();\n            }).filter(function(str) {\n              return str.length > 0;\n            });\n          }\n          \n          console.log('Ignore extensions:', ignoreExtensions);\n          console.log('Allow extensions:', allowExtensions);\n          console.log('Filename include strings:', filenameIncludeStrings);\n          console.log('Filename exclude strings:', filenameExcludeStrings);\n          \n          // Update progress bar to show filtering phase\n          $('#folder_upload_progress_text').text('Filtering files...');\n          \n          // Create array for filtered files\n          var fileDataArray = [];\n          var filesFiltered = 0;\n          \n          // Apply all filters in one pass: extension filtering and filename filtering\n          for (var i = 0; i < files.length; i++) {\n            var file = files[i];\n            \n            // Extract folder structure from webkitRelativePath\n            var relativePath = file.webkitRelativePath || file.name;\n            var fileName = relativePath.split('/').pop(); // Get just the filename\n            \n            // Get file extension\n            var fileExt = '';\n            var lastDotIndex = fileName.lastIndexOf('.');\n            if (lastDotIndex > 0 && lastDotIndex < fileName.length - 1) {\n              fileExt = fileName.substring(lastDotIndex + 1).toLowerCase();\n            }\n            \n            // Apply file type filters\n            var shouldInclude = true;\n            \n            // Check if file extension should be ignored\n            if (ignoreExtensions.length > 0 && ignoreExtensions.includes(fileExt)) {\n              console.log('Ignoring file (extension blacklisted):', fileName, 'ext:', fileExt);\n              shouldInclude = false;\n              filesFiltered++;\n            }\n            \n            // Check if file extension is in allow list (if allow list is specified)\n            if (shouldInclude && allowExtensions.length > 0 && !allowExtensions.includes(fileExt)) {\n              console.log('Ignoring file (not in allow list):', fileName, 'ext:', fileExt);\n              shouldInclude = false;\n              filesFiltered++;\n            }\n            \n            if (!shouldInclude) {\n              continue; // Skip this file\n            }\n            \n            // Create new file name with folder structure\n            var pathParts = relativePath.split('/');\n            var folderName = pathParts[0]; // Root folder name\n            \n            // Create hierarchical name: folder-subfolder-filename\n            var newName;\n            if (pathParts.length > 2) {\n              // Has subfolders\n              var subfolders = pathParts.slice(1, -1).join('-');\n              newName = folderName + '-' + subfolders + '-' + fileName;\n            } else {\n              // Direct file in root folder\n              newName = folderName + '-' + fileName;\n            }\n            \n            console.log('File passed extension filter:', relativePath, '-> New name:', newName);\n            \n            // Apply filename include filter\n            if (filenameIncludeStrings.length > 0) {\n              var includeMatch = filenameIncludeStrings.some(function(includeStr) {\n                return newName.toLowerCase().includes(includeStr);\n              });\n              \n              if (!includeMatch) {\n                console.log('Ignoring file (filename include filter):', newName);\n                shouldInclude = false;\n                filesFiltered++;\n              }\n            }\n            \n            // Apply filename exclude filter\n            if (shouldInclude && filenameExcludeStrings.length > 0) {\n              var excludeMatch = filenameExcludeStrings.some(function(excludeStr) {\n                return newName.toLowerCase().includes(excludeStr);\n              });\n              \n              if (excludeMatch) {\n                console.log('Ignoring file (filename exclude filter):', newName);\n                shouldInclude = false;\n                filesFiltered++;\n              }\n            }\n            \n            if (!shouldInclude) {\n              continue; // Skip this file\n            }\n            \n            // Store file info for files that passed all filters\n            var fileInfo = {\n              name: newName,\n              size: file.size,\n              type: file.type,\n              lastModified: file.lastModified,\n              originalPath: relativePath,\n              file: file,\n              extension: fileExt\n            };\n            \n            fileDataArray.push(fileInfo);\n          }\n          \n          // All filtering complete, proceed with filtered files\n          console.log('Filtering complete, proceeding with', fileDataArray.length, 'files (', filesFiltered, 'filtered out)');\n          proceedWithFilteredFiles();\n          \n          function proceedWithFilteredFiles() {\n            // Send folder data to Shiny\n            console.log('Sending folder data to Shiny:', fileDataArray.length, 'files (', filesFiltered, 'filtered out)');\n            Shiny.setInputValue('global_folder_upload_data', {\n              files: fileDataArray.map(function(f) {\n                return {\n                  name: f.name,\n                  size: f.size,\n                  type: f.type,\n                  lastModified: f.lastModified,\n                  originalPath: f.originalPath,\n                  extension: f.extension\n                };\n              }),\n              filesFiltered: filesFiltered,\n              totalFiles: files.length,\n              timestamp: Date.now()\n            });\n            \n            // Process files sequentially with progress updates and batched sending\n            var fileResults = [];\n            var totalFiles = fileDataArray.length;\n            var processedFiles = 0;\n            var batchSize = 5; // Send files in smaller batches to improve responsiveness\n            var batchCounter = 0;\n            \n            function sendBatchToShiny(batch, isLastBatch) {\n              console.log('Sending batch of', batch.length, 'files to Shiny (batch', batchCounter + 1, ')');\n              Shiny.setInputValue('global_folder_upload_files_batch', {\n                files: batch,\n                batchNumber: batchCounter,\n                isLastBatch: isLastBatch,\n                totalBatches: Math.ceil(totalFiles / batchSize),\n                timestamp: Date.now()\n              });\n              batchCounter++;\n            }\n          \n          function processNextFile(index) {\n            if (index >= totalFiles) {\n              // All files processed - send final batch if any remain and hide progress\n              if (fileResults.length > 0) {\n                sendBatchToShiny(fileResults, true);\n              }\n              console.log('All files processed and sent to Shiny in batches');\n              $('#folder_upload_progress_container').hide();\n              return;\n            }\n            \n            var fileData = fileDataArray[index];\n            var reader = new FileReader();\n            \n            reader.onload = function(e) {\n              fileResults.push({\n                index: index,\n                name: fileData.name,\n                dataURL: e.target.result,\n                originalPath: fileData.originalPath\n              });\n              \n              // Send batch to Shiny when batch is full\n              if (fileResults.length >= batchSize) {\n                sendBatchToShiny(fileResults.slice(), false); // Send copy of current batch\n                fileResults = []; // Clear the batch\n              }\n               \n               processedFiles++;\n               var progressPercent = Math.round((processedFiles / totalFiles) * 100);\n               \n               // Update progress bar\n               $('#folder_upload_progress_bar').css('width', progressPercent + '%').attr('aria-valuenow', progressPercent);\n               var statusText = processedFiles + ' / ' + totalFiles;\n               if (processedFiles < totalFiles) {\n                 statusText += ' (reading files...)';\n               } else {\n                 statusText += ' (sending to server...)';\n               }\n               $('#folder_upload_progress_text').text(statusText);\n               \n               console.log('Processed file', processedFiles, 'of', totalFiles, '(' + progressPercent + '%)');\n               \n               // Use longer delay for larger files to prevent UI blocking\n               var delay = fileData.size > 1000000 ? 100 : 50; // 100ms for files > 1MB, 50ms otherwise\n               setTimeout(function() { processNextFile(index + 1); }, delay);\n             };\n            \n            reader.onerror = function(e) {\n              console.error('Error reading file:', fileData.name, e);\n              processedFiles++;\n              var progressPercent = Math.round((processedFiles / totalFiles) * 100);\n              \n                             // Update progress bar even on error\n               $('#folder_upload_progress_bar').css('width', progressPercent + '%').attr('aria-valuenow', progressPercent);\n               var statusText = processedFiles + ' / ' + totalFiles;\n               if (processedFiles < totalFiles) {\n                 statusText += ' (reading files...)';\n               } else {\n                 statusText += ' (sending to server...)';\n               }\n               $('#folder_upload_progress_text').text(statusText);\n              \n              // Process next file with longer delay to prevent UI blocking\n              setTimeout(function() { processNextFile(index + 1); }, 50);\n            };\n            \n            reader.readAsDataURL(fileData.file);\n          }\n          \n            // Start processing files\n            if (totalFiles > 0) {\n              $('#folder_upload_progress_text').text('0 / ' + totalFiles + ' (reading files...)');\n              processNextFile(0);\n            } else {\n              $('#folder_upload_progress_container').hide();\n            }\n          } // End of proceedWithFilteredFiles function\n         } else {\n           // No files selected - hide progress bar\n           $('#folder_upload_progress_container').hide();\n         }\n       });\n    });\n    \n    // Handle custom message for updating tab titles\n    Shiny.addCustomMessageHandler('updateNavTabTitle', function(data) {\n      console.log('=== TAB RENAME MESSAGE RECEIVED ===');\n      console.log('Module ID:', data.moduleId, 'New Title:', data.newTitle, 'Old Title:', data.oldTitle);\n      \n      var moduleId = data.moduleId;\n      var newTitle = data.newTitle;\n      var oldTitle = data.oldTitle;\n      var success = false;\n      var updatedElement = null;\n      \n      // Strategy 1: Find by previously stored data-module-id attribute\n      var existingElement = document.querySelector('.nav-link[data-module-id=\"' + moduleId + '\"]');\n      if (existingElement) {\n        existingElement.textContent = newTitle;\n        updatedElement = existingElement;\n        success = true;\n        console.log('SUCCESS: Updated via stored module ID');\n      }\n      \n      // Strategy 2: Find by exact text match with old title\n      if (!success && oldTitle) {\n        var textMatches = Array.from(document.querySelectorAll('.nav-link')).filter(function(link) {\n          return link.textContent.trim() === oldTitle.trim();\n        });\n        \n        if (textMatches.length > 0) {\n          textMatches[0].textContent = newTitle;\n          updatedElement = textMatches[0];\n          success = true;\n          console.log('SUCCESS: Updated via exact text match');\n        }\n      }\n      \n      // Strategy 3: Find by module ID pattern (for import and plotter modules)\n      if (!success) {\n        var navLinks = document.querySelectorAll('.nav-link');\n        \n        // For import modules, look for 'Import X' pattern and match the number\n        if (moduleId.includes('data_import_module_')) {\n          var moduleNumber = moduleId.replace('data_import_module_', '');\n          var importPattern = new RegExp('Import\\\\s+' + moduleNumber + '($|\\\\s)');\n          \n          Array.from(navLinks).forEach(function(link) {\n            if (!success && importPattern.test(link.textContent.trim())) {\n              link.textContent = newTitle;\n              updatedElement = link;\n              success = true;\n              console.log('SUCCESS: Updated import module via pattern matching');\n            }\n          });\n        }\n        \n        // For plotter modules, look for 'plotter_X' pattern\n        if (!success && moduleId.includes('plotter_')) {\n          Array.from(navLinks).forEach(function(link) {\n            if (!success && link.textContent.trim() === moduleId) {\n              link.textContent = newTitle;\n              updatedElement = link;\n              success = true;\n              console.log('SUCCESS: Updated plotter module via ID matching');\n            }\n          });\n        }\n      }\n      \n      // Strategy 4: Check stored mappings as fallback\n      if (!success && window.tabMappings[moduleId]) {\n        console.log('Strategy 4: Looking for previously mapped tab');\n        var mappedTitle = window.tabMappings[moduleId];\n        var mappedElements = Array.from(document.querySelectorAll('.nav-link, .navbar-nav a, .nav-item a')).filter(function(link) {\n          return link.textContent.trim() === mappedTitle.trim();\n        });\n        \n        console.log('Found', mappedElements.length, 'elements matching mapped title:', mappedTitle);\n        \n        if (mappedElements.length > 0) {\n          mappedElements[0].textContent = newTitle;\n          updatedElement = mappedElements[0];\n          success = true;\n          console.log('SUCCESS: Updated via mapping');\n        }\n      }\n      \n      // Strategy 5: Brute force - find any nav element and update it (last resort)\n      if (!success) {\n        console.log('Strategy 5: Brute force update of first available nav element');\n        var allNavElements = document.querySelectorAll('.nav-link, .navbar-nav a, .nav-item a');\n        \n        // Look for elements that might be import tabs (avoid updating other tabs)\n        var candidateElements = Array.from(allNavElements).filter(function(element) {\n          var text = element.textContent.trim();\n          return text.includes('Import') || text.includes('Data') || text === oldTitle;\n        });\n        \n        if (candidateElements.length > 0) {\n          candidateElements[0].textContent = newTitle;\n          updatedElement = candidateElements[0];\n          success = true;\n          console.log('SUCCESS: Updated via brute force');\n        }\n      }\n      \n      // Store the mapping for future renames\n      if (success && updatedElement) {\n        window.tabMappings[moduleId] = newTitle;\n        console.log('Stored mapping:', moduleId, '->', newTitle);\n        \n        // Also add a data attribute to the element for future identification\n        updatedElement.setAttribute('data-module-id', moduleId);\n      }\n      \n      if (success) {\n        console.log('=== TAB RENAME SUCCESSFUL ===');\n      } else {\n        console.log('=== TAB RENAME FAILED ===');\n      }\n    });\n    \n         console.log('Tab renaming handler registered');\n     \n     // Fixed tab renaming code for Bootstrap 5\n     $(document).on('dblclick', '.nav-link', function(e) {\n       e.preventDefault();\n       \n       var $navLink = $(this);\n       var currentText = $navLink.text().trim();\n       \n       console.log('Double-click detected on tab:', currentText);\n       \n       // Don't allow editing if already editing\n       if ($navLink.find('input').length > 0) {\n         return;\n       }\n       \n       // Create input element\n       var $input = $('<input type=\"text\" class=\"form-control form-control-sm tab-rename-input\">');\n       $input.css({\n         'width': 'auto',\n         'min-width': '120px',\n         'display': 'inline-block',\n         'font-size': '14px',\n         'padding': '2px 8px',\n         'margin': '0',\n         'border': '2px solid #007bff',\n         'border-radius': '4px'\n       });\n       $input.val(currentText);\n       \n       // Store original text\n       $navLink.data('original-text', currentText);\n       \n       // Replace tab text with input\n       $navLink.html($input);\n       $input.focus().select();\n       \n       // Handle input events\n       $input.on('blur keydown', function(e) {\n         if (e.type === 'blur' || e.keyCode === 13) { // Enter key\n           var newText = $(this).val().trim();\n           \n           if (newText && newText !== currentText) {\n             console.log('Tab rename requested:', currentText, '->', newText);\n             \n             // Send message to Shiny for server-side update\n             Shiny.setInputValue('tab_rename_request', {\n               oldText: currentText,\n               newText: newText,\n               timestamp: Date.now()\n             });\n           }\n           \n           // Restore original text (will be updated by server if successful)\n           $navLink.text(currentText);\n           \n         } else if (e.keyCode === 27) { // Escape key\n           console.log('Tab rename cancelled');\n           $navLink.text(currentText);\n         }\n       });\n       \n       // Prevent the input from triggering navigation\n       $input.on('click', function(e) {\n         e.stopPropagation();\n         e.preventDefault();\n       });\n     });\n   )---\")),\n  \n  # Add CSS for module styling\n  tags$style(HTML(\"\n    /* CSS custom properties for dynamic heights */\n    :root {\n      --navbar-height: 56px; /* fallback */\n      --module-height: calc(100vh - 76px); /* fallback */\n    }\n    \n    /* Apply dynamic height to main module containers */\n    .module-container,\n    .navset-card-pill,\n    .layout-sidebar {\n      height: var(--module-height) !important;\n      max-height: var(--module-height) !important;\n    }\n    \n    /* Ensure sidebar content is scrollable */\n    .sidebar .sidebar-content {\n      height: calc(100% - 40px) !important;\n      overflow-y: auto !important;\n    }\n    \n    /* Ensure main content areas are scrollable */\n    .tab-content > .tab-pane,\n    .layout-sidebar > .layout-sidebar-main {\n      height: 100% !important;\n      overflow-y: auto !important;\n    }\n    \n    /* Fix for nested tab containers */\n    .tab-content .navset-card-pill,\n    .tab-content .layout-sidebar {\n      height: calc(100% - 20px) !important;\n      max-height: calc(100% - 20px) !important;\n    }\n    \n    /* Ensure tables and plots fill their containers properly */\n    .dataTables_wrapper {\n      height: calc(100% - 50px) !important;\n      max-height: calc(100% - 50px) !important;\n      overflow: auto !important;\n    }\n    \n    .plotly,\n    .shiny-plot-output {\n      height: calc(100% - 100px) !important;\n      max-height: calc(100% - 100px) !important;\n      overflow: auto !important;\n    }\n    \n    /* Ensure card bodies take full height */\n    .card-body {\n      display: flex !important;\n      flex-direction: column !important;\n      height: 100% !important;\n    }\n    \n    /* Ace editor specific styling for sidebars */\n    .sidebar .ace_editor {\n      height: calc(100vh - 350px) !important;\n      min-height: 300px !important;\n      max-height: calc(100vh - 200px) !important;\n    }\n    \n    /* Ace editor in popovers should stay smaller */\n    .popover .ace_editor {\n      height: 200px !important;\n      min-height: 150px !important;\n      max-height: 300px !important;\n    }\n    \n    /* Large popover for table code editing */\n    .large-popover {\n      max-width: 800px !important;\n      width: 800px !important;\n    }\n    \n    .large-popover .popover-body {\n      padding: 15px !important;\n      max-height: 500px !important;\n      overflow-y: auto !important;\n    }\n    \n    .large-popover .ace_editor {\n      height: 300px !important;\n      min-height: 250px !important;\n      max-height: 400px !important;\n    }\n    \n    /* Responsive adjustments */\n    @media (max-width: 768px) {\n      :root {\n        --module-height: calc(100vh - 90px); /* More space for mobile navbar */\n      }\n    }\n  \"))\n)\n\n}","type":"text"}]
